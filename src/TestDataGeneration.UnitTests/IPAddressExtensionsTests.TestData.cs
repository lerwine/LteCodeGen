using System.Net;
using NUnit.Framework.Constraints;
using TestDataGeneration.Net;
using TestDataGeneration.Numerics;

namespace TestDataGeneration.UnitTests;

public partial class IPAddressExtensionsTests
{
    static class TestData
    {
        public static System.Collections.IEnumerable GetGetFirstAddressInBlockTest1Data()
        {
            #region prefixLength = 127 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)127
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_0101, 0b0110_0000, 0b0110_1001, 0b0100_1001, 0b1100_0001, 0b1011_0110, 0b1111_0011, 0b1000_1111,
                    0b0110_0110, 0b0111_1110, 0b1010_0000, 0b0011_0001, 0b0101_0001, 0b1000_0000, 0b0000_1011, 0b0110_0011
                }), // 9560:6949:c1b6:f38f:667e:a031:5180:b63
                (byte)127
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_0101, 0b0110_0000, 0b0110_1001, 0b0100_1001, 0b1100_0001, 0b1011_0110, 0b1111_0011, 0b1000_1111,
                    0b0110_0110, 0b0111_1110, 0b1010_0000, 0b0011_0001, 0b0101_0001, 0b1000_0000, 0b0000_1011, 0b0110_0010
                }) // 9560:6949:c1b6:f38f:667e:a031:5180:b62
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0011, 0b1001_1011, 0b0110_1111, 0b1110_1011, 0b1001_0111, 0b1100_0010, 0b0111_1111, 0b0010_0000,
                    0b0111_1101, 0b0000_0100, 0b0010_0110, 0b1011_1011, 0b1110_0111, 0b1001_0001, 0b0001_1001, 0b0111_0001
                }), // c39b:6feb:97c2:7f20:7d04:26bb:e791:1971
                (byte)127
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_0011, 0b1001_1011, 0b0110_1111, 0b1110_1011, 0b1001_0111, 0b1100_0010, 0b0111_1111, 0b0010_0000,
                    0b0111_1101, 0b0000_0100, 0b0010_0110, 0b1011_1011, 0b1110_0111, 0b1001_0001, 0b0001_1001, 0b0111_0000
                }) // c39b:6feb:97c2:7f20:7d04:26bb:e791:1970
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001
                }), // ::1
                (byte)127
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 126 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1111, 0b1100_1001, 0b0111_0000, 0b0000_1001, 0b1011_1100, 0b0010_1101, 0b1001_0010, 0b1001_1100,
                    0b1110_1000, 0b1000_0010, 0b1110_0101, 0b0100_1100, 0b0101_0110, 0b1100_0011, 0b0000_0100, 0b0111_0111
                }), // 4fc9:7009:bc2d:929c:e882:e54c:56c3:477
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_1111, 0b1100_1001, 0b0111_0000, 0b0000_1001, 0b1011_1100, 0b0010_1101, 0b1001_0010, 0b1001_1100,
                    0b1110_1000, 0b1000_0010, 0b1110_0101, 0b0100_1100, 0b0101_0110, 0b1100_0011, 0b0000_0100, 0b0111_0100
                }) // 4fc9:7009:bc2d:929c:e882:e54c:56c3:474
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1101, 0b0001_1000, 0b0001_0111, 0b0101_1111, 0b1000_1110, 0b1001_0111, 0b1010_1000, 0b0101_0111,
                    0b0110_0110, 0b0101_0100, 0b1011_0101, 0b0100_1010, 0b1110_1100, 0b0011_0010, 0b0100_1111, 0b0000_1011
                }), // ed18:175f:8e97:a857:6654:b54a:ec32:4f0b
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_1101, 0b0001_1000, 0b0001_0111, 0b0101_1111, 0b1000_1110, 0b1001_0111, 0b1010_1000, 0b0101_0111,
                    0b0110_0110, 0b0101_0100, 0b1011_0101, 0b0100_1010, 0b1110_1100, 0b0011_0010, 0b0100_1111, 0b0000_1000
                }) // ed18:175f:8e97:a857:6654:b54a:ec32:4f08
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0010, 0b0110_0001, 0b1111_1101, 0b1111_0110, 0b0111_1010, 0b0010_1100, 0b1011_1101, 0b0011_1100,
                    0b1000_1110, 0b1001_0101, 0b1000_1111, 0b1110_0001, 0b0001_1101, 0b1010_0101, 0b1111_0100, 0b1000_0001
                }), // b261:fdf6:7a2c:bd3c:8e95:8fe1:1da5:f481
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1011_0010, 0b0110_0001, 0b1111_1101, 0b1111_0110, 0b0111_1010, 0b0010_1100, 0b1011_1101, 0b0011_1100,
                    0b1000_1110, 0b1001_0101, 0b1000_1111, 0b1110_0001, 0b0001_1101, 0b1010_0101, 0b1111_0100, 0b1000_0000
                }) // b261:fdf6:7a2c:bd3c:8e95:8fe1:1da5:f480
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_1011, 0b1101_1111, 0b1111_1110, 0b1111_0111, 0b1111_1101, 0b1111_0111, 0b1111_1111, 0b0111_0111,
                    0b1111_1111, 0b1111_0101, 0b1111_1111, 0b1111_1111, 0b0101_1101, 0b1111_1011, 0b1111_1111, 0b1111_1111
                }), // bbdf:fef7:fdf7:ff77:fff5:ffff:5dfb:ffff
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_0000, 0b1101_0010, 0b1010_1110, 0b1101_0101, 0b1111_1101, 0b1011_0001, 0b0110_1001, 0b0011_0110,
                    0b0110_1110, 0b1111_0101, 0b1101_0101, 0b1000_0111, 0b0101_1101, 0b1000_1001, 0b0111_0111, 0b1011_0000
                }) // 90d2:aed5:fdb1:6936:6ef5:d587:5d89:77b0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_0111, 0b1101_1111, 0b1111_1111, 0b0111_1011, 0b1110_1101, 0b0001_1111, 0b1011_1110, 0b1111_1011,
                    0b1111_1011, 0b0011_0110, 0b0101_1010, 0b1101_1101, 0b1111_1111, 0b1110_1111, 0b0000_1111, 0b0001_1100
                }), // a7df:ff7b:ed1f:befb:fb36:5add:ffef:f1c
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0101, 0b0100_1000, 0b0110_1111, 0b0000_0000, 0b0110_1100, 0b0001_1111, 0b0011_1000, 0b1000_1010,
                    0b0001_1011, 0b0010_0000, 0b0001_1000, 0b1101_1000, 0b1111_1000, 0b0110_1100, 0b0000_1010, 0b0001_1100
                }) // 548:6f00:6c1f:388a:1b20:18d8:f86c:a1c
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_0100, 0b1000_1001, 0b0110_1110, 0b0101_0100, 0b0101_1000, 0b1110_0110, 0b0001_0000, 0b0001_1100,
                    0b0110_0110, 0b1000_0011, 0b0110_1100, 0b1010_0010, 0b0001_0001, 0b0110_0111, 0b1110_1101, 0b1001_1110
                }), // a489:6e54:58e6:101c:6683:6ca2:1167:ed9e
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1010_0100, 0b1000_1001, 0b0110_1110, 0b0101_0100, 0b0101_1000, 0b1110_0110, 0b0001_0000, 0b0001_1100,
                    0b0110_0110, 0b1000_0011, 0b0110_1100, 0b1010_0010, 0b0001_0001, 0b0110_0111, 0b1110_1101, 0b1001_1100
                }) // a489:6e54:58e6:101c:6683:6ca2:1167:ed9c
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }), // ::3
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_0110, 0b1111_1111, 0b0011_0100, 0b0010_1000, 0b0001_0010, 0b1010_1110, 0b0011_0011, 0b1000_1101,
                    0b1101_1000, 0b0101_1000, 0b1001_0100, 0b0011_1010, 0b0101_1000, 0b1110_1011, 0b0000_1000, 0b1001_1010
                }), // 86ff:3428:12ae:338d:d858:943a:58eb:89a
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1100, 0b1010_1110, 0b0010_0100, 0b1101_1000, 0b0100_0000, 0b0101_0000, 0b1010_1101, 0b1110_0011,
                    0b0010_1000, 0b0101_1001, 0b1011_1010, 0b1101_0001, 0b1001_0010, 0b0010_0000, 0b0011_0110, 0b1110_1101
                }), // 4cae:24d8:4050:ade3:2859:bad1:9220:36ed
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 121 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_1110, 0b0010_0111, 0b0001_1010, 0b1000_1000, 0b1111_0011, 0b1010_0100, 0b0111_1110, 0b1110_1011,
                    0b0100_0000, 0b0001_0011, 0b0011_1011, 0b1100_0101, 0b0011_0101, 0b1001_1111, 0b1100_1100, 0b1111_1111
                }), // 1e27:1a88:f3a4:7eeb:4013:3bc5:359f:ccff
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_1110, 0b0010_0111, 0b0001_1010, 0b1000_1000, 0b1111_0011, 0b1010_0100, 0b0111_1110, 0b1110_1011,
                    0b0100_0000, 0b0001_0011, 0b0011_1011, 0b1100_0101, 0b0011_0101, 0b1001_1111, 0b1100_1100, 0b1000_0000
                }) // 1e27:1a88:f3a4:7eeb:4013:3bc5:359f:cc80
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0001, 0b0011_1011, 0b1110_1010, 0b1000_1100, 0b1110_1001, 0b1110_0001, 0b0011_0000, 0b1111_0011,
                    0b0011_0000, 0b0100_0011, 0b0101_1101, 0b1000_1110, 0b0111_1111, 0b1011_0101, 0b1101_0100, 0b0111_1111
                }), // b13b:ea8c:e9e1:30f3:3043:5d8e:7fb5:d47f
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1011_0001, 0b0011_1011, 0b1110_1010, 0b1000_1100, 0b1110_1001, 0b1110_0001, 0b0011_0000, 0b1111_0011,
                    0b0011_0000, 0b0100_0011, 0b0101_1101, 0b1000_1110, 0b0111_1111, 0b1011_0101, 0b1101_0100, 0b0000_0000
                }) // b13b:ea8c:e9e1:30f3:3043:5d8e:7fb5:d400
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1000, 0b1011_0100, 0b1111_1101, 0b0111_0001, 0b0011_1001, 0b1100_0001, 0b0101_0110, 0b1100_0000,
                    0b0100_1000, 0b1011_1110, 0b0110_1011, 0b0010_1100, 0b1001_1000, 0b1010_1101, 0b0100_0101, 0b0010_0101
                }), // d8b4:fd71:39c1:56c0:48be:6b2c:98ad:4525
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_1000, 0b1011_0100, 0b1111_1101, 0b0111_0001, 0b0011_1001, 0b1100_0001, 0b0101_0110, 0b1100_0000,
                    0b0100_1000, 0b1011_1110, 0b0110_1011, 0b0010_1100, 0b1001_1000, 0b1010_1101, 0b0100_0101, 0b0000_0000
                }) // d8b4:fd71:39c1:56c0:48be:6b2c:98ad:4500
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0001, 0b0101_1100, 0b1010_1000, 0b0101_1011, 0b1110_1100, 0b1101_0111, 0b0100_1000, 0b1010_1110,
                    0b1010_0011, 0b1011_0001, 0b0100_0111, 0b0101_1010, 0b0011_0001, 0b1011_1111, 0b1110_0101, 0b0101_0101
                }), // 415c:a85b:ecd7:48ae:a3b1:475a:31bf:e555
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_0001, 0b0101_1100, 0b1010_1000, 0b0101_1011, 0b1110_1100, 0b1101_0111, 0b0100_1000, 0b1010_1110,
                    0b1010_0011, 0b1011_0001, 0b0100_0111, 0b0101_1010, 0b0011_0001, 0b1011_1111, 0b1110_0101, 0b0000_0000
                }) // 415c:a85b:ecd7:48ae:a3b1:475a:31bf:e500
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1101, 0b0001_0010, 0b0011_0100, 0b1110_1000, 0b0011_0100, 0b1111_0101, 0b0111_1000, 0b0011_1101,
                    0b1010_0111, 0b0100_1110, 0b0000_0011, 0b0001_1000, 0b0101_1110, 0b1100_0010, 0b1011_1000, 0b1011_1101
                }), // ed12:34e8:34f5:783d:a74e:318:5ec2:b8bd
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_1101, 0b0001_0010, 0b0011_0100, 0b1110_1000, 0b0011_0100, 0b1111_0101, 0b0111_1000, 0b0011_1101,
                    0b1010_0111, 0b0100_1110, 0b0000_0011, 0b0001_1000, 0b0101_1110, 0b1100_0010, 0b1011_1000, 0b1000_0000
                }) // ed12:34e8:34f5:783d:a74e:318:5ec2:b880
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0011, 0b1001_0000, 0b0101_0110, 0b1010_1011, 0b0011_1000, 0b1010_0111, 0b0111_0101, 0b0110_0010,
                    0b1100_0000, 0b1110_0111, 0b0000_1011, 0b1111_1010, 0b1101_1101, 0b1011_0111, 0b1011_0110, 0b1111_1000
                }), // e390:56ab:38a7:7562:c0e7:bfa:ddb7:b6f8
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_0011, 0b1001_0000, 0b0101_0110, 0b1010_1011, 0b0011_1000, 0b1010_0111, 0b0111_0101, 0b0110_0010,
                    0b1100_0000, 0b1110_0111, 0b0000_1011, 0b1111_1010, 0b1101_1101, 0b1011_0111, 0b1011_0110, 0b1000_0000
                }) // e390:56ab:38a7:7562:c0e7:bfa:ddb7:b680
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }), // ::7f
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0011
                }), // ::43
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0010_0011
                }), // ::23
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 120 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1010, 0b0101_1000, 0b1001_0110, 0b0101_1000, 0b1011_0001, 0b0000_1000, 0b0100_1000, 0b0000_0000,
                    0b1000_1011, 0b0100_0111, 0b1011_1011, 0b0000_1011, 0b1111_1001, 0b0111_1000, 0b1011_0001, 0b1111_1111
                }), // ca58:9658:b108:4800:8b47:bb0b:f978:b1ff
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_1010, 0b0101_1000, 0b1001_0110, 0b0101_1000, 0b1011_0001, 0b0000_1000, 0b0100_1000, 0b0000_0000,
                    0b1000_1011, 0b0100_0111, 0b1011_1011, 0b0000_1011, 0b1111_1001, 0b0111_1000, 0b1011_0001, 0b0000_0000
                }) // ca58:9658:b108:4800:8b47:bb0b:f978:b100
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0110, 0b1100_1000, 0b0011_1010, 0b0000_0111, 0b1110_0010, 0b1110_0110, 0b0011_1110, 0b0111_1001,
                    0b1101_0101, 0b1011_0001, 0b0100_1001, 0b1100_0010, 0b0101_1100, 0b1100_1101, 0b0110_1010, 0b1111_1111
                }), // 26c8:3a07:e2e6:3e79:d5b1:49c2:5ccd:6aff
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0010_0110, 0b1100_1000, 0b0011_1010, 0b0000_0111, 0b1110_0010, 0b1110_0110, 0b0011_1110, 0b0111_1001,
                    0b1101_0101, 0b1011_0001, 0b0100_1001, 0b1100_0010, 0b0101_1100, 0b1100_1101, 0b0110_1010, 0b0000_0000
                }) // 26c8:3a07:e2e6:3e79:d5b1:49c2:5ccd:6a00
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_1110, 0b0111_0001, 0b1001_1110, 0b1101_0111, 0b0100_1010, 0b1001_1011, 0b0111_0011, 0b1100_1100,
                    0b1011_1010, 0b0011_0010, 0b0010_0111, 0b1000_1010, 0b1111_1010, 0b1110_1110, 0b0110_0100, 0b0111_0000
                }), // 1e71:9ed7:4a9b:73cc:ba32:278a:faee:6470
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_1110, 0b0111_0001, 0b1001_1110, 0b1101_0111, 0b0100_1010, 0b1001_1011, 0b0111_0011, 0b1100_1100,
                    0b1011_1010, 0b0011_0010, 0b0010_0111, 0b1000_1010, 0b1111_1010, 0b1110_1110, 0b0110_0100, 0b0000_0000
                }) // 1e71:9ed7:4a9b:73cc:ba32:278a:faee:6400
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1000_1110, 0b0010_1011, 0b1100_0101, 0b1100_0110, 0b0010_0010, 0b0010_1110, 0b1101_1011,
                    0b1110_1010, 0b1001_0110, 0b0001_0001, 0b0000_1011, 0b1110_1110, 0b1001_0001, 0b0011_1000, 0b1000_1011
                }), // 3f8e:2bc5:c622:2edb:ea96:110b:ee91:388b
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1000_1110, 0b0010_1011, 0b1100_0101, 0b1100_0110, 0b0010_0010, 0b0010_1110, 0b1101_1011,
                    0b1110_1010, 0b1001_0110, 0b0001_0001, 0b0000_1011, 0b1110_1110, 0b1001_0001, 0b0011_1000, 0b0000_0000
                }) // 3f8e:2bc5:c622:2edb:ea96:110b:ee91:3800
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1100, 0b0000_0100, 0b1111_1101, 0b0111_1100, 0b0111_1101, 0b1011_0010, 0b0010_1001, 0b0000_0010,
                    0b0100_1101, 0b0011_1111, 0b0101_0000, 0b1000_1110, 0b1010_0011, 0b1110_1010, 0b0001_0111, 0b0110_0110
                }), // 5c04:fd7c:7db2:2902:4d3f:508e:a3ea:1766
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0101_1100, 0b0000_0100, 0b1111_1101, 0b0111_1100, 0b0111_1101, 0b1011_0010, 0b0010_1001, 0b0000_0010,
                    0b0100_1101, 0b0011_1111, 0b0101_0000, 0b1000_1110, 0b1010_0011, 0b1110_1010, 0b0001_0111, 0b0000_0000
                }) // 5c04:fd7c:7db2:2902:4d3f:508e:a3ea:1700
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_0000, 0b1000_1110, 0b0100_0100, 0b1010_0010, 0b1110_1101, 0b0101_1000, 0b0001_0010, 0b0101_0001,
                    0b1000_1001, 0b0001_1001, 0b0010_1010, 0b1000_0101, 0b1001_0001, 0b1000_1001, 0b1011_1001, 0b1010_0010
                }), // a08e:44a2:ed58:1251:8919:2a85:9189:b9a2
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1010_0000, 0b1000_1110, 0b0100_0100, 0b1010_0010, 0b1110_1101, 0b0101_1000, 0b0001_0010, 0b0101_0001,
                    0b1000_1001, 0b0001_1001, 0b0010_1010, 0b1000_0101, 0b1001_0001, 0b1000_1001, 0b1011_1001, 0b0000_0000
                }) // a08e:44a2:ed58:1251:8919:2a85:9189:b900
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }), // ::ff
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1011_0011
                }), // ::b3
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0101_1110
                }), // ::5e
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 119 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1000_0000, 0b0110_0111, 0b0110_1100, 0b1000_1110, 0b0100_0100, 0b1000_0000, 0b0010_1101,
                    0b1010_0110, 0b1001_0000, 0b1010_1010, 0b1110_1111, 0b1100_1000, 0b0010_1100, 0b1011_1111, 0b1111_1111
                }), // ff80:676c:8e44:802d:a690:aaef:c82c:bfff
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1000_0000, 0b0110_0111, 0b0110_1100, 0b1000_1110, 0b0100_0100, 0b1000_0000, 0b0010_1101,
                    0b1010_0110, 0b1001_0000, 0b1010_1010, 0b1110_1111, 0b1100_1000, 0b0010_1100, 0b1011_1110, 0b0000_0000
                }) // ff80:676c:8e44:802d:a690:aaef:c82c:be00
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_0001, 0b0001_0010, 0b0110_0100, 0b0000_1111, 0b0010_1010, 0b0100_0001, 0b1110_1010, 0b0110_1010,
                    0b0111_0000, 0b0010_0001, 0b0111_0111, 0b1011_0110, 0b0010_0111, 0b0111_1111, 0b1010_1101, 0b1111_1111
                }), // d112:640f:2a41:ea6a:7021:77b6:277f:adff
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_0001, 0b0001_0010, 0b0110_0100, 0b0000_1111, 0b0010_1010, 0b0100_0001, 0b1110_1010, 0b0110_1010,
                    0b0111_0000, 0b0010_0001, 0b0111_0111, 0b1011_0110, 0b0010_0111, 0b0111_1111, 0b1010_1100, 0b0000_0000
                }) // d112:640f:2a41:ea6a:7021:77b6:277f:ac00
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_1011, 0b0110_1001, 0b1110_0111, 0b1001_0011, 0b1100_0011, 0b1101_0101, 0b0111_1110, 0b0001_1110,
                    0b0010_0011, 0b0101_0111, 0b0111_1100, 0b0101_0111, 0b1110_0001, 0b1100_1010, 0b0001_0000, 0b1010_1100
                }), // b69:e793:c3d5:7e1e:2357:7c57:e1ca:10ac
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_1011, 0b0110_1001, 0b1110_0111, 0b1001_0011, 0b1100_0011, 0b1101_0101, 0b0111_1110, 0b0001_1110,
                    0b0010_0011, 0b0101_0111, 0b0111_1100, 0b0101_0111, 0b1110_0001, 0b1100_1010, 0b0001_0000, 0b0000_0000
                }) // b69:e793:c3d5:7e1e:2357:7c57:e1ca:1000
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0001, 0b0011_0111, 0b0011_1101, 0b0100_0010, 0b0011_1011, 0b0110_0000, 0b0001_1011, 0b1100_0000,
                    0b1011_0101, 0b0110_1100, 0b1000_0100, 0b1100_1101, 0b1111_1010, 0b1001_1111, 0b0011_1101, 0b0110_0011
                }), // 4137:3d42:3b60:1bc0:b56c:84cd:fa9f:3d63
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_0001, 0b0011_0111, 0b0011_1101, 0b0100_0010, 0b0011_1011, 0b0110_0000, 0b0001_1011, 0b1100_0000,
                    0b1011_0101, 0b0110_1100, 0b1000_0100, 0b1100_1101, 0b1111_1010, 0b1001_1111, 0b0011_1100, 0b0000_0000
                }) // 4137:3d42:3b60:1bc0:b56c:84cd:fa9f:3c00
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0100, 0b1110_0111, 0b0011_1100, 0b1101_1110, 0b0011_0111, 0b0000_1101, 0b1010_0010, 0b0101_0001,
                    0b0110_0110, 0b1101_0010, 0b1000_1000, 0b0111_0010, 0b0011_1110, 0b1001_1111, 0b1011_0110, 0b0100_1100
                }), // 14e7:3cde:370d:a251:66d2:8872:3e9f:b64c
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_0100, 0b1110_0111, 0b0011_1100, 0b1101_1110, 0b0011_0111, 0b0000_1101, 0b1010_0010, 0b0101_0001,
                    0b0110_0110, 0b1101_0010, 0b1000_1000, 0b0111_0010, 0b0011_1110, 0b1001_1111, 0b1011_0110, 0b0000_0000
                }) // 14e7:3cde:370d:a251:66d2:8872:3e9f:b600
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_0101, 0b0111_0111, 0b1110_1110, 0b0001_0011, 0b1010_0010, 0b1000_1110, 0b0010_0101, 0b0111_1000,
                    0b0101_1111, 0b1010_0001, 0b0000_0001, 0b0111_1101, 0b0000_0101, 0b1101_1010, 0b1111_1011, 0b0101_0000
                }), // 9577:ee13:a28e:2578:5fa1:17d:5da:fb50
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_0101, 0b0111_0111, 0b1110_1110, 0b0001_0011, 0b1010_0010, 0b1000_1110, 0b0010_0101, 0b0111_1000,
                    0b0101_1111, 0b1010_0001, 0b0000_0001, 0b0111_1101, 0b0000_0101, 0b1101_1010, 0b1111_1010, 0b0000_0000
                }) // 9577:ee13:a28e:2578:5fa1:17d:5da:fa00
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }), // ::1ff
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1000
                }), // ::1f8
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1110_1101
                }), // ::ed
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 33 (Net mask: ffff:ffff:8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ffff:ffff:8000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1111, 0b1110_1111, 0b0001_1110, 0b1001_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 5fef:1e93:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0101_1111, 0b1110_1111, 0b0001_1110, 0b1001_0011, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 5fef:1e93:8000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_1101, 0b0010_1110, 0b1001_0011, 0b0011_1001, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // d2e:9339:7fff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_1101, 0b0010_1110, 0b1001_0011, 0b0011_1001, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // d2e:9339::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0110, 0b1100_0111, 0b0100_1111, 0b1110_0110, 0b0010_1111, 0b1001_0001, 0b0011_0111, 0b1110_0011,
                    0b0010_0110, 0b1001_0001, 0b1111_1001, 0b1100_0110, 0b1001_0100, 0b1010_1100, 0b1100_1101, 0b0010_1000
                }), // e6c7:4fe6:2f91:37e3:2691:f9c6:94ac:cd28
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_0110, 0b1100_0111, 0b0100_1111, 0b1110_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // e6c7:4fe6::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1110, 0b1010_1101, 0b0010_0000, 0b0110_0010, 0b0100_0111, 0b0110_0100, 0b0001_0110, 0b1000_1100,
                    0b1111_1100, 0b0011_1111, 0b1010_0101, 0b0110_1000, 0b1111_0101, 0b1010_0101, 0b1100_0111, 0b1000_1110
                }), // cead:2062:4764:168c:fc3f:a568:f5a5:c78e
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_1110, 0b1010_1101, 0b0010_0000, 0b0110_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // cead:2062::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0011, 0b1000_1100, 0b1001_1101, 0b1100_1101, 0b1000_1110, 0b1001_0100, 0b0000_0010, 0b0101_1111,
                    0b1001_0101, 0b1000_1000, 0b0011_0100, 0b0010_0010, 0b0101_0111, 0b1111_1110, 0b1111_1000, 0b0101_1100
                }), // 38c:9dcd:8e94:25f:9588:3422:57fe:f85c
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0011, 0b1000_1100, 0b1001_1101, 0b1100_1101, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 38c:9dcd:8000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_1111, 0b0010_0000, 0b1101_1110, 0b0101_0011, 0b1101_1000, 0b1001_0100, 0b0110_0000, 0b1001_1011,
                    0b1010_0110, 0b1111_1010, 0b1001_0111, 0b1101_1111, 0b1100_0000, 0b1001_0110, 0b0000_1011, 0b1010_0000
                }), // 9f20:de53:d894:609b:a6fa:97df:c096:ba0
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_1111, 0b0010_0000, 0b1101_1110, 0b0101_0011, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 9f20:de53:8000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ::7fff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0101_1000, 0b1111_1001, 0b1100_1000, 0b1011_0011,
                    0b0101_0010, 0b1111_1110, 0b1101_1111, 0b0101_1101, 0b0010_0111, 0b1010_1100, 0b1110_0000, 0b1010_1100
                }), // ::58f9:c8b3:52fe:df5d:27ac:e0ac
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0010_0010, 0b1000_1010, 0b1100_0101, 0b1011_0000,
                    0b0011_1010, 0b0011_1100, 0b0101_0110, 0b0100_0111, 0b0101_1111, 0b1111_1011, 0b1110_1110, 0b0000_0110
                }), // ::228a:c5b0:3a3c:5647:5ffb:ee06
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 32 (Net mask: ffff:ffff::)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ffff:ffff::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_0110, 0b0011_0001, 0b0100_1000, 0b1100_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 7631:48cf:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_0110, 0b0011_0001, 0b0100_1000, 0b1100_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 7631:48cf::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1101, 0b0100_0101, 0b1001_0001, 0b0001_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ed45:9116:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_1101, 0b0100_0101, 0b1001_0001, 0b0001_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ed45:9116::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1001, 0b0011_0111, 0b1100_0100, 0b1111_1010, 0b0111_1110, 0b0111_1100, 0b1100_1101, 0b0001_0111,
                    0b0010_1011, 0b1011_1001, 0b1010_1111, 0b0110_0111, 0b0000_1100, 0b0111_0110, 0b0111_1011, 0b1011_1110
                }), // 6937:c4fa:7e7c:cd17:2bb9:af67:c76:7bbe
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0110_1001, 0b0011_0111, 0b1100_0100, 0b1111_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 6937:c4fa::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1101, 0b0011_1001, 0b1111_0110, 0b1100_1000, 0b1001_1011, 0b0011_1000, 0b0100_1110, 0b0101_1001,
                    0b0001_0001, 0b0010_1100, 0b1110_1110, 0b0000_0100, 0b0011_1001, 0b1000_0000, 0b1011_1000, 0b1111_1010
                }), // 2d39:f6c8:9b38:4e59:112c:ee04:3980:b8fa
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0010_1101, 0b0011_1001, 0b1111_0110, 0b1100_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 2d39:f6c8::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1010, 0b1000_1101, 0b0010_1110, 0b0110_0011, 0b0010_1100, 0b1101_1011, 0b1001_0011, 0b0111_1100,
                    0b0000_1100, 0b0101_0000, 0b0111_0011, 0b1010_0100, 0b0010_1100, 0b1100_1001, 0b1110_0101, 0b0001_0111
                }), // 2a8d:2e63:2cdb:937c:c50:73a4:2cc9:e517
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0010_1010, 0b1000_1101, 0b0010_1110, 0b0110_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 2a8d:2e63::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1101, 0b0001_0101, 0b1011_1000, 0b1110_0001, 0b1011_1011, 0b0000_0010, 0b0010_1101, 0b1010_1110,
                    0b1110_0100, 0b0101_1010, 0b0111_1001, 0b1111_1111, 0b1110_1000, 0b0101_1101, 0b0100_0110, 0b0011_1000
                }), // dd15:b8e1:bb02:2dae:e45a:79ff:e85d:4638
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_1101, 0b0001_0101, 0b1011_1000, 0b1110_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // dd15:b8e1::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ::ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_1000, 0b1011_0001, 0b1000_0110, 0b0100_1110,
                    0b1101_0110, 0b1011_0000, 0b1010_1111, 0b1100_0000, 0b0110_1111, 0b1010_1011, 0b1000_0001, 0b1000_1001
                }), // ::88b1:864e:d6b0:afc0:6fab:8189
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0001_0110, 0b1110_0000, 0b1101_1110, 0b1100_1110,
                    0b0111_0011, 0b0000_0111, 0b0011_0001, 0b1101_1000, 0b1001_1010, 0b0100_0011, 0b0111_1010, 0b1000_0010
                }), // ::16e0:dece:7307:31d8:9a43:7a82
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 31 (Net mask: 255.255.255.254; ffff:fffe::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }) // 255.255.255.254
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_1000, 0b0011_1010, 0b1100_0111, 0b1111_1011 }), // 104.58.199.251
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[] { 0b0110_1000, 0b0011_1010, 0b1100_0111, 0b1111_1010 }) // 104.58.199.250
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0110, 0b1100_1101, 0b1010_1100, 0b0010_1101 }), // 246.205.172.45
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0110, 0b1100_1101, 0b1010_1100, 0b0010_1100 }) // 246.205.172.44
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }), // 0.0.0.1
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ffff:fffe::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0010, 0b1001_1111, 0b1010_0100, 0b1000_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // e29f:a48f:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_0010, 0b1001_1111, 0b1010_0100, 0b1000_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // e29f:a48e::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0010, 0b0100_0001, 0b0011_0101, 0b0110_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // c241:3561:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_0010, 0b0100_0001, 0b0011_0101, 0b0110_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // c241:3560::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1001, 0b0101_1001, 0b1100_1011, 0b1010_1100, 0b1100_1010, 0b0100_0011, 0b0101_1111, 0b0101_1110,
                    0b0100_1111, 0b1111_1010, 0b0110_1011, 0b1100_0010, 0b1001_0110, 0b0110_0001, 0b0011_1011, 0b0001_1011
                }), // e959:cbac:ca43:5f5e:4ffa:6bc2:9661:3b1b
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_1001, 0b0101_1001, 0b1100_1011, 0b1010_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // e959:cbac::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0000, 0b0010_0101, 0b1100_1100, 0b1111_0101, 0b1000_0011, 0b1100_1010, 0b0111_1101, 0b1001_0101,
                    0b1101_0110, 0b0011_1101, 0b1101_1001, 0b0001_0111, 0b0000_1011, 0b1100_1010, 0b0011_1001, 0b1011_1001
                }), // 6025:ccf5:83ca:7d95:d63d:d917:bca:39b9
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0110_0000, 0b0010_0101, 0b1100_1100, 0b1111_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 6025:ccf4::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0101, 0b0011_1011, 0b1010_1111, 0b0100_0110, 0b1001_0111, 0b0100_1000, 0b0001_1110, 0b0011_0011,
                    0b0101_0111, 0b0000_1001, 0b0111_1100, 0b0001_0000, 0b1101_1000, 0b0100_1111, 0b0101_0000, 0b1001_0100
                }), // 453b:af46:9748:1e33:5709:7c10:d84f:5094
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_0101, 0b0011_1011, 0b1010_1111, 0b0100_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 453b:af46::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0100, 0b1100_1111, 0b0010_0111, 0b0100_0111, 0b0001_0111, 0b1111_0101, 0b1100_1110, 0b0010_0011,
                    0b0011_0111, 0b0001_0110, 0b1000_0010, 0b0010_0011, 0b1011_0101, 0b1111_1010, 0b1010_0000, 0b0100_0101
                }), // c4cf:2747:17f5:ce23:3716:8223:b5fa:a045
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_0100, 0b1100_1111, 0b0010_0111, 0b0100_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // c4cf:2746::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1000_0101, 0b1110_1111, 0b1111_1100, 0b1101_1100,
                    0b0111_0111, 0b0010_1000, 0b0010_1111, 0b0110_1101, 0b1101_0001, 0b0000_1100, 0b0111_1101, 0b1100_0010
                }), // 0:1:85ef:fcdc:7728:2f6d:d10c:7dc2
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0001_0011, 0b0110_1000, 0b1001_0110, 0b1100_1001,
                    0b1110_0100, 0b0011_0011, 0b1010_1110, 0b0001_0000, 0b1011_0111, 0b1010_0110, 0b1001_1011, 0b0010_0001
                }), // ::1368:96c9:e433:ae10:b7a6:9b21
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 30 (Net mask: 255.255.255.252)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100 }) // 255.255.255.252
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0110, 0b0001_0010, 0b1001_1110, 0b1011_0111 }), // 134.18.158.183
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0110, 0b0001_0010, 0b1001_1110, 0b1011_0100 }) // 134.18.158.180
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1101, 0b0111_0001, 0b1110_1011, 0b1100_0011 }), // 157.113.235.195
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b1001_1101, 0b0111_0001, 0b1110_1011, 0b1100_0000 }) // 157.113.235.192
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_0001, 0b1000_1001, 0b0110_0111, 0b0101_0101 }), // 209.137.103.85
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b1101_0001, 0b1000_1001, 0b0110_0111, 0b0101_0100 }) // 209.137.103.84
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_1100, 0b0010_1101, 0b1111_0000, 0b1010_1001 }), // 76.45.240.169
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_1100, 0b0010_1101, 0b1111_0000, 0b1010_1000 }) // 76.45.240.168
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011 }), // 0.0.0.3
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }), // 0.0.0.1
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            #endregion

            #region prefixLength = 25 (Net mask: 255.255.255.128)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000 }) // 255.255.255.128
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0001, 0b0111_0101, 0b1111_0001, 0b1111_1111 }), // 65.117.241.255
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0001, 0b0111_0101, 0b1111_0001, 0b1000_0000 }) // 65.117.241.128
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0110, 0b1101_1110, 0b1001_0010, 0b0111_1111 }), // 182.222.146.127
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_0110, 0b1101_1110, 0b1001_0010, 0b0000_0000 }) // 182.222.146.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1110, 0b1100_1100, 0b0101_1110, 0b0001_0101 }), // 190.204.94.21
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1110, 0b1100_1100, 0b0101_1110, 0b0000_0000 }) // 190.204.94.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_1011, 0b0111_0111, 0b0101_1100, 0b0100_1101 }), // 171.119.92.77
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1010_1011, 0b0111_0111, 0b0101_1100, 0b0000_0000 }) // 171.119.92.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1001_0110, 0b1100_0110, 0b1010_0011 }), // 255.150.198.163
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1001_0110, 0b1100_0110, 0b1000_0000 }) // 255.150.198.128
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0111, 0b1000_0010, 0b0001_0010, 0b1110_1101 }), // 135.130.18.237
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0111, 0b1000_0010, 0b0001_0010, 0b1000_0000 }) // 135.130.18.128
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }), // 0.0.0.127
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0110_1011 }), // 0.0.0.107
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0011_0111 }), // 0.0.0.55
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            #endregion

            #region prefixLength = 24 (Net mask: 255.255.255.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000 }) // 255.255.255.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0010, 0b1001_1111, 0b0010_1001, 0b1111_1111 }), // 178.159.41.255
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_0010, 0b1001_1111, 0b0010_1001, 0b0000_0000 }) // 178.159.41.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1001, 0b0010_1001, 0b1100_0110, 0b1111_1111 }), // 57.41.198.255
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1001, 0b0010_1001, 0b1100_0110, 0b0000_0000 }) // 57.41.198.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_1010, 0b1000_1011, 0b0101_0100, 0b0010_1010 }), // 74.139.84.42
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_1010, 0b1000_1011, 0b0101_0100, 0b0000_0000 }) // 74.139.84.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0010, 0b1011_1000, 0b1010_0010, 0b1010_0101 }), // 130.184.162.165
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0010, 0b1011_1000, 0b1010_0010, 0b0000_0000 }) // 130.184.162.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_1111, 0b1011_1011, 0b1111_0111, 0b0011_1101 }), // 175.187.247.61
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b1010_1111, 0b1011_1011, 0b1111_0111, 0b0000_0000 }) // 175.187.247.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1011, 0b1110_0101, 0b1011_1111, 0b1000_0001 }), // 123.229.191.129
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_1011, 0b1110_0101, 0b1011_1111, 0b0000_0000 }) // 123.229.191.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }), // 0.0.0.255
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1100_0110 }), // 0.0.0.198
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_1010 }), // 0.0.0.10
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            #endregion

            #region prefixLength = 23 (Net mask: 255.255.254.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000 }) // 255.255.254.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1111, 0b1001_1100, 0b1100_0111, 0b1111_1111 }), // 63.156.199.255
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1111, 0b1001_1100, 0b1100_0110, 0b0000_0000 }) // 63.156.198.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1011, 0b0110_1001, 0b1110_0001, 0b1111_1111 }), // 59.105.225.255
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1011, 0b0110_1001, 0b1110_0000, 0b0000_0000 }) // 59.105.224.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1011, 0b1000_0010, 0b0110_1100, 0b0111_0010 }), // 123.130.108.114
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_1011, 0b1000_0010, 0b0110_1100, 0b0000_0000 }) // 123.130.108.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1101, 0b0000_1001, 0b1000_1101, 0b0001_1101 }), // 237.9.141.29
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_1101, 0b0000_1001, 0b1000_1100, 0b0000_0000 }) // 237.9.140.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_0001, 0b0100_0000, 0b1001_0110, 0b0100_1001 }), // 81.64.150.73
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_0001, 0b0100_0000, 0b1001_0110, 0b0000_0000 }) // 81.64.150.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_0100, 0b0001_1010, 0b1110_0111, 0b1100_1111 }), // 84.26.231.207
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_0100, 0b0001_1010, 0b1110_0110, 0b0000_0000 }) // 84.26.230.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }), // 0.0.1.255
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1001_1101 }), // 0.0.1.157
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1101 }), // 0.0.0.125
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            #endregion

            #region prefixLength = 9 (Net mask: 255.128.0.0; ff80::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 }) // 255.128.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_0010, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 226.255.255.255
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_0010, 0b1000_0000, 0b0000_0000, 0b0000_0000 }) // 226.128.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0011, 0b0111_1111, 0b1111_1111, 0b1111_1111 }), // 179.127.255.255
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 179.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0011, 0b0011_0010, 0b0000_0011, 0b1100_1101 }), // 67.50.3.205
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 67.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_1011, 0b0111_1000, 0b0111_1100, 0b1010_1100 }), // 107.120.124.172
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0110_1011, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 107.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b1000_0110, 0b1111_1111, 0b0101_0100 }), // 191.134.255.84
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 }) // 191.128.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1011, 0b1100_0000, 0b0100_0010, 0b1000_0111 }), // 235.192.66.135
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_1011, 0b1000_0000, 0b0000_0000, 0b0000_0000 }) // 235.128.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }), // 0.127.255.255
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0101_0010, 0b0101_1110, 0b1000_1011 }), // 0.82.94.139
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0010_0101, 0b1111_1111, 0b1011_0000 }), // 0.37.255.176
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ff80::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 6cff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0110_1100, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 6c80::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1101, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // cd7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_1101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // cd00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1011, 0b0010_0000, 0b0110_0110, 0b0111_1100, 0b1101_1011, 0b0101_1101, 0b1010_1100, 0b1011_0101,
                    0b0001_1101, 0b0101_0110, 0b0011_1100, 0b0101_0000, 0b1100_1100, 0b0011_0110, 0b0010_1100, 0b1010_1111
                }), // 7b20:667c:db5d:acb5:1d56:3c50:cc36:2caf
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_1011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 7b00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0101, 0b0110_1101, 0b1001_0100, 0b0000_0010, 0b1010_0010, 0b1010_1010, 0b0011_0100, 0b1100_1111,
                    0b0000_1110, 0b1001_1011, 0b1110_0000, 0b1100_1100, 0b1011_1101, 0b1000_1011, 0b0001_1101, 0b1010_1111
                }), // 156d:9402:a2aa:34cf:e9b:e0cc:bd8b:1daf
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_0101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 1500::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1000, 0b1001_0111, 0b1101_1000, 0b0110_1110, 0b0000_1000, 0b0101_0000, 0b1011_1100, 0b0101_1010,
                    0b1000_0011, 0b0101_1111, 0b1000_0101, 0b0100_0101, 0b1011_1000, 0b0101_0110, 0b0111_1010, 0b0011_0101
                }), // 2897:d86e:850:bc5a:835f:8545:b856:7a35
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0010_1000, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 2880::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0110, 0b1100_0011, 0b0010_1001, 0b1011_1110, 0b1000_1100, 0b1011_1000, 0b0001_1100, 0b0100_0110,
                    0b0011_1001, 0b0000_1110, 0b0100_0000, 0b0010_1100, 0b1010_0111, 0b1010_0001, 0b0100_1111, 0b1100_1110
                }), // 26c3:29be:8cb8:1c46:390e:402c:a7a1:4fce
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0010_0110, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 2680::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0100_1001, 0b0111_0111, 0b1010_1111, 0b1000_0100, 0b0001_1001, 0b1111_0110, 0b0000_1100,
                    0b0111_0101, 0b0101_0010, 0b0011_0111, 0b1101_0111, 0b1100_0100, 0b1101_1011, 0b0110_1011, 0b0001_0000
                }), // 49:77af:8419:f60c:7552:37d7:c4db:6b10
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0011_0101, 0b0010_0111, 0b0011_1110, 0b0001_1101, 0b0000_0101, 0b0100_1001, 0b0011_0100,
                    0b1100_1101, 0b1101_0010, 0b1000_1011, 0b1101_1010, 0b1100_1010, 0b0111_1010, 0b0110_1011, 0b1100_1100
                }), // 35:273e:1d05:4934:cdd2:8bda:ca7a:6bcc
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 8 (Net mask: 255.0.0.0; ff00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 255.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 29.255.255.255
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0001_1101, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 29.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1010, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 234.255.255.255
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 234.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1000, 0b0000_1111, 0b1011_0100, 0b1110_0000 }), // 200.15.180.224
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1100_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 200.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_1000, 0b1101_1000, 0b1100_1010, 0b1001_1000 }), // 216.216.202.152
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1101_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 216.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_0001, 0b0100_0011, 0b1101_1101, 0b1100_0001 }), // 225.67.221.193
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 225.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_0011, 0b1010_0110, 0b1010_0010, 0b0110_1011 }), // 19.166.162.107
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0001_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 19.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 0.255.255.255
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b1010_1101, 0b0010_0101, 0b1001_1001 }), // 0.173.37.153
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0001_0100, 0b0111_1101, 0b0111_1100 }), // 0.20.125.124
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ff00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // d5ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_0101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // d500::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_1010, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 9aff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 9a00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0100, 0b0001_1010, 0b1100_0110, 0b1110_0000, 0b1000_0110, 0b0011_0101, 0b0001_0010, 0b1000_1001,
                    0b1001_0100, 0b1011_0110, 0b1000_0010, 0b1111_1111, 0b0100_1100, 0b0011_1000, 0b1100_0000, 0b1011_0000
                }), // e41a:c6e0:8635:1289:94b6:82ff:4c38:c0b0
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // e400::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_0100, 0b1011_0011, 0b1000_0011, 0b0110_1100, 0b0010_0000, 0b1010_1101, 0b1000_1000, 0b1000_1111,
                    0b0001_0001, 0b1011_0110, 0b0011_0000, 0b1100_1001, 0b1011_0000, 0b0101_1000, 0b1001_1100, 0b0011_1110
                }), // f4b3:836c:20ad:888f:11b6:30c9:b058:9c3e
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // f400::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0101, 0b0001_0100, 0b0100_1001, 0b1010_0011, 0b1001_1011, 0b0010_1111, 0b0001_0011, 0b1100_0111,
                    0b0101_0100, 0b1101_0111, 0b1111_0000, 0b1011_1110, 0b0101_1010, 0b0000_1100, 0b1100_0011, 0b1001_1100
                }), // 6514:49a3:9b2f:13c7:54d7:f0be:5a0c:c39c
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0110_0101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 6500::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1111, 0b1010_0010, 0b1111_0100, 0b0010_1001, 0b1110_1100, 0b1001_1000, 0b0001_1111, 0b1011_0111,
                    0b1010_0000, 0b0000_0100, 0b0110_0100, 0b0001_1010, 0b0001_1010, 0b0011_0001, 0b0011_0111, 0b1011_1100
                }), // 5fa2:f429:ec98:1fb7:a004:641a:1a31:37bc
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0101_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 5f00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_0100, 0b1001_1000, 0b0001_0100, 0b0110_1101, 0b0101_1001, 0b0100_1000, 0b0101_1011,
                    0b1010_0110, 0b1111_1010, 0b1101_1100, 0b1000_1111, 0b0011_0100, 0b1001_0111, 0b1111_1110, 0b0000_1011
                }), // f4:9814:6d59:485b:a6fa:dc8f:3497:fe0b
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0110_1111, 0b1000_0011, 0b0111_0010, 0b0011_0101, 0b1010_1101, 0b1101_0110, 0b1100_1110,
                    0b0011_1100, 0b1011_1001, 0b1000_0000, 0b1110_0111, 0b0010_0000, 0b0000_0101, 0b0111_1101, 0b1001_1000
                }), // 6f:8372:35ad:d6ce:3cb9:80e7:2005:7d98
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 7 (Net mask: 254.0.0.0; fe00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 254.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 83.255.255.255
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 82.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 69.255.255.255
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 68.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1000, 0b1000_1101, 0b0110_0001, 0b0001_1110 }), // 200.141.97.30
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1100_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 200.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1001, 0b0110_0110, 0b1100_0011, 0b1101_0110 }), // 153.102.195.214
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1001_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 152.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1110, 0b0101_0010, 0b0001_1000, 0b1010_0100 }), // 190.82.24.164
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 190.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1011, 0b0100_1011, 0b0100_0000, 0b1000_1000 }), // 155.75.64.136
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1001_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 154.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 1.255.255.255
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0001, 0b0000_0101, 0b1101_1101, 0b1001_1001 }), // 1.5.221.153
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0101_0001, 0b1111_1111, 0b0100_0001 }), // 0.81.255.65
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // fe00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_1011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // bff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // a00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ddff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // dc00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1000, 0b0100_1101, 0b0110_0110, 0b1101_0011, 0b0010_1101, 0b1001_1110, 0b0111_0111, 0b1011_0000,
                    0b1111_1000, 0b1111_0010, 0b0001_1110, 0b0001_1001, 0b1001_0011, 0b1110_1001, 0b1001_1010, 0b0000_0110
                }), // 284d:66d3:2d9e:77b0:f8f2:1e19:93e9:9a06
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0010_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 2800::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0001, 0b0010_0101, 0b0110_1000, 0b1010_1010, 0b1000_1011, 0b1010_0101, 0b1100_0000, 0b0010_0101,
                    0b1011_1101, 0b0111_0011, 0b0010_1000, 0b1110_0010, 0b1011_1101, 0b0010_0100, 0b0110_1101, 0b1111_1110
                }), // 1125:68aa:8ba5:c025:bd73:28e2:bd24:6dfe
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 1000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1010, 0b1101_1110, 0b0100_1000, 0b0110_0010, 0b1100_0001, 0b0001_0100, 0b0101_0000, 0b0001_1000,
                    0b1000_0011, 0b0101_1001, 0b1100_0111, 0b1110_1110, 0b1101_0010, 0b1001_0010, 0b1110_0101, 0b0011_1101
                }), // 7ade:4862:c114:5018:8359:c7ee:d292:e53d
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 7a00::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_0011, 0b0110_0101, 0b1101_1000, 0b1001_0100, 0b1110_1110, 0b1000_1010, 0b1011_1111, 0b0010_1000,
                    0b1011_1010, 0b0110_0010, 0b1010_0010, 0b1000_0101, 0b1001_1011, 0b1110_0100, 0b1100_0111, 0b0100_0110
                }), // d365:d894:ee8a:bf28:ba62:a285:9be4:c746
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // d200::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b0010_0101, 0b1001_1101, 0b0001_0011, 0b1101_0010, 0b0101_1001, 0b0001_0110, 0b0111_0101,
                    0b1011_1011, 0b0101_1111, 0b1010_1100, 0b0001_1010, 0b1011_1010, 0b1100_0100, 0b1110_0100, 0b0111_0000
                }), // 125:9d13:d259:1675:bb5f:ac1a:bac4:e470
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0001_0001, 0b1011_1111, 0b0101_0000, 0b0110_1111, 0b1110_0011, 0b1110_0011, 0b1110_1110,
                    0b0101_0010, 0b0001_1001, 0b1111_0110, 0b1011_1110, 0b0110_0010, 0b1100_0111, 0b0111_0100, 0b0101_0000
                }), // 11:bf50:6fe3:e3ee:5219:f6be:62c7:7450
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 2 (Net mask: 192.0.0.0; c000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 192.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0000, 0b0101_0001, 0b1111_1111, 0b0100_0001 }), // 64.81.255.65
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 64.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_1011, 0b0100_1000, 0b0100_0000, 0b0101_1010 }), // 107.72.64.90
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 64.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1101, 0b0011_1010, 0b0011_0011, 0b1000_0110 }), // 157.58.51.134
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 128.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_1001, 0b0110_1100, 0b0001_0010, 0b1111_0001 }), // 169.108.18.241
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 128.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 63.255.255.255
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_1110, 0b1011_0101, 0b0110_1000, 0b1000_0101 }), // 46.181.104.133
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0111, 0b0001_0010, 0b0101_0101, 0b0100_1010 }), // 7.18.85.74
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // c000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0001_0001, 0b1011_1111, 0b0101_0000, 0b0110_1111, 0b1110_0011, 0b1110_0011, 0b1110_1110,
                    0b0101_0010, 0b0001_1001, 0b1111_0110, 0b1011_1110, 0b0110_0010, 0b1100_0111, 0b0111_0100, 0b0101_0000
                }), // 11:bf50:6fe3:e3ee:5219:f6be:62c7:7450
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::64.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0010, 0b1101_0110, 0b1010_0101, 0b1100_1001, 0b1110_0011, 0b1010_0111, 0b1011_1011, 0b1010_0000,
                    0b1101_1000, 0b1111_1001, 0b0011_1110, 0b0110_1001, 0b1111_1010, 0b1101_0101, 0b0101_1101, 0b0010_1000
                }), // 22d6:a5c9:e3a7:bba0:d8f9:3e69:fad5:5d28
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::64.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0100, 0b1010_1100, 0b0111_0110, 0b1110_0101, 0b0000_1101, 0b1011_1101, 0b1001_1001, 0b1101_0010,
                    0b1000_0110, 0b1010_0101, 0b1101_0010, 0b0011_1000, 0b1000_1010, 0b1010_0011, 0b1000_0001, 0b0100_1000
                }), // 14ac:76e5:dbd:99d2:86a5:d238:8aa3:8148
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::128.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0000, 0b1011_1101, 0b0000_1110, 0b0110_0000, 0b1111_0010, 0b1101_1110, 0b0000_0101, 0b1111_1101,
                    0b0111_0000, 0b0001_0100, 0b0111_1111, 0b0111_0101, 0b1101_1110, 0b1111_1111, 0b0110_0011, 0b1101_0000
                }), // 30bd:e60:f2de:5fd:7014:7f75:deff:63d0
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::128.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1100, 0b1001_0001, 0b0110_1010, 0b1010_0000, 0b0010_0010, 0b0010_1111, 0b1111_0101, 0b0110_0011,
                    0b0111_0011, 0b1010_0101, 0b1111_0011, 0b0100_0001, 0b0111_0010, 0b0010_1001, 0b0110_0110, 0b1000_0011
                }), // 3c91:6aa0:222f:f563:73a5:f341:7229:6683
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_1110, 0b0001_1110, 0b0101_0001, 0b1101_0111, 0b0110_0100, 0b0100_0001, 0b1011_1001, 0b0010_1010,
                    0b0101_1011, 0b0101_1001, 0b1011_0010, 0b1100_0011, 0b0101_1110, 0b0111_0101, 0b0111_1000, 0b0000_1101
                }), // 1e1e:51d7:6441:b92a:5b59:b2c3:5e75:780d
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion

            #region prefixLength = 1 (Net mask: 128.0.0.0; 8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 128.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_1111, 0b1111_1001, 0b0111_0101, 0b0000_0110 }), // 175.249.117.6
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 128.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1011, 0b1000_0010, 0b1011_0110, 0b1111_0000 }), // 251.130.182.240
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 128.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 127.255.255.255
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1000, 0b1111_1111, 0b1100_1010, 0b0100_0101 }), // 120.255.202.69
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_0000, 0b1010_0100, 0b1000_1100, 0b0110_1001 }), // 48.164.140.105
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 8000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 8000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_1101, 0b1111_0001, 0b1000_0001, 0b1101_1111, 0b0011_0001, 0b0010_0100, 0b0111_1100, 0b0001_0011,
                    0b0001_0000, 0b1111_0111, 0b0011_0000, 0b1001_1010, 0b1110_0001, 0b0000_0110, 0b0010_1111, 0b0111_0001
                }), // 8df1:81df:3124:7c13:10f7:309a:e106:2f71
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 8000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_0011, 0b0100_0010, 0b1101_1001, 0b0000_1010, 0b0001_0110, 0b1010_1100, 0b0010_0111, 0b1000_0101,
                    0b1100_0010, 0b1000_1100, 0b1101_0111, 0b1110_0111, 0b1100_0101, 0b1101_1000, 0b0000_0100, 0b0010_0111
                }), // f342:d90a:16ac:2785:c28c:d7e7:c5d8:427
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // 8000::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0100, 0b0010_1010, 0b1100_1110, 0b0011_1101, 0b0000_0111, 0b0001_0111, 0b0100_1100, 0b0001_0010,
                    0b1001_1111, 0b1100_0111, 0b1011_1011, 0b1001_1001, 0b0100_1100, 0b0010_0111, 0b1100_1101, 0b1111_0000
                }), // 642a:ce3d:717:4c12:9fc7:bb99:4c27:cdf0
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0110, 0b1011_0010, 0b0001_0100, 0b0011_1101, 0b0100_0110, 0b1100_0001, 0b1010_0010, 0b1011_1001,
                    0b1011_0011, 0b0000_1010, 0b0110_0011, 0b0011_0010, 0b1111_1010, 0b1000_1010, 0b1000_0110, 0b1001_0101
                }), // 6b2:143d:46c1:a2b9:b30a:6332:fa8a:8695
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            );

            #endregion
        }

        public static System.Collections.IEnumerable GetGetFirstAddressInBlockTest2Data()
        {
            #region prefixLength = 128 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)128
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1111, 0b1000_1000, 0b1110_0001, 0b1101_0110, 0b1101_0011, 0b1110_0101, 0b1001_1100, 0b1101_1000,
                    0b0101_0010, 0b1011_0001, 0b1000_1101, 0b1000_0111, 0b0101_1000, 0b1000_0001, 0b0100_0110, 0b1110_1000
                }), // df88:e1d6:d3e5:9cd8:52b1:8d87:5881:46e8
                (byte)128
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)128
            );

            #endregion

            #region prefixLength = 127 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe
                (byte)127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0101, 0b0110_1110, 0b0011_0011, 0b0001_1011, 0b0010_0101, 0b1010_1001, 0b1010_0010, 0b1011_0101,
                    0b0000_1000, 0b1000_1000, 0b0110_1001, 0b0100_0001, 0b0110_1000, 0b1010_1100, 0b0110_1010, 0b0000_0010
                }), // 356e:331b:25a9:a2b5:888:6941:68ac:6a02
                (byte)127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_1001, 0b0101_1010, 0b0000_0001, 0b0111_0010, 0b1011_1101, 0b0111_0110, 0b0000_0000, 0b0010_0101,
                    0b0011_0010, 0b0101_0000, 0b1111_1011, 0b1101_1000, 0b1101_1000, 0b1100_0010, 0b0100_1011, 0b1001_0000
                }), // b95a:172:bd76:25:3250:fbd8:d8c2:4b90
                (byte)127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)127
            );

            #endregion

            #region prefixLength = 126 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc
                (byte)126
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0000, 0b0011_1010, 0b1011_1111, 0b0111_0101, 0b0010_0101, 0b0010_0010, 0b0100_0100, 0b1010_0101,
                    0b1110_0000, 0b0001_1101, 0b1000_0001, 0b1100_1100, 0b1011_0000, 0b1111_1100, 0b0011_1100, 0b0110_1100
                }), // c03a:bf75:2522:44a5:e01d:81cc:b0fc:3c6c
                (byte)126
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0000, 0b1101_0000, 0b1001_1010, 0b1100_0111, 0b1110_1000, 0b0100_1010, 0b1110_1011, 0b0001_1111,
                    0b1111_0001, 0b1111_1001, 0b1011_0100, 0b1010_0001, 0b1110_0010, 0b0010_0100, 0b1101_1011, 0b0110_1000
                }), // 10d0:9ac7:e84a:eb1f:f1f9:b4a1:e224:db68
                (byte)126
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)126
            );

            #endregion

            #region prefixLength = 121 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80
                (byte)121
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0110, 0b0101_0101, 0b1011_1010, 0b0001_0101, 0b1000_0101, 0b0000_0101, 0b0101_0010, 0b1110_1000,
                    0b0010_1110, 0b0100_1010, 0b1011_0110, 0b1011_1110, 0b0001_0011, 0b1111_1001, 0b1110_0101, 0b1000_0000
                }), // 6655:ba15:8505:52e8:2e4a:b6be:13f9:e580
                (byte)121
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0100, 0b0110_0011, 0b0011_1011, 0b1100_0000, 0b0000_1011, 0b0111_1010, 0b1010_0000, 0b1110_1110,
                    0b0001_0101, 0b0010_0001, 0b1001_1100, 0b1001_1101, 0b0010_0001, 0b1111_0100, 0b0000_1011, 0b0000_0000
                }), // 3463:3bc0:b7a:a0ee:1521:9c9d:21f4:b00
                (byte)121
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)121
            );

            #endregion

            #region prefixLength = 120 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00
                (byte)120
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0111_0010, 0b0111_1010, 0b0001_0001, 0b1100_1111, 0b0100_1101, 0b1010_0001, 0b0011_0100,
                    0b1100_0110, 0b1010_0011, 0b0101_0001, 0b0001_1111, 0b0111_0010, 0b0111_0100, 0b1000_1001, 0b0000_0000
                }), // 8072:7a11:cf4d:a134:c6a3:511f:7274:8900
                (byte)120
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_0110, 0b0111_0100, 0b1000_1111, 0b0011_1010, 0b1101_1001, 0b0110_1100, 0b0001_0010, 0b1010_1000,
                    0b1010_0101, 0b1111_1010, 0b1111_1110, 0b0110_1111, 0b1000_1010, 0b1100_0010, 0b1011_1000, 0b0000_0000
                }), // 9674:8f3a:d96c:12a8:a5fa:fe6f:8ac2:b800
                (byte)120
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)120
            );

            #endregion

            #region prefixLength = 119 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00
                (byte)119
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1100, 0b0110_1100, 0b0011_0111, 0b0010_1110, 0b1100_1101, 0b0000_1011, 0b1000_0001, 0b1001_0110,
                    0b0001_0001, 0b1000_1010, 0b0011_0100, 0b0111_0111, 0b1011_1010, 0b0010_1111, 0b1101_0010, 0b0000_0000
                }), // 7c6c:372e:cd0b:8196:118a:3477:ba2f:d200
                (byte)119
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0101, 0b1000_1101, 0b0001_1100, 0b1011_1100, 0b1111_0000, 0b1100_1111, 0b1101_1010, 0b0010_0011,
                    0b1001_1001, 0b1000_0000, 0b1001_0011, 0b0101_0000, 0b0001_1000, 0b0111_1110, 0b0110_0000, 0b0000_0000
                }), // 158d:1cbc:f0cf:da23:9980:9350:187e:6000
                (byte)119
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)119
            );

            #endregion

            #region prefixLength = 33 (Net mask: ffff:ffff:8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff:8000::
                (byte)33
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1001, 0b1100_0101, 0b0001_1010, 0b1000_0001, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 69c5:1a81:8000::
                (byte)33
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1000, 0b1000_1110, 0b1110_0011, 0b1111_1001, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 488e:e3f9::
                (byte)33
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)33
            );

            #endregion

            #region prefixLength = 32 (Net mask: 255.255.255.255 || ffff:ffff::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_1100, 0b1001_0011, 0b0110_1001, 0b0100_0100 }), // 28.147.105.68
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff::
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0111, 0b1101_0110, 0b1011_0011, 0b1001_0101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 47d6:b395::
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1010, 0b1001_1111, 0b0001_1100, 0b0011_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 6a9f:1c32::
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)32
            );

            #endregion

            #region prefixLength = 31 (Net mask: 255.255.255.254 || ffff:fffe::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }), // 255.255.255.254
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_0110, 0b1111_0010, 0b1011_1111, 0b0110_0010 }), // 150.242.191.98
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1100, 0b1010_1100, 0b0011_0000, 0b1101_1000 }), // 124.172.48.216
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:fffe::
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0100, 0b0100_1001, 0b0000_0010, 0b1010_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 6449:2ae::
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0000, 0b1110_1100, 0b0010_1100, 0b0011_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 40ec:2c3c::
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)31
            );

            #endregion

            #region prefixLength = 30 (Net mask: 255.255.255.252)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100 }), // 255.255.255.252
                (byte)30
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1110, 0b0110_0010, 0b0000_1000, 0b1000_1100 }), // 62.98.8.140
                (byte)30
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_1011, 0b1010_0011, 0b1011_1111, 0b1010_1000 }), // 11.163.191.168
                (byte)30
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)30
            );

            #endregion

            #region prefixLength = 25 (Net mask: 255.255.255.128)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000 }), // 255.255.255.128
                (byte)25
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_0110, 0b1000_1000, 0b1111_0111, 0b1000_0000 }), // 22.136.247.128
                (byte)25
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1000, 0b0000_0011, 0b1101_0011, 0b0000_0000 }), // 248.3.211.0
                (byte)25
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)25
            );

            #endregion

            #region prefixLength = 24 (Net mask: 255.255.255.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000 }), // 255.255.255.0
                (byte)24
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_1110, 0b1101_1110, 0b0010_1101, 0b0000_0000 }), // 46.222.45.0
                (byte)24
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0101, 0b1110_0001, 0b1110_0010, 0b0000_0000 }), // 165.225.226.0
                (byte)24
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)24
            );

            #endregion

            #region prefixLength = 23 (Net mask: 255.255.254.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000 }), // 255.255.254.0
                (byte)23
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_1001, 0b0000_1110, 0b1111_0010, 0b0000_0000 }), // 25.14.242.0
                (byte)23
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0000, 0b0101_1011, 0b0110_0100, 0b0000_0000 }), // 128.91.100.0
                (byte)23
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)23
            );

            #endregion

            #region prefixLength = 9 (Net mask: 255.128.0.0 || ff80::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 255.128.0.0
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0100, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 164.128.0.0
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1101, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 189.0.0.0
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff80::
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 4f80::
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // d300::
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)9
            );

            #endregion

            #region prefixLength = 8 (Net mask: 255.0.0.0 || ff00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 255.0.0.0
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_1001, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 137.0.0.0
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 58.0.0.0
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff00::
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 4100::
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 2200::
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)8
            );

            #endregion

            #region prefixLength = 7 (Net mask: 254.0.0.0 || fe00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 254.0.0.0
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 2.0.0.0
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 220.0.0.0
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // fe00::
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ca00::
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 2400::
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)7
            );

            #endregion

            #region prefixLength = 2 (Net mask: 192.0.0.0 || c000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 192.0.0.0
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 64.0.0.0
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // c000::
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::64.0.0.0
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::128.0.0.0
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)2
            );

            #endregion

            #region prefixLength = 1 (Net mask: 128.0.0.0 || 8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                (byte)1
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)1
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8000::
                (byte)1
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)1
            );

            #endregion
        }

        public static System.Collections.IEnumerable GetGetLastAddressInBlockTest1Data()
        {
            #region prefixLength = 127 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe
                (byte)127
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_0111, 0b0110_0111, 0b0000_0101, 0b1000_0001, 0b0001_0111, 0b0111_1100, 0b1110_0101, 0b0100_1010,
                    0b0010_1001, 0b0100_0101, 0b0101_1001, 0b1111_1111, 0b1101_0000, 0b0100_1111, 0b1100_0011, 0b0001_0111
                }), // 7767:581:177c:e54a:2945:59ff:d04f:c317
                (byte)127
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_0111, 0b0110_0111, 0b0000_0101, 0b1000_0001, 0b0001_0111, 0b0111_1100, 0b1110_0101, 0b0100_1010,
                    0b0010_1001, 0b0100_0101, 0b0101_1001, 0b1111_1111, 0b1101_0000, 0b0100_1111, 0b1100_0011, 0b0001_0111
                }) // 7767:581:177c:e54a:2945:59ff:d04f:c317
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1011, 0b0110_1011, 0b0111_1100, 0b1101_0000, 0b1010_1001, 0b1110_0000, 0b0011_1001, 0b0001_0011,
                    0b0011_0110, 0b1001_0010, 0b0111_1101, 0b0000_1111, 0b0101_0001, 0b1101_0100, 0b0110_0001, 0b1010_0001
                }), // 3b6b:7cd0:a9e0:3913:3692:7d0f:51d4:61a1
                (byte)127
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1011, 0b0110_1011, 0b0111_1100, 0b1101_0000, 0b1010_1001, 0b1110_0000, 0b0011_1001, 0b0001_0011,
                    0b0011_0110, 0b1001_0010, 0b0111_1101, 0b0000_1111, 0b0101_0001, 0b1101_0100, 0b0110_0001, 0b1010_0001
                }) // 3b6b:7cd0:a9e0:3913:3692:7d0f:51d4:61a1
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)127
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001
                }) // ::1
            );

            #endregion

            #region prefixLength = 126 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1111, 0b1011_1100, 0b1001_0001, 0b0101_0001, 0b1101_1110, 0b0100_0000, 0b0101_0111, 0b1101_1000,
                    0b0000_1100, 0b1010_0101, 0b1011_0001, 0b1001_1011, 0b0111_0110, 0b0010_1000, 0b0011_1101, 0b1111_1111
                }), // efbc:9151:de40:57d8:ca5:b19b:7628:3dff
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_1111, 0b1011_1100, 0b1001_0001, 0b0101_0001, 0b1101_1110, 0b0100_0000, 0b0101_0111, 0b1101_1000,
                    0b0000_1100, 0b1010_0101, 0b1011_0001, 0b1001_1011, 0b0111_0110, 0b0010_1000, 0b0011_1101, 0b1111_1111
                }) // efbc:9151:de40:57d8:ca5:b19b:7628:3dff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1110, 0b0101_1100, 0b0001_1111, 0b0100_1000, 0b0001_1001, 0b1011_1101, 0b0100_1111, 0b0101_0000,
                    0b0111_0011, 0b1010_0010, 0b1100_1100, 0b0100_0010, 0b1000_1110, 0b0111_1001, 0b0100_0010, 0b1101_1011
                }), // 4e5c:1f48:19bd:4f50:73a2:cc42:8e79:42db
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_1110, 0b0101_1100, 0b0001_1111, 0b0100_1000, 0b0001_1001, 0b1011_1101, 0b0100_1111, 0b0101_0000,
                    0b0111_0011, 0b1010_0010, 0b1100_1100, 0b0100_0010, 0b1000_1110, 0b0111_1001, 0b0100_0010, 0b1101_1011
                }) // 4e5c:1f48:19bd:4f50:73a2:cc42:8e79:42db
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1101, 0b1111_1111, 0b1101_1110, 0b1111_0111, 0b1111_1111, 0b1111_1111, 0b1101_1011, 0b0111_1111,
                    0b1110_1111, 0b1111_1110, 0b0010_1111, 0b1000_1110, 0b0111_0111, 0b1000_1111, 0b1110_0001, 0b0001_0100
                }), // cdff:def7:ffff:db7f:effe:2f8e:778f:e114
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_1000, 0b1011_1111, 0b1101_1010, 0b0110_0110, 0b1111_0110, 0b0101_1110, 0b1100_0011, 0b0110_1111,
                    0b0110_1111, 0b1100_0100, 0b0010_1011, 0b1000_1110, 0b0111_0100, 0b0000_0000, 0b1010_0001, 0b0001_0011
                }) // c8bf:da66:f65e:c36f:6fc4:2b8e:7400:a113
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1011, 0b1101_1101, 0b1100_1110, 0b1100_1110, 0b1100_1111, 0b1101_1111, 0b0101_1110, 0b1011_1111,
                    0b1001_1011, 0b1011_0011, 0b1101_0101, 0b0111_0110, 0b0011_0111, 0b1111_1111, 0b1011_1110, 0b1111_1110
                }), // fbdd:cece:cfdf:5ebf:9bb3:d576:37ff:befe
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_1011, 0b1101_1101, 0b0100_1110, 0b1100_1110, 0b1100_0100, 0b1100_0111, 0b0101_0100, 0b1011_1111,
                    0b1001_1001, 0b1011_0011, 0b1101_0000, 0b0111_0110, 0b0011_0000, 0b1010_0111, 0b1011_0100, 0b0110_1011
                }) // dbdd:4ece:c4c7:54bf:99b3:d076:30a7:b46b
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0001, 0b0010_1010, 0b0101_0101, 0b1100_0000, 0b0011_1100, 0b0110_1101, 0b1001_1001, 0b1101_1101,
                    0b0111_0000, 0b0100_0101, 0b1000_0010, 0b0111_0011, 0b0001_1011, 0b1100_0100, 0b0100_0101, 0b0010_0101
                }), // e12a:55c0:3c6d:99dd:7045:8273:1bc4:4525
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_0001, 0b0010_1010, 0b0101_0101, 0b1100_0000, 0b0011_1100, 0b0110_1101, 0b1001_1001, 0b1101_1101,
                    0b0111_0000, 0b0100_0101, 0b1000_0010, 0b0111_0011, 0b0001_1011, 0b1100_0100, 0b0100_0101, 0b0010_0111
                }) // e12a:55c0:3c6d:99dd:7045:8273:1bc4:4527
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_0100, 0b1101_1111, 0b1100_1110, 0b1111_1010, 0b1111_1110, 0b1111_1111, 0b1111_0111, 0b1111_1111,
                    0b1111_1011, 0b1101_1111, 0b1101_1111, 0b1100_1111, 0b1111_1111, 0b1011_0110, 0b1111_0000, 0b1111_1110
                }), // f4df:cefa:feff:f7ff:fbdf:dfcf:ffb6:f0fe
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_0000, 0b1001_1111, 0b1000_1100, 0b1010_0010, 0b0101_0100, 0b1111_1001, 0b0011_0011, 0b0111_1101,
                    0b0111_1011, 0b1101_1110, 0b1101_0011, 0b1100_1001, 0b1110_0100, 0b0001_0000, 0b1011_0000, 0b1101_1111
                }) // f09f:8ca2:54f9:337d:7bde:d3c9:e410:b0df
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1000, 0b1000_1010, 0b0101_1010, 0b0100_1110, 0b0110_0110, 0b1010_0000, 0b1000_0110, 0b0100_1010,
                    0b0000_1100, 0b1010_1100, 0b1111_0110, 0b0011_0011, 0b0111_0000, 0b0101_0011, 0b0000_0011, 0b1111_1010
                }), // 288a:5a4e:66a0:864a:cac:f633:7053:3fa
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }) // ::3
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001
                }), // ::1
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }) // ::3
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)126
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }) // ::3
            );

            #endregion

            #region prefixLength = 121 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_0111, 0b0000_1111, 0b0011_0000, 0b1110_1010, 0b1100_1100, 0b1110_1000, 0b1111_0110, 0b0100_0110,
                    0b1101_0011, 0b0110_0101, 0b0100_0100, 0b0101_1100, 0b1001_1111, 0b1110_0000, 0b1110_1110, 0b1111_1111
                }), // 770f:30ea:cce8:f646:d365:445c:9fe0:eeff
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_0111, 0b0000_1111, 0b0011_0000, 0b1110_1010, 0b1100_1100, 0b1110_1000, 0b1111_0110, 0b0100_0110,
                    0b1101_0011, 0b0110_0101, 0b0100_0100, 0b0101_1100, 0b1001_1111, 0b1110_0000, 0b1110_1110, 0b1111_1111
                }) // 770f:30ea:cce8:f646:d365:445c:9fe0:eeff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_0101, 0b0110_1100, 0b0111_0110, 0b1000_0100, 0b1110_1011, 0b0000_1111, 0b1001_1101, 0b0100_0011,
                    0b0110_1010, 0b1001_1000, 0b0000_0011, 0b1110_0001, 0b1100_0101, 0b1010_0011, 0b1000_1111, 0b0111_1111
                }), // 556c:7684:eb0f:9d43:6a98:3e1:c5a3:8f7f
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0101_0101, 0b0110_1100, 0b0111_0110, 0b1000_0100, 0b1110_1011, 0b0000_1111, 0b1001_1101, 0b0100_0011,
                    0b0110_1010, 0b1001_1000, 0b0000_0011, 0b1110_0001, 0b1100_0101, 0b1010_0011, 0b1000_1111, 0b0111_1111
                }) // 556c:7684:eb0f:9d43:6a98:3e1:c5a3:8f7f
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1000, 0b1110_0000, 0b0111_0000, 0b1101_0110, 0b0101_0010, 0b1101_1111, 0b0000_0110, 0b1001_0100,
                    0b1011_0111, 0b1110_1010, 0b0101_0011, 0b1111_1111, 0b0000_0010, 0b1101_1100, 0b0101_0111, 0b0010_0101
                }), // 58e0:70d6:52df:694:b7ea:53ff:2dc:5725
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0101_1000, 0b1110_0000, 0b0111_0000, 0b1101_0110, 0b0101_0010, 0b1101_1111, 0b0000_0110, 0b1001_0100,
                    0b1011_0111, 0b1110_1010, 0b0101_0011, 0b1111_1111, 0b0000_0010, 0b1101_1100, 0b0101_0111, 0b0111_1111
                }) // 58e0:70d6:52df:694:b7ea:53ff:2dc:577f
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0011, 0b1010_0101, 0b0111_1011, 0b0011_0010, 0b0101_0011, 0b0010_0110, 0b0101_0111, 0b1001_1010,
                    0b0111_0000, 0b0000_1100, 0b1011_1100, 0b0011_0011, 0b0001_0011, 0b1110_0110, 0b0001_1100, 0b0110_1001
                }), // 43a5:7b32:5326:579a:700c:bc33:13e6:1c69
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_0011, 0b1010_0101, 0b0111_1011, 0b0011_0010, 0b0101_0011, 0b0010_0110, 0b0101_0111, 0b1001_1010,
                    0b0111_0000, 0b0000_1100, 0b1011_1100, 0b0011_0011, 0b0001_0011, 0b1110_0110, 0b0001_1100, 0b0111_1111
                }) // 43a5:7b32:5326:579a:700c:bc33:13e6:1c7f
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0001, 0b0010_1110, 0b0001_1111, 0b0000_0010, 0b1011_1001, 0b1100_1000, 0b1101_0111, 0b0111_0101,
                    0b0100_1001, 0b1100_1101, 0b1110_0101, 0b0001_1101, 0b1111_1110, 0b1101_0101, 0b1111_1010, 0b1010_0100
                }), // 612e:1f02:b9c8:d775:49cd:e51d:fed5:faa4
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0110_0001, 0b0010_1110, 0b0001_1111, 0b0000_0010, 0b1011_1001, 0b1100_1000, 0b1101_0111, 0b0111_0101,
                    0b0100_1001, 0b1100_1101, 0b1110_0101, 0b0001_1101, 0b1111_1110, 0b1101_0101, 0b1111_1010, 0b1111_1111
                }) // 612e:1f02:b9c8:d775:49cd:e51d:fed5:faff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1010, 0b0001_1111, 0b0000_0111, 0b1011_0001, 0b0110_0110, 0b0000_0110, 0b0110_0000, 0b0001_1110,
                    0b1111_1111, 0b1010_0100, 0b1110_1010, 0b1100_0000, 0b1101_0110, 0b0110_0000, 0b0101_0101, 0b1111_1001
                }), // 4a1f:7b1:6606:601e:ffa4:eac0:d660:55f9
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_1010, 0b0001_1111, 0b0000_0111, 0b1011_0001, 0b0110_0110, 0b0000_0110, 0b0110_0000, 0b0001_1110,
                    0b1111_1111, 0b1010_0100, 0b1110_1010, 0b1100_0000, 0b1101_0110, 0b0110_0000, 0b0101_0101, 0b1111_1111
                }) // 4a1f:7b1:6606:601e:ffa4:eac0:d660:55ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0101_1110
                }), // ::5e
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }) // ::7f
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0010_0100
                }), // ::24
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }) // ::7f
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)121
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }) // ::7f
            );

            #endregion

            #region prefixLength = 120 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_1001, 0b1111_0001, 0b0000_0000, 0b1000_0010, 0b0011_0010, 0b0000_0101, 0b1001_0011, 0b0110_1101,
                    0b0000_0100, 0b0110_1010, 0b0110_1110, 0b1111_1001, 0b1100_0010, 0b0011_0100, 0b0101_1111, 0b1111_1111
                }), // a9f1:82:3205:936d:46a:6ef9:c234:5fff
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1010_1001, 0b1111_0001, 0b0000_0000, 0b1000_0010, 0b0011_0010, 0b0000_0101, 0b1001_0011, 0b0110_1101,
                    0b0000_0100, 0b0110_1010, 0b0110_1110, 0b1111_1001, 0b1100_0010, 0b0011_0100, 0b0101_1111, 0b1111_1111
                }) // a9f1:82:3205:936d:46a:6ef9:c234:5fff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1000, 0b1011_0000, 0b0001_1001, 0b0001_1101, 0b0100_1000, 0b0010_1001, 0b1000_0001, 0b1110_1011,
                    0b1011_1101, 0b0001_0111, 0b1110_1111, 0b0001_0001, 0b0001_1001, 0b0001_1110, 0b1101_1010, 0b1111_1111
                }), // 58b0:191d:4829:81eb:bd17:ef11:191e:daff
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0101_1000, 0b1011_0000, 0b0001_1001, 0b0001_1101, 0b0100_1000, 0b0010_1001, 0b1000_0001, 0b1110_1011,
                    0b1011_1101, 0b0001_0111, 0b1110_1111, 0b0001_0001, 0b0001_1001, 0b0001_1110, 0b1101_1010, 0b1111_1111
                }) // 58b0:191d:4829:81eb:bd17:ef11:191e:daff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_1010, 0b0111_0100, 0b0100_0000, 0b1100_0101, 0b1011_1100, 0b1100_1000, 0b0110_1100, 0b1001_1010,
                    0b1011_1100, 0b0001_0110, 0b1111_0100, 0b1100_1101, 0b1111_1110, 0b0110_0101, 0b0001_1000, 0b0101_1011
                }), // 1a74:40c5:bcc8:6c9a:bc16:f4cd:fe65:185b
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_1010, 0b0111_0100, 0b0100_0000, 0b1100_0101, 0b1011_1100, 0b1100_1000, 0b0110_1100, 0b1001_1010,
                    0b1011_1100, 0b0001_0110, 0b1111_0100, 0b1100_1101, 0b1111_1110, 0b0110_0101, 0b0001_1000, 0b1111_1111
                }) // 1a74:40c5:bcc8:6c9a:bc16:f4cd:fe65:18ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_0001, 0b1000_0000, 0b1111_1100, 0b1011_0000, 0b0010_1001, 0b0010_0001, 0b0100_0110, 0b0011_0110,
                    0b0001_1011, 0b0101_1000, 0b0110_1100, 0b0100_0111, 0b0000_1001, 0b1001_1000, 0b1011_0000, 0b1111_0000
                }), // 7180:fcb0:2921:4636:1b58:6c47:998:b0f0
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_0001, 0b1000_0000, 0b1111_1100, 0b1011_0000, 0b0010_1001, 0b0010_0001, 0b0100_0110, 0b0011_0110,
                    0b0001_1011, 0b0101_1000, 0b0110_1100, 0b0100_0111, 0b0000_1001, 0b1001_1000, 0b1011_0000, 0b1111_1111
                }) // 7180:fcb0:2921:4636:1b58:6c47:998:b0ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0100, 0b1000_1011, 0b1010_1000, 0b1100_1101, 0b0111_1010, 0b0110_1111, 0b0100_0100, 0b0010_0011,
                    0b0010_1110, 0b1000_1111, 0b0100_0010, 0b1100_0010, 0b0110_1111, 0b1111_0110, 0b1011_1001, 0b0011_0010
                }), // 248b:a8cd:7a6f:4423:2e8f:42c2:6ff6:b932
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0010_0100, 0b1000_1011, 0b1010_1000, 0b1100_1101, 0b0111_1010, 0b0110_1111, 0b0100_0100, 0b0010_0011,
                    0b0010_1110, 0b1000_1111, 0b0100_0010, 0b1100_0010, 0b0110_1111, 0b1111_0110, 0b1011_1001, 0b1111_1111
                }) // 248b:a8cd:7a6f:4423:2e8f:42c2:6ff6:b9ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0100, 0b1010_1011, 0b1101_0011, 0b0100_0101, 0b1101_0100, 0b1100_1011, 0b1001_0110, 0b0101_1011,
                    0b0001_0010, 0b1110_0101, 0b0101_1101, 0b1011_1100, 0b1110_0100, 0b1100_0100, 0b1110_0101, 0b1000_1110
                }), // b4ab:d345:d4cb:965b:12e5:5dbc:e4c4:e58e
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1011_0100, 0b1010_1011, 0b1101_0011, 0b0100_0101, 0b1101_0100, 0b1100_1011, 0b1001_0110, 0b0101_1011,
                    0b0001_0010, 0b1110_0101, 0b0101_1101, 0b1011_1100, 0b1110_0100, 0b1100_0100, 0b1110_0101, 0b1111_1111
                }) // b4ab:d345:d4cb:965b:12e5:5dbc:e4c4:e5ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1001_1100
                }), // ::9c
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }) // ::ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0011
                }), // ::43
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }) // ::ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)120
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }) // ::ff
            );

            #endregion

            #region prefixLength = 119 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_1001, 0b0100_1000, 0b1010_1111, 0b1001_1010, 0b1000_0101, 0b0101_0001, 0b0010_1001, 0b0110_0101,
                    0b1111_1110, 0b1011_1100, 0b0111_1111, 0b0010_1010, 0b1111_1100, 0b0110_1001, 0b1000_1011, 0b1111_1111
                }), // b948:af9a:8551:2965:febc:7f2a:fc69:8bff
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1011_1001, 0b0100_1000, 0b1010_1111, 0b1001_1010, 0b1000_0101, 0b0101_0001, 0b0010_1001, 0b0110_0101,
                    0b1111_1110, 0b1011_1100, 0b0111_1111, 0b0010_1010, 0b1111_1100, 0b0110_1001, 0b1000_1011, 0b1111_1111
                }) // b948:af9a:8551:2965:febc:7f2a:fc69:8bff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0101, 0b0010_0101, 0b0011_1100, 0b0000_1111, 0b1001_1110, 0b0100_0100, 0b1010_0111, 0b0100_0101,
                    0b0101_1010, 0b0000_1100, 0b0011_0001, 0b0000_0011, 0b1110_0111, 0b0010_1011, 0b1110_0001, 0b1111_1111
                }), // 525:3c0f:9e44:a745:5a0c:3103:e72b:e1ff
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0101, 0b0010_0101, 0b0011_1100, 0b0000_1111, 0b1001_1110, 0b0100_0100, 0b1010_0111, 0b0100_0101,
                    0b0101_1010, 0b0000_1100, 0b0011_0001, 0b0000_0011, 0b1110_0111, 0b0010_1011, 0b1110_0001, 0b1111_1111
                }) // 525:3c0f:9e44:a745:5a0c:3103:e72b:e1ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_1000, 0b0100_1111, 0b1011_1010, 0b0101_0010, 0b0011_0101, 0b1011_0111, 0b1000_1000, 0b0101_1110,
                    0b0000_0110, 0b1001_1010, 0b0100_0101, 0b1100_0101, 0b0011_0011, 0b1000_0001, 0b0010_0000, 0b0010_1001
                }), // 984f:ba52:35b7:885e:69a:45c5:3381:2029
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_1000, 0b0100_1111, 0b1011_1010, 0b0101_0010, 0b0011_0101, 0b1011_0111, 0b1000_1000, 0b0101_1110,
                    0b0000_0110, 0b1001_1010, 0b0100_0101, 0b1100_0101, 0b0011_0011, 0b1000_0001, 0b0010_0001, 0b1111_1111
                }) // 984f:ba52:35b7:885e:69a:45c5:3381:21ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0110, 0b0101_0101, 0b1011_1110, 0b1110_0001, 0b1011_1001, 0b1101_0101, 0b1000_0100, 0b1010_1111,
                    0b1110_1101, 0b0010_0101, 0b0011_1000, 0b0110_1100, 0b0010_1001, 0b1110_1001, 0b1010_0101, 0b1111_1011
                }), // 4655:bee1:b9d5:84af:ed25:386c:29e9:a5fb
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_0110, 0b0101_0101, 0b1011_1110, 0b1110_0001, 0b1011_1001, 0b1101_0101, 0b1000_0100, 0b1010_1111,
                    0b1110_1101, 0b0010_0101, 0b0011_1000, 0b0110_1100, 0b0010_1001, 0b1110_1001, 0b1010_0101, 0b1111_1111
                }) // 4655:bee1:b9d5:84af:ed25:386c:29e9:a5ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0101, 0b1101_1111, 0b1011_1110, 0b1001_1000, 0b1010_0000, 0b1111_0101, 0b1101_1010, 0b1011_1110,
                    0b1100_1001, 0b1111_0111, 0b0000_0100, 0b1010_0110, 0b1111_0111, 0b0110_1110, 0b0001_0110, 0b1011_1011
                }), // 5df:be98:a0f5:dabe:c9f7:4a6:f76e:16bb
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0101, 0b1101_1111, 0b1011_1110, 0b1001_1000, 0b1010_0000, 0b1111_0101, 0b1101_1010, 0b1011_1110,
                    0b1100_1001, 0b1111_0111, 0b0000_0100, 0b1010_0110, 0b1111_0111, 0b0110_1110, 0b0001_0111, 0b1111_1111
                }) // 5df:be98:a0f5:dabe:c9f7:4a6:f76e:17ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0101, 0b1101_1001, 0b1000_1110, 0b1100_0011, 0b1110_0110, 0b0110_0010, 0b0101_1100, 0b0011_1001,
                    0b0001_1111, 0b1101_1010, 0b1101_1001, 0b0010_1001, 0b0111_1110, 0b0100_0100, 0b0010_0011, 0b0110_0100
                }), // 45d9:8ec3:e662:5c39:1fda:d929:7e44:2364
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_0101, 0b1101_1001, 0b1000_1110, 0b1100_0011, 0b1110_0110, 0b0110_0010, 0b0101_1100, 0b0011_1001,
                    0b0001_1111, 0b1101_1010, 0b1101_1001, 0b0010_1001, 0b0111_1110, 0b0100_0100, 0b0010_0011, 0b1111_1111
                }) // 45d9:8ec3:e662:5c39:1fda:d929:7e44:23ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1010_1011
                }), // ::1ab
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }) // ::1ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_0000
                }), // ::80
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }) // ::1ff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)119
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }) // ::1ff
            );

            #endregion

            #region prefixLength = 33 (Net mask: ffff:ffff:8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff:8000::
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1001, 0b0100_1000, 0b0101_0111, 0b1110_1010, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 4948:57ea:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_1001, 0b0100_1000, 0b0101_0111, 0b1110_1010, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 4948:57ea:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1101, 0b0100_1010, 0b0011_0011, 0b0001_0101, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 3d4a:3315:7fff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1101, 0b0100_1010, 0b0011_0011, 0b0001_0101, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3d4a:3315:7fff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_0101, 0b0001_0011, 0b0100_1110, 0b1110_1001, 0b0011_1000, 0b1110_0011, 0b0010_1001, 0b1101_1101,
                    0b1011_0111, 0b1010_0111, 0b1100_0111, 0b1101_1001, 0b1001_1101, 0b0001_0011, 0b0011_0000, 0b0110_1110
                }), // 9513:4ee9:38e3:29dd:b7a7:c7d9:9d13:306e
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_0101, 0b0001_0011, 0b0100_1110, 0b1110_1001, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 9513:4ee9:7fff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_1000, 0b0001_1100, 0b1011_1011, 0b0111_1010, 0b0111_1011, 0b1010_1000, 0b0010_1011, 0b1100_0010,
                    0b1010_0011, 0b1000_0001, 0b1110_0000, 0b0010_0111, 0b1111_0011, 0b1001_1011, 0b1010_1101, 0b0100_0001
                }), // b81c:bb7a:7ba8:2bc2:a381:e027:f39b:ad41
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1011_1000, 0b0001_1100, 0b1011_1011, 0b0111_1010, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // b81c:bb7a:7fff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_1101, 0b1010_1000, 0b1010_1011, 0b1110_0111, 0b1011_0110, 0b1110_1011, 0b1011_0100, 0b0011_0000,
                    0b0110_1010, 0b1010_1010, 0b0111_0000, 0b1000_1010, 0b0111_1101, 0b0110_1100, 0b1000_1001, 0b0011_1101
                }), // 1da8:abe7:b6eb:b430:6aaa:708a:7d6c:893d
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_1101, 0b1010_1000, 0b1010_1011, 0b1110_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1da8:abe7:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_1110, 0b1100_1000, 0b0010_0110, 0b1001_1111, 0b1111_1001, 0b1011_1010, 0b1111_0010, 0b0111_1001,
                    0b1110_1000, 0b1001_0110, 0b1010_0010, 0b0010_1101, 0b0110_0010, 0b0010_1001, 0b0010_0110, 0b0001_0100
                }), // ec8:269f:f9ba:f279:e896:a22d:6229:2614
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_1110, 0b1100_1000, 0b0010_0110, 0b1001_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ec8:269f:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_0101, 0b0010_0000, 0b1100_1011, 0b0110_0111,
                    0b0101_1111, 0b0011_0011, 0b1011_0010, 0b1001_0111, 0b1111_0000, 0b1010_1011, 0b1000_1110, 0b1111_1111
                }), // ::7520:cb67:5f33:b297:f0ab:8eff
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::7fff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0010_1001, 0b0101_0100, 0b1111_1110, 0b1000_1111,
                    0b0101_1011, 0b0110_1001, 0b0110_0100, 0b1011_0010, 0b0111_0011, 0b1100_0001, 0b1100_0101, 0b0010_1100
                }), // ::2954:fe8f:5b69:64b2:73c1:c52c
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::7fff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)33
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::7fff:ffff:ffff:ffff:ffff:ffff
            );

            #endregion

            #region prefixLength = 32 (Net mask: ffff:ffff::)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff::
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_0010, 0b0001_0001, 0b0010_1001, 0b1011_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 7211:29b5:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_0010, 0b0001_0001, 0b0010_1001, 0b1011_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7211:29b5:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0011, 0b1100_1011, 0b1010_1111, 0b0010_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 33cb:af2e:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_0011, 0b1100_1011, 0b1010_1111, 0b0010_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 33cb:af2e:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1111, 0b1100_1101, 0b0001_0011, 0b1000_0010, 0b0111_1100, 0b1010_0011, 0b0001_1110, 0b1101_1111,
                    0b0111_0110, 0b0010_0100, 0b1110_0101, 0b1011_0001, 0b0111_0110, 0b0001_1100, 0b1011_1010, 0b1010_1001
                }), // cfcd:1382:7ca3:1edf:7624:e5b1:761c:baa9
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_1111, 0b1100_1101, 0b0001_0011, 0b1000_0010, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // cfcd:1382:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0011, 0b0100_1111, 0b1000_1000, 0b1000_1110, 0b1111_1011, 0b0110_1111, 0b0001_0001, 0b0110_0001,
                    0b1001_1111, 0b1011_1010, 0b1010_1001, 0b0010_1011, 0b1110_1111, 0b0010_1001, 0b0100_0111, 0b1011_0100
                }), // c34f:888e:fb6f:1161:9fba:a92b:ef29:47b4
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_0011, 0b0100_1111, 0b1000_1000, 0b1000_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // c34f:888e:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1011, 0b1101_1110, 0b1100_1111, 0b1110_0011, 0b0101_0111, 0b0100_0011, 0b1101_1110, 0b1001_1001,
                    0b1010_0001, 0b0100_1011, 0b0011_0000, 0b0111_1111, 0b0101_1100, 0b1010_0000, 0b1001_0111, 0b0101_1000
                }), // 4bde:cfe3:5743:de99:a14b:307f:5ca0:9758
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_1011, 0b1101_1110, 0b1100_1111, 0b1110_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 4bde:cfe3:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0111, 0b0010_0010, 0b0110_0010, 0b0011_1111, 0b1100_0011, 0b0100_0011, 0b1011_0000, 0b1000_0011,
                    0b1001_1010, 0b0011_1010, 0b0111_0110, 0b0110_1111, 0b1001_1100, 0b0111_0010, 0b0111_0111, 0b1101_1000
                }), // 1722:623f:c343:b083:9a3a:766f:9c72:77d8
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_0111, 0b0010_0010, 0b0110_0010, 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1722:623f:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_0010, 0b0010_0111, 0b1101_1010, 0b1001_1010,
                    0b1000_1000, 0b0001_1010, 0b0101_1001, 0b1010_1111, 0b1000_0100, 0b1111_1101, 0b1011_1101, 0b0010_0101
                }), // ::f227:da9a:881a:59af:84fd:bd25
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0001_1100, 0b1111_1001, 0b1100_0101, 0b1011_1110,
                    0b1110_0011, 0b1011_0101, 0b0010_0011, 0b1011_1011, 0b0000_0010, 0b1000_1001, 0b1110_0101, 0b0001_0001
                }), // ::1cf9:c5be:e3b5:23bb:289:e511
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)32
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::ffff:ffff:ffff:ffff:ffff:ffff
            );

            #endregion

            #region prefixLength = 31 (Net mask: 255.255.255.254; ffff:fffe::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }), // 255.255.255.254
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_0110, 0b1001_0010, 0b0111_0001, 0b0011_1110 }), // 118.146.113.62
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_0110, 0b1001_0010, 0b0111_0001, 0b0011_1111 }) // 118.146.113.63
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_1110, 0b1111_1010, 0b0110_0001, 0b1110_1000 }), // 94.250.97.232
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_1110, 0b1111_1010, 0b0110_0001, 0b1110_1001 }) // 94.250.97.233
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }) // 0.0.0.1
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:fffe::
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0100, 0b0110_0101, 0b1000_1000, 0b0101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 2465:885f:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0010_0100, 0b0110_0101, 0b1000_1000, 0b0101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 2465:885f:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_1101, 0b1011_0011, 0b1011_0010, 0b1010_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // db3:b2ad:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_1101, 0b1011_0011, 0b1011_0010, 0b1010_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // db3:b2ad:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_1011, 0b0110_1101, 0b0010_1000, 0b1010_0000, 0b0100_0111, 0b1100_1110, 0b0111_0100, 0b1010_1000,
                    0b0011_1000, 0b0000_0110, 0b0000_0000, 0b0000_0111, 0b0000_0101, 0b1101_1011, 0b0010_1011, 0b1110_1001
                }), // b6d:28a0:47ce:74a8:3806:7:5db:2be9
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_1011, 0b0110_1101, 0b0010_1000, 0b1010_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // b6d:28a1:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1110, 0b1011_1101, 0b0010_1100, 0b1000_0001, 0b0100_1111, 0b0110_1110, 0b0100_0101, 0b0001_1000,
                    0b0000_1011, 0b0001_0010, 0b1000_0110, 0b0101_1001, 0b0100_1111, 0b1111_1111, 0b1000_0011, 0b0010_1100
                }), // cebd:2c81:4f6e:4518:b12:8659:4fff:832c
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_1110, 0b1011_1101, 0b0010_1100, 0b1000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // cebd:2c81:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_0000, 0b0001_1100, 0b0011_1101, 0b1000_0110, 0b0101_0011, 0b0001_0000, 0b0010_0000, 0b1000_0000,
                    0b1001_0101, 0b1111_1000, 0b0111_1110, 0b0110_0100, 0b1001_1111, 0b1101_1010, 0b0101_0110, 0b1100_0101
                }), // 701c:3d86:5310:2080:95f8:7e64:9fda:56c5
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_0000, 0b0001_1100, 0b0011_1101, 0b1000_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 701c:3d87:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0000, 0b1010_0011, 0b1000_0001, 0b1011_0011, 0b1111_1000, 0b0101_1001, 0b0010_0101, 0b0100_0111,
                    0b0011_1000, 0b0111_1111, 0b0010_1010, 0b0011_1101, 0b1101_0001, 0b1001_1000, 0b1010_1110, 0b0001_1111
                }), // 30a3:81b3:f859:2547:387f:2a3d:d198:ae1f
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_0000, 0b1010_0011, 0b1000_0001, 0b1011_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 30a3:81b3:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1011_0010, 0b0010_1111, 0b0000_1111, 0b0001_0101,
                    0b0010_0011, 0b0000_0011, 0b1100_0100, 0b0100_0101, 0b0101_0101, 0b1000_0111, 0b1011_0110, 0b0001_1010
                }), // 0:1:b22f:f15:2303:c445:5587:b61a
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0010_1001, 0b1011_1111, 0b1111_0111, 0b0101_1110,
                    0b0001_0111, 0b1100_1101, 0b0101_1110, 0b0011_1010, 0b1011_0100, 0b0101_0111, 0b0010_1011, 0b1101_1111
                }), // ::29bf:f75e:17cd:5e3a:b457:2bdf
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)31
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
            );

            #endregion

            #region prefixLength = 30 (Net mask: 255.255.255.252)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100 }), // 255.255.255.252
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0010, 0b0011_0011, 0b1111_0111, 0b1110_1100 }), // 66.51.247.236
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0010, 0b0011_0011, 0b1111_0111, 0b1110_1111 }) // 66.51.247.239
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1000, 0b0101_1001, 0b1000_1100, 0b1000_1000 }), // 232.89.140.136
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_1000, 0b0101_1001, 0b1000_1100, 0b1000_1011 }) // 232.89.140.139
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0110, 0b0111_0100, 0b1000_1100, 0b1010_1101 }), // 246.116.140.173
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0110, 0b0111_0100, 0b1000_1100, 0b1010_1111 }) // 246.116.140.175
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_1001, 0b0001_0111, 0b1110_1110, 0b1001_0001 }), // 25.23.238.145
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b0001_1001, 0b0001_0111, 0b1110_1110, 0b1001_0011 }) // 25.23.238.147
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }), // 0.0.0.1
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011 }) // 0.0.0.3
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)30
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011 }) // 0.0.0.3
            );

            #endregion

            #region prefixLength = 25 (Net mask: 255.255.255.128)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000 }), // 255.255.255.128
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_1101, 0b0100_0100, 0b1010_0101, 0b1000_0000 }), // 45.68.165.128
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0010_1101, 0b0100_0100, 0b1010_0101, 0b1111_1111 }) // 45.68.165.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_0001, 0b1011_1011, 0b1011_0001, 0b0000_0000 }), // 81.187.177.0
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_0001, 0b1011_1011, 0b1011_0001, 0b0111_1111 }) // 81.187.177.127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1110, 0b0110_0101, 0b0110_1010, 0b0001_1111 }), // 206.101.106.31
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1100_1110, 0b0110_0101, 0b0110_1010, 0b0111_1111 }) // 206.101.106.127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b1100_0001, 0b1001_0101, 0b0111_0011 }), // 0.193.149.115
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b1100_0001, 0b1001_0101, 0b0111_1111 }) // 0.193.149.127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1101, 0b1101_0000, 0b1011_1011, 0b1000_1111 }), // 61.208.187.143
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1101, 0b1101_0000, 0b1011_1011, 0b1111_1111 }) // 61.208.187.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_0000, 0b0111_0100, 0b0110_0010, 0b1110_1010 }), // 192.116.98.234
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b1100_0000, 0b0111_0100, 0b0110_0010, 0b1111_1111 }) // 192.116.98.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1010 }), // 0.0.0.122
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }) // 0.0.0.127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0001_0000 }), // 0.0.0.16
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }) // 0.0.0.127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)25
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }) // 0.0.0.127
            );

            #endregion

            #region prefixLength = 24 (Net mask: 255.255.255.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000 }), // 255.255.255.0
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1001, 0b1010_1110, 0b0111_0101, 0b0000_0000 }), // 57.174.117.0
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1001, 0b1010_1110, 0b0111_0101, 0b1111_1111 }) // 57.174.117.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0110, 0b0111_0000, 0b0001_1100, 0b0000_0000 }), // 6.112.28.0
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0110, 0b0111_0000, 0b0001_1100, 0b1111_1111 }) // 6.112.28.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0110, 0b1111_1011, 0b1011_0010, 0b0110_1001 }), // 6.251.178.105
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0110, 0b1111_1011, 0b1011_0010, 0b1111_1111 }) // 6.251.178.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_0100, 0b0011_1100, 0b0101_0100, 0b1101_1010 }), // 20.60.84.218
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0001_0100, 0b0011_1100, 0b0101_0100, 0b1111_1111 }) // 20.60.84.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_1101, 0b1011_1011, 0b0001_1011, 0b0100_1001 }), // 45.187.27.73
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0010_1101, 0b1011_1011, 0b0001_1011, 0b1111_1111 }) // 45.187.27.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_0111, 0b0110_0111, 0b0111_0011, 0b1010_1011 }), // 39.103.115.171
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0010_0111, 0b0110_0111, 0b0111_0011, 0b1111_1111 }) // 39.103.115.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1000 }), // 0.0.0.248
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }) // 0.0.0.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0001_0011 }), // 0.0.0.19
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }) // 0.0.0.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)24
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }) // 0.0.0.255
            );

            #endregion

            #region prefixLength = 23 (Net mask: 255.255.254.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000 }), // 255.255.254.0
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0111, 0b0011_1011, 0b0111_1110, 0b0000_0000 }), // 167.59.126.0
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b1010_0111, 0b0011_1011, 0b0111_1111, 0b1111_1111 }) // 167.59.127.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1001, 0b0000_0110, 0b0101_1100, 0b0000_0000 }), // 249.6.92.0
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1001, 0b0000_0110, 0b0101_1101, 0b1111_1111 }) // 249.6.93.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_1010, 0b0110_1001, 0b1000_1000, 0b1000_0001 }), // 106.105.136.129
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0110_1010, 0b0110_1001, 0b1000_1001, 0b1111_1111 }) // 106.105.137.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_1010, 0b1001_0110, 0b1010_1001, 0b1111_1001 }), // 90.150.169.249
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_1010, 0b1001_0110, 0b1010_1001, 0b1111_1111 }) // 90.150.169.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_1000, 0b0110_1011, 0b1000_0110, 0b0101_0110 }), // 216.107.134.86
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b1101_1000, 0b0110_1011, 0b1000_0111, 0b1111_1111 }) // 216.107.135.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_0011, 0b1110_1101, 0b0001_0111, 0b1010_0111 }), // 83.237.23.167
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_0011, 0b1110_1101, 0b0001_0111, 0b1111_1111 }) // 83.237.23.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b0011_1111 }), // 0.0.1.63
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }) // 0.0.1.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0110_1001 }), // 0.0.0.105
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }) // 0.0.1.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)23
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }) // 0.0.1.255
            );

            #endregion

            #region prefixLength = 9 (Net mask: 255.128.0.0; ff80::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 255.128.0.0
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0100, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 244.128.0.0
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 244.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 147.0.0.0
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1001_0011, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 147.127.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1111, 0b0000_1101, 0b1011_1110, 0b1101_0111 }), // 63.13.190.215
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1111, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 63.127.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1100, 0b0111_0100, 0b0100_1000, 0b0110_0010 }), // 236.116.72.98
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_1100, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 236.127.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0110, 0b1011_0101, 0b0000_0100, 0b0001_0100 }), // 246.181.4.20
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 246.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1110, 0b1110_0011, 0b1010_0111, 0b0000_0111 }), // 126.227.167.7
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 126.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0100_1000, 0b1001_1010, 0b1100_0011 }), // 0.72.154.195
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 0.127.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_1101, 0b1001_0101, 0b0111_1010 }), // 0.13.149.122
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 0.127.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 0.127.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff80::
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // a6ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1010_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // a6ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1101, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ed7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1110_1101, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ed7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_0111, 0b0010_1001, 0b0111_1101, 0b0000_0100, 0b0110_1110, 0b0111_0101, 0b0010_1010, 0b1011_0110,
                    0b1111_0101, 0b1000_0111, 0b1001_1110, 0b0001_1000, 0b1010_0101, 0b1010_1001, 0b1110_1010, 0b1011_0100
                }), // f729:7d04:6e75:2ab6:f587:9e18:a5a9:eab4
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_0111, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // f77f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1110, 0b0100_1000, 0b0001_0101, 0b0010_0100, 0b0110_0110, 0b1110_0100, 0b0101_1010, 0b0100_0011,
                    0b1110_1010, 0b1010_0001, 0b0010_1000, 0b0011_1100, 0b0000_1100, 0b0001_0011, 0b1000_0111, 0b1011_0110
                }), // 6e48:1524:66e4:5a43:eaa1:283c:c13:87b6
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0110_1110, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 6e7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0011, 0b1011_0010, 0b0100_0000, 0b1000_0111, 0b1011_0001, 0b1000_0010, 0b1110_0100, 0b1000_1000,
                    0b0010_0110, 0b0001_1000, 0b1111_1100, 0b1011_0011, 0b1100_0100, 0b0110_0101, 0b1100_0101, 0b1111_0011
                }), // 33b2:4087:b182:e488:2618:fcb3:c465:c5f3
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 33ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_1100, 0b1101_0000, 0b1010_0101, 0b1001_1010, 0b0101_1010, 0b0110_0111, 0b0101_0011, 0b1001_1000,
                    0b0111_0111, 0b0001_1010, 0b1001_0100, 0b0001_0000, 0b0100_1000, 0b1011_0101, 0b1110_0111, 0b1010_1110
                }), // acd0:a59a:5a67:5398:771a:9410:48b5:e7ae
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1010_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // acff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0100_0100, 0b1111_0011, 0b0011_0010, 0b1100_0001, 0b1011_0101, 0b1000_0001, 0b1111_0010,
                    0b1011_1011, 0b0001_1001, 0b1001_0100, 0b1000_1100, 0b0000_1010, 0b0010_0110, 0b1001_1010, 0b1010_0000
                }), // 44:f332:c1b5:81f2:bb19:948c:a26:9aa0
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0011_1001, 0b0100_1101, 0b1001_0001, 0b1101_1110, 0b1110_0000, 0b1101_0111, 0b1000_0100,
                    0b1000_0111, 0b1000_1000, 0b1011_1010, 0b1011_0100, 0b1101_1101, 0b0001_0000, 0b1101_0101, 0b0100_1110
                }), // 39:4d91:dee0:d784:8788:bab4:dd10:d54e
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)9
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            #endregion

            #region prefixLength = 8 (Net mask: 255.0.0.0; ff00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 255.0.0.0
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 191.0.0.0
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 191.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 60.0.0.0
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 60.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0100, 0b0111_1101, 0b1101_0000, 0b1101_1000 }), // 164.125.208.216
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1010_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 164.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_1000, 0b1000_1011, 0b1111_1111, 0b0010_1010 }), // 136.139.255.42
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_1000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 136.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_1001, 0b0000_1011, 0b0100_0000, 0b1110_1100 }), // 105.11.64.236
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0110_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 105.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0001, 0b1101_0011, 0b1010_1100, 0b1101_0100 }), // 129.211.172.212
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 129.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b1010_1100, 0b1001_1011, 0b1011_1011 }), // 0.172.155.187
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 0.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0100_1110, 0b0101_0011, 0b1101_1111 }), // 0.78.83.223
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 0.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 0.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff00::
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 9fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 9fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 4cff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0100_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 4cff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_1100, 0b0001_0101, 0b1111_1111, 0b1010_0100, 0b1111_1001, 0b0000_1111, 0b0100_1100, 0b0010_0101,
                    0b1110_0100, 0b1100_1000, 0b1111_0110, 0b0000_0111, 0b0001_1000, 0b1101_1110, 0b0110_1000, 0b1100_1010
                }), // 1c15:ffa4:f90f:4c25:e4c8:f607:18de:68ca
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1cff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0110, 0b1010_1111, 0b1010_0011, 0b1100_1110, 0b1001_0111, 0b0100_0011, 0b1000_1001, 0b1101_0000,
                    0b0010_1100, 0b0001_0011, 0b0001_0101, 0b1101_0011, 0b0000_0011, 0b0001_1111, 0b0001_1010, 0b0010_0101
                }), // 16af:a3ce:9743:89d0:2c13:15d3:31f:1a25
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0001_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 16ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1101, 0b0010_0011, 0b1011_1011, 0b1101_0000, 0b0001_0010, 0b1111_0101, 0b1101_0010, 0b1001_1010,
                    0b1001_1111, 0b1011_1010, 0b1111_0101, 0b1100_0110, 0b0100_0001, 0b0001_0011, 0b1011_0100, 0b1010_0010
                }), // dd23:bbd0:12f5:d29a:9fba:f5c6:4113:b4a2
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ddff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1011, 0b1101_0011, 0b0001_1111, 0b0111_1000, 0b0011_1111, 0b1100_0111, 0b0111_0001, 0b0000_0000,
                    0b0111_0100, 0b0101_0111, 0b1000_0011, 0b1010_1101, 0b1001_0010, 0b1110_0001, 0b0001_0111, 0b1011_1000
                }), // cbd3:1f78:3fc7:7100:7457:83ad:92e1:17b8
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1100_1011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // cbff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_0010, 0b1110_0110, 0b0011_0001, 0b0011_1000, 0b0000_0111, 0b0101_1010, 0b1010_0111,
                    0b1111_1001, 0b0000_0111, 0b0110_0101, 0b0011_1100, 0b0011_1101, 0b0100_0111, 0b0000_1011, 0b0101_0011
                }), // f2:e631:3807:5aa7:f907:653c:3d47:b53
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_0001, 0b0101_1011, 0b1001_1101, 0b1011_1100, 0b1110_0011, 0b0010_1100, 0b0111_0000,
                    0b1000_1000, 0b1001_1000, 0b0110_0111, 0b1001_0010, 0b1010_0000, 0b1100_0111, 0b1110_1000, 0b0011_0001
                }), // 71:5b9d:bce3:2c70:8898:6792:a0c7:e831
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)8
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            #endregion

            #region prefixLength = 7 (Net mask: 254.0.0.0; fe00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 254.0.0.0
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 46.0.0.0
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0010_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 47.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 176.0.0.0
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 177.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_0100, 0b0101_0100, 0b1001_1101, 0b0010_1101 }), // 52.84.157.45
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 53.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_1101, 0b0001_0110, 0b0110_1011, 0b0011_0010 }), // 93.22.107.50
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 93.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0010, 0b0001_0100, 0b1111_1110, 0b0011_0010 }), // 242.20.254.50
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 243.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0011, 0b1001_1110, 0b1110_1011, 0b1110_1010 }), // 243.158.235.234
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 243.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0001, 0b1010_0111, 0b1010_1010, 0b0000_0111 }), // 1.167.170.7
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 1.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0111_0101, 0b0000_0110, 0b0000_1000 }), // 0.117.6.8
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 1.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 1.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // fe00::
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 63ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0110_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 63ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ddff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ddff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1100, 0b0100_0011, 0b0110_1110, 0b1110_1001, 0b0010_1100, 0b0001_0011, 0b1100_0001, 0b1100_0010,
                    0b1111_0101, 0b1100_1011, 0b0000_0111, 0b0110_0101, 0b0011_1111, 0b1110_1011, 0b0111_1010, 0b0011_1011
                }), // dc43:6ee9:2c13:c1c2:f5cb:765:3feb:7a3b
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1101_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ddff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_1101, 0b0110_0110, 0b0000_1111, 0b1010_1011, 0b0000_1000, 0b1110_0101, 0b1001_1010, 0b0000_1011,
                    0b0100_0000, 0b0010_1101, 0b1110_1000, 0b1101_1111, 0b1101_0101, 0b0001_1100, 0b0101_0110, 0b0001_1001
                }), // 9d66:fab:8e5:9a0b:402d:e8df:d51c:5619
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 9dff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_1010, 0b0111_0001, 0b1001_0010, 0b1001_1110, 0b1101_0010, 0b0111_1001, 0b1110_0011, 0b0001_0010,
                    0b0100_0100, 0b1111_1010, 0b0100_0011, 0b1010_1101, 0b1101_0101, 0b0100_1010, 0b1100_1111, 0b1000_0111
                }), // 9a71:929e:d279:e312:44fa:43ad:d54a:cf87
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1001_1011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 9bff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_0011, 0b1011_0000, 0b0000_0010, 0b0001_0010, 0b0010_0100, 0b0100_0001, 0b1000_0000, 0b0101_0100,
                    0b1011_0100, 0b0010_1100, 0b1000_0000, 0b0001_1101, 0b0110_0100, 0b1000_1000, 0b0100_1101, 0b0010_0000
                }), // 73b0:212:2441:8054:b42c:801d:6488:4d20
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 73ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1000_0001, 0b1100_0111, 0b1010_1001, 0b0010_0100, 0b0110_0010, 0b1111_0000, 0b1000_0010,
                    0b0100_1101, 0b1101_1100, 0b0100_1011, 0b1111_0101, 0b0000_1011, 0b0001_0101, 0b0010_1111, 0b0111_0001
                }), // 181:c7a9:2462:f082:4ddc:4bf5:b15:2f71
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0110_1010, 0b1110_0001, 0b1010_0110, 0b1100_1010, 0b1000_0001, 0b1011_1110, 0b1100_1100,
                    0b1111_1111, 0b0000_1000, 0b0100_1010, 0b1101_0011, 0b0000_0011, 0b0100_1001, 0b0111_1111, 0b1100_0111
                }), // 6a:e1a6:ca81:becc:ff08:4ad3:349:7fc7
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)7
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            #endregion

            #region prefixLength = 2 (Net mask: 192.0.0.0; c000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 192.0.0.0
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0000, 0b0111_0101, 0b0000_0110, 0b0000_1000 }), // 64.117.6.8
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_0111, 0b0100_0110, 0b1010_1100, 0b1100_1111 }), // 119.70.172.207
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1011, 0b1010_1111, 0b0101_1010, 0b1011_0010 }), // 155.175.90.178
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 191.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0100, 0b0100_0101, 0b0010_0111, 0b1010_0111 }), // 180.69.39.167
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 191.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1111, 0b0011_1110, 0b0010_0011, 0b1010_0111 }), // 63.62.35.167
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 63.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0001, 0b0010_1110, 0b0011_1110, 0b1101_0001 }), // 1.46.62.209
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 63.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 63.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // c000::
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0110_1010, 0b1110_0001, 0b1010_0110, 0b1100_1010, 0b1000_0001, 0b1011_1110, 0b1100_1100,
                    0b1111_1111, 0b0000_1000, 0b0100_1010, 0b1101_0011, 0b0100_0011, 0b0100_1001, 0b0111_1111, 0b1100_0111
                }), // 6a:e1a6:ca81:becc:ff08:4ad3:4349:7fc7
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1110, 0b1101_0011, 0b0000_1101, 0b0011_1100, 0b0110_0001, 0b1101_1010, 0b1111_0010, 0b0101_1100,
                    0b1100_1110, 0b1110_0110, 0b1001_1011, 0b1100_1001, 0b0110_1001, 0b1101_1010, 0b0001_0011, 0b0101_1000
                }), // 2ed3:d3c:61da:f25c:cee6:9bc9:69da:1358
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0110, 0b0010_1110, 0b0100_1100, 0b1011_0000, 0b1001_0100, 0b0001_0000, 0b1100_1101, 0b0000_1101,
                    0b0111_0001, 0b1010_1011, 0b0111_0010, 0b0010_0000, 0b1110_0000, 0b0001_0000, 0b1100_0100, 0b1111_1001
                }), // 162e:4cb0:9410:cd0d:71ab:7220:e010:c4f9
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0111, 0b0011_1110, 0b0110_1001, 0b1111_1111, 0b1000_1010, 0b1110_0011, 0b0011_1110, 0b1101_1000,
                    0b0111_0100, 0b0000_1110, 0b1011_0101, 0b1010_1011, 0b1001_1100, 0b0000_1101, 0b0010_1100, 0b1111_0111
                }), // 273e:69ff:8ae3:3ed8:740e:b5ab:9c0d:2cf7
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0010, 0b1110_0011, 0b1001_0000, 0b0011_1010, 0b1010_0111, 0b1011_0001, 0b0011_0100, 0b0001_1101,
                    0b0100_1100, 0b1101_1110, 0b0001_1100, 0b0000_0100, 0b1010_1000, 0b0111_0011, 0b1011_1010, 0b1000_0011
                }), // 22e3:903a:a7b1:341d:4cde:1c04:a873:ba83
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0100, 0b0010_1001, 0b1001_0110, 0b0110_0011, 0b0010_1011, 0b1100_1101, 0b1011_1110, 0b1110_0010,
                    0b1010_1010, 0b1010_1010, 0b0100_1110, 0b0010_0011, 0b1010_0001, 0b1001_1111, 0b1010_1010, 0b1111_0010
                }), // 1429:9663:2bcd:bee2:aaaa:4e23:a19f:aaf2
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)2
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            #endregion

            #region prefixLength = 1 (Net mask: 128.0.0.0; 8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0110, 0b0000_0010, 0b0000_1110, 0b1111_0001 }), // 166.2.14.241
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1110, 0b0001_0100, 0b1100_0010, 0b0001_0110 }), // 254.20.194.22
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_0001, 0b1100_1101, 0b0101_1000, 0b0010_0111 }), // 81.205.88.39
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_1001, 0b0010_1000, 0b1100_0000, 0b0101_0110 }), // 9.40.192.86
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8000::
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_1101, 0b0011_1100, 0b1111_0100, 0b1010_1010, 0b0101_0000, 0b0101_1100, 0b0111_0111, 0b0100_0001,
                    0b1111_1000, 0b0001_1011, 0b0111_1010, 0b0111_1100, 0b1101_0111, 0b1000_0001, 0b0010_0011, 0b0111_0011
                }), // 9d3c:f4aa:505c:7741:f81b:7a7c:d781:2373
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1111, 0b1001_1001, 0b1011_1011, 0b0011_0100, 0b0110_1111, 0b0001_0000, 0b1000_1011, 0b0101_0100,
                    0b0100_0010, 0b0000_0101, 0b1100_1101, 0b1001_0100, 0b1010_1111, 0b0101_0101, 0b0111_1111, 0b0110_0011
                }), // df99:bb34:6f10:8b54:4205:cd94:af55:7f63
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1000, 0b1100_0000, 0b1101_1101, 0b1000_1000, 0b1001_1111, 0b1111_0111, 0b1010_1011, 0b0110_1000,
                    0b1101_0010, 0b0011_0011, 0b0100_0010, 0b1101_1100, 0b0010_1011, 0b1010_1101, 0b0000_1000, 0b1000_0000
                }), // 68c0:dd88:9ff7:ab68:d233:42dc:2bad:880
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1111, 0b0000_0011, 0b1001_0100, 0b0011_1111, 0b0001_0111, 0b1010_1111, 0b1000_1011, 0b1010_0110,
                    0b1010_1111, 0b1001_0011, 0b1110_0100, 0b1011_0110, 0b1001_1111, 0b0011_0001, 0b0011_1011, 0b1010_0011
                }), // 2f03:943f:17af:8ba6:af93:e4b6:9f31:3ba3
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)1
            )
            .Returns(
                new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            );
            #endregion

        }

        public static System.Collections.IEnumerable GetGetLastAddressInBlockTest2Data()
        {
            #region prefixLength = 128 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1001, 0b1000_0101, 0b1000_1010, 0b1010_0000, 0b0000_0011, 0b0000_0110, 0b1010_1110, 0b0001_1010,
                    0b0101_1111, 0b0010_1111, 0b1010_0011, 0b1101_0000, 0b0011_0100, 0b1010_1011, 0b0110_0110, 0b1101_0100
                }), // 2985:8aa0:306:ae1a:5f2f:a3d0:34ab:66d4
                (byte)128
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)128
            );

            #endregion

            #region prefixLength = 127 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_0000, 0b1010_0101, 0b1011_0011, 0b0010_0111, 0b1001_1011, 0b1110_0010, 0b1001_1110, 0b0110_0110,
                    0b1101_1000, 0b0010_1000, 0b0101_0100, 0b0111_1100, 0b1101_0010, 0b0000_0001, 0b0110_1011, 0b1100_1111
                }), // 50a5:b327:9be2:9e66:d828:547c:d201:6bcf
                (byte)127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b0001_1000, 0b1111_1010, 0b1110_0100, 0b1001_1001, 0b1101_1101, 0b0001_0001, 0b0100_0101,
                    0b1000_1100, 0b0000_1011, 0b0011_0101, 0b0000_0111, 0b0011_1101, 0b0001_0010, 0b1011_0111, 0b1000_0001
                }), // 118:fae4:99dd:1145:8c0b:3507:3d12:b781
                (byte)127
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001
                }), // ::1
                (byte)127
            );

            #endregion

            #region prefixLength = 126 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0101, 0b0111_1000, 0b1101_1001, 0b0111_0001, 0b1010_1011, 0b1110_1001, 0b0100_0000, 0b1110_1101,
                    0b0111_1100, 0b0101_1000, 0b1110_0001, 0b1011_1001, 0b0101_1010, 0b0101_0010, 0b0001_0111, 0b1100_0111
                }), // 1578:d971:abe9:40ed:7c58:e1b9:5a52:17c7
                (byte)126
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1011, 0b1011_0100, 0b1001_0001, 0b1010_1011, 0b1011_0100, 0b0111_0010, 0b1110_1110, 0b0100_0010,
                    0b1011_1001, 0b0101_1101, 0b1111_1111, 0b0101_0111, 0b1101_0100, 0b1110_0101, 0b1110_1101, 0b1010_0011
                }), // 6bb4:91ab:b472:ee42:b95d:ff57:d4e5:eda3
                (byte)126
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }), // ::3
                (byte)126
            );

            #endregion

            #region prefixLength = 121 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_0011, 0b0101_1110, 0b1100_1010, 0b1111_0001, 0b0100_1010, 0b1011_0111, 0b1010_0101, 0b0110_1100,
                    0b0100_0110, 0b1100_0001, 0b1000_0110, 0b1010_0010, 0b1010_1111, 0b1011_0011, 0b0101_0101, 0b1111_1111
                }), // 835e:caf1:4ab7:a56c:46c1:86a2:afb3:55ff
                (byte)121
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_0011, 0b1011_0001, 0b0111_1011, 0b1010_1000, 0b1000_1010, 0b0000_1011, 0b1111_1000, 0b1010_0010,
                    0b0101_1101, 0b1101_1010, 0b1000_0010, 0b1111_1010, 0b1000_0011, 0b1011_0000, 0b0100_0001, 0b0111_1111
                }), // f3b1:7ba8:8a0b:f8a2:5dda:82fa:83b0:417f
                (byte)121
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }), // ::7f
                (byte)121
            );

            #endregion

            #region prefixLength = 120 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0010, 0b0101_1011, 0b0010_1011, 0b1110_0011, 0b1010_1011, 0b1011_1001, 0b1100_1101, 0b0101_0001,
                    0b0101_0010, 0b1101_0001, 0b1011_1011, 0b0100_1011, 0b1000_1111, 0b0010_0010, 0b0110_1011, 0b1111_1111
                }), // 25b:2be3:abb9:cd51:52d1:bb4b:8f22:6bff
                (byte)120
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_1111, 0b0000_0000, 0b1010_1011, 0b1111_0000, 0b1101_0101, 0b0100_0000, 0b1011_1000, 0b0110_1111,
                    0b0111_0110, 0b0010_1000, 0b1010_1110, 0b0101_1111, 0b1110_1001, 0b0100_0111, 0b1001_1000, 0b1111_1111
                }), // 1f00:abf0:d540:b86f:7628:ae5f:e947:98ff
                (byte)120
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }), // ::ff
                (byte)120
            );

            #endregion

            #region prefixLength = 119 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1100, 0b1000_0110, 0b1101_1111, 0b0001_1011, 0b0010_0100, 0b1111_1101, 0b1000_0101, 0b0010_1011,
                    0b1100_1110, 0b1010_0100, 0b0000_1000, 0b0011_1001, 0b1101_0011, 0b1101_1001, 0b1111_1111, 0b1111_1111
                }), // 7c86:df1b:24fd:852b:cea4:839:d3d9:ffff
                (byte)119
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0101, 0b1101_0111, 0b1110_0110, 0b1001_0111, 0b1111_1100, 0b0101_1101, 0b1111_0111, 0b0001_1101,
                    0b1010_0111, 0b0101_0100, 0b1111_0010, 0b1111_0000, 0b1000_1110, 0b1010_1111, 0b1011_0001, 0b1111_1111
                }), // b5d7:e697:fc5d:f71d:a754:f2f0:8eaf:b1ff
                (byte)119
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }), // ::1ff
                (byte)119
            );

            #endregion

            #region prefixLength = 33 (Net mask: ffff:ffff:8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1000, 0b0001_0101, 0b0001_1101, 0b0011_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // c815:1d30:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1001, 0b0011_0101, 0b0001_1001, 0b1010_1000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // f935:19a8:7fff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ::7fff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            );

            #endregion

            #region prefixLength = 32 (Net mask: 255.255.255.255; ffff:ffff::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_0000, 0b0110_0000, 0b0000_1110, 0b0010_0111 }), // 96.96.14.39
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0101, 0b0001_0011, 0b1011_1110, 0b1101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 2513:bedf:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1011, 0b0101_1011, 0b0101_0010, 0b1111_1000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 6b5b:52f8:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ::ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            );

            #endregion

            #region prefixLength = 31 (Net mask: 255.255.255.254; ffff:fffe::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1111, 0b0001_0000, 0b0010_1011, 0b1000_1011 }), // 239.16.43.139
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_1110, 0b0101_1000, 0b1000_0001, 0b1101_0101 }), // 110.88.129.213
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }), // 0.0.0.1
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1101, 0b1111_0100, 0b0101_1111, 0b1101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 4df4:5fdf:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0100, 0b1011_0110, 0b1011_1101, 0b1100_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // b4b6:bdc9:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            );

            #endregion

            #region prefixLength = 30 (Net mask: 255.255.255.252)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)30
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1110, 0b0100_1110, 0b1110_0111, 0b0110_0111 }), // 158.78.231.103
                (byte)30
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_1011, 0b1101_1010, 0b1010_0111, 0b0011_1011 }), // 171.218.167.59
                (byte)30
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011 }), // 0.0.0.3
                (byte)30
            );

            #endregion

            #region prefixLength = 25 (Net mask: 255.255.255.128)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)25
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0011, 0b1110_0001, 0b1110_1101, 0b1111_1111 }), // 3.225.237.255
                (byte)25
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0110, 0b1001_1100, 0b0011_1111, 0b0111_1111 }), // 246.156.63.127
                (byte)25
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }), // 0.0.0.127
                (byte)25
            );

            #endregion

            #region prefixLength = 24 (Net mask: 255.255.255.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)24
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_0101, 0b1011_0101, 0b1101_0001, 0b1111_1111 }), // 149.181.209.255
                (byte)24
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_0100, 0b1111_1001, 0b0101_1010, 0b1111_1111 }), // 36.249.90.255
                (byte)24
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }), // 0.0.0.255
                (byte)24
            );

            #endregion

            #region prefixLength = 23 (Net mask: 255.255.254.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)23
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0101, 0b0111_1111, 0b0011_0111, 0b1111_1111 }), // 181.127.55.255
                (byte)23
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1001, 0b1010_0100, 0b0100_1001, 0b1111_1111 }), // 121.164.73.255
                (byte)23
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }), // 0.0.1.255
                (byte)23
            );

            #endregion

            #region prefixLength = 9 (Net mask: 255.128.0.0; ff80::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 161.255.255.255
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0011, 0b0111_1111, 0b1111_1111, 0b1111_1111 }), // 243.127.255.255
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }), // 0.127.255.255
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 6fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0100, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // b47f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            );

            #endregion

            #region prefixLength = 8 (Net mask: 255.0.0.0; ff00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 73.255.255.255
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1010, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 122.255.255.255
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 0.255.255.255
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 79ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 2eff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            );

            #endregion

            #region prefixLength = 7 (Net mask: 254.0.0.0; fe00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_1011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 91.255.255.255
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 37.255.255.255
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 1.255.255.255
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 83ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // b9ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            );

            #endregion

            #region prefixLength = 2 (Net mask: 192.0.0.0; c000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 127.255.255.255
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 191.255.255.255
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 63.255.255.255
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)2
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)2
            );

            #endregion

            #region prefixLength = 1 (Net mask: 128.0.0.0; 8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)1
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 127.255.255.255
                (byte)1
            );

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)1
            );

            #endregion
        }

        public static System.Collections.IEnumerable GetGetIPAddressBlockExtentsTestData()
        {
            #region prefixLength = 0

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)0
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_1011, 0b1011_0100, 0b1010_0001, 0b1100_1100 }),
                (byte)0
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)0
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            ));

            #endregion

            #region prefixLength = 128 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)128
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0100, 0b0001_0001, 0b0100_1011, 0b0001_0011, 0b1000_0010, 0b1011_1110, 0b0111_0011, 0b1011_1111,
                    0b1001_0001, 0b1110_1110, 0b1101_0010, 0b0111_1000, 0b0010_0110, 0b1101_1110, 0b1001_1000, 0b0101_1100
                }), // 1411:4b13:82be:73bf:91ee:d278:26de:985c
                (byte)128
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0001_0100, 0b0001_0001, 0b0100_1011, 0b0001_0011, 0b1000_0010, 0b1011_1110, 0b0111_0011, 0b1011_1111,
                    0b1001_0001, 0b1110_1110, 0b1101_0010, 0b0111_1000, 0b0010_0110, 0b1101_1110, 0b1001_1000, 0b0101_1100
                }), // 1411:4b13:82be:73bf:91ee:d278:26de:985c
                Last: new IPAddress(new byte[]
                {
                    0b0001_0100, 0b0001_0001, 0b0100_1011, 0b0001_0011, 0b1000_0010, 0b1011_1110, 0b0111_0011, 0b1011_1111,
                    0b1001_0001, 0b1110_1110, 0b1101_0010, 0b0111_1000, 0b0010_0110, 0b1101_1110, 0b1001_1000, 0b0101_1100
                }) // 1411:4b13:82be:73bf:91ee:d278:26de:985c
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                (byte)128
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }) // ::
            ));

            #endregion

            #region prefixLength = 127 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe
                (byte)127
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)127
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1111, 0b0101_0111, 0b0110_0110, 0b0011_1001, 0b1110_0001, 0b1101_1110, 0b0111_0001, 0b1000_1010,
                    0b0111_0001, 0b1101_1001, 0b0111_1111, 0b0100_0010, 0b1110_0100, 0b0110_0101, 0b0000_1111, 0b1110_1010
                }), // 4f57:6639:e1de:718a:71d9:7f42:e465:fea
                (byte)127
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0100_1111, 0b0101_0111, 0b0110_0110, 0b0011_1001, 0b1110_0001, 0b1101_1110, 0b0111_0001, 0b1000_1010,
                    0b0111_0001, 0b1101_1001, 0b0111_1111, 0b0100_0010, 0b1110_0100, 0b0110_0101, 0b0000_1111, 0b1110_1010
                }), // 4f57:6639:e1de:718a:71d9:7f42:e465:fea
                Last: new IPAddress(new byte[]
                {
                    0b0100_1111, 0b0101_0111, 0b0110_0110, 0b0011_1001, 0b1110_0001, 0b1101_1110, 0b0111_0001, 0b1000_1010,
                    0b0111_0001, 0b1101_1001, 0b0111_1111, 0b0100_0010, 0b1110_0100, 0b0110_0101, 0b0000_1111, 0b1110_1011
                }) // 4f57:6639:e1de:718a:71d9:7f42:e465:feb
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1010, 0b0101_1001, 0b0110_0010, 0b0010_0000, 0b1001_1011, 0b0111_0110, 0b1001_0110, 0b1001_0011,
                    0b0111_0111, 0b1101_0111, 0b0101_0111, 0b1110_0110, 0b0110_0101, 0b0010_1111, 0b0101_0011, 0b0110_0111
                }), // fa59:6220:9b76:9693:77d7:57e6:652f:5367
                (byte)127
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1010, 0b0101_1001, 0b0110_0010, 0b0010_0000, 0b1001_1011, 0b0111_0110, 0b1001_0110, 0b1001_0011,
                    0b0111_0111, 0b1101_0111, 0b0101_0111, 0b1110_0110, 0b0110_0101, 0b0010_1111, 0b0101_0011, 0b0110_0110
                }), // fa59:6220:9b76:9693:77d7:57e6:652f:5366
                Last: new IPAddress(new byte[]
                {
                    0b1111_1010, 0b0101_1001, 0b0110_0010, 0b0010_0000, 0b1001_1011, 0b0111_0110, 0b1001_0110, 0b1001_0011,
                    0b0111_0111, 0b1101_0111, 0b0101_0111, 0b1110_0110, 0b0110_0101, 0b0010_1111, 0b0101_0011, 0b0110_0111
                }) // fa59:6220:9b76:9693:77d7:57e6:652f:5367
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1011, 0b0101_0010, 0b0010_0011, 0b1000_1011, 0b0000_0111, 0b0010_0111, 0b0000_0001, 0b1010_1010,
                    0b0100_0111, 0b0111_0110, 0b0010_1111, 0b0001_0101, 0b1011_1011, 0b1010_0101, 0b1001_0100, 0b1011_1100
                }), // eb52:238b:727:1aa:4776:2f15:bba5:94bc
                (byte)127
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1110_1011, 0b0101_0010, 0b0010_0011, 0b1000_1011, 0b0000_0111, 0b0010_0111, 0b0000_0001, 0b1010_1010,
                    0b0100_0111, 0b0111_0110, 0b0010_1111, 0b0001_0101, 0b1011_1011, 0b1010_0101, 0b1001_0100, 0b1011_1100
                }), // eb52:238b:727:1aa:4776:2f15:bba5:94bc
                Last: new IPAddress(new byte[]
                {
                    0b1110_1011, 0b0101_0010, 0b0010_0011, 0b1000_1011, 0b0000_0111, 0b0010_0111, 0b0000_0001, 0b1010_1010,
                    0b0100_0111, 0b0111_0110, 0b0010_1111, 0b0001_0101, 0b1011_1011, 0b1010_0101, 0b1001_0100, 0b1011_1101
                }) // eb52:238b:727:1aa:4776:2f15:bba5:94bd
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0001, 0b1000_1011, 0b0111_1110, 0b0010_0000, 0b1010_0010, 0b0110_1110, 0b0011_0000, 0b1010_0111,
                    0b1001_1111, 0b1011_0100, 0b1000_0101, 0b1101_1100, 0b1011_1001, 0b0110_1001, 0b1001_0101, 0b0101_1001
                }), // b18b:7e20:a26e:30a7:9fb4:85dc:b969:9559
                (byte)127
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1011_0001, 0b1000_1011, 0b0111_1110, 0b0010_0000, 0b1010_0010, 0b0110_1110, 0b0011_0000, 0b1010_0111,
                    0b1001_1111, 0b1011_0100, 0b1000_0101, 0b1101_1100, 0b1011_1001, 0b0110_1001, 0b1001_0101, 0b0101_1000
                }), // b18b:7e20:a26e:30a7:9fb4:85dc:b969:9558
                Last: new IPAddress(new byte[]
                {
                    0b1011_0001, 0b1000_1011, 0b0111_1110, 0b0010_0000, 0b1010_0010, 0b0110_1110, 0b0011_0000, 0b1010_0111,
                    0b1001_1111, 0b1011_0100, 0b1000_0101, 0b1101_1100, 0b1011_1001, 0b0110_1001, 0b1001_0101, 0b0101_1001
                }) // b18b:7e20:a26e:30a7:9fb4:85dc:b969:9559
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001
                }), // ::1
                (byte)127
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001
                }) // ::1
            ));

            #endregion

            #region prefixLength = 126 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffc
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1101, 0b1000_0111, 0b0100_1000, 0b0100_0110, 0b1010_1001, 0b0000_1100, 0b0101_0010, 0b1110_1010,
                    0b1110_1000, 0b1100_1111, 0b0110_0100, 0b0001_1001, 0b0111_1101, 0b0010_0110, 0b1111_0011, 0b1011_0100
                }), // cd87:4846:a90c:52ea:e8cf:6419:7d26:f3b4
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1100_1101, 0b1000_0111, 0b0100_1000, 0b0100_0110, 0b1010_1001, 0b0000_1100, 0b0101_0010, 0b1110_1010,
                    0b1110_1000, 0b1100_1111, 0b0110_0100, 0b0001_1001, 0b0111_1101, 0b0010_0110, 0b1111_0011, 0b1011_0100
                }), // cd87:4846:a90c:52ea:e8cf:6419:7d26:f3b4
                Last: new IPAddress(new byte[]
                {
                    0b1100_1101, 0b1000_0111, 0b0100_1000, 0b0100_0110, 0b1010_1001, 0b0000_1100, 0b0101_0010, 0b1110_1010,
                    0b1110_1000, 0b1100_1111, 0b0110_0100, 0b0001_1001, 0b0111_1101, 0b0010_0110, 0b1111_0011, 0b1011_0111
                }) // cd87:4846:a90c:52ea:e8cf:6419:7d26:f3b7
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_1000, 0b0011_1100, 0b0000_1011, 0b1011_0111, 0b0110_1110, 0b1100_0110, 0b1010_1001, 0b1110_1001,
                    0b1010_1100, 0b0001_0101, 0b0011_1111, 0b0010_0111, 0b1101_1010, 0b0100_0011, 0b1011_1100, 0b0011_1111
                }), // a83c:bb7:6ec6:a9e9:ac15:3f27:da43:bc3f
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1010_1000, 0b0011_1100, 0b0000_1011, 0b1011_0111, 0b0110_1110, 0b1100_0110, 0b1010_1001, 0b1110_1001,
                    0b1010_1100, 0b0001_0101, 0b0011_1111, 0b0010_0111, 0b1101_1010, 0b0100_0011, 0b1011_1100, 0b0011_1100
                }), // a83c:bb7:6ec6:a9e9:ac15:3f27:da43:bc3c
                Last: new IPAddress(new byte[]
                {
                    0b1010_1000, 0b0011_1100, 0b0000_1011, 0b1011_0111, 0b0110_1110, 0b1100_0110, 0b1010_1001, 0b1110_1001,
                    0b1010_1100, 0b0001_0101, 0b0011_1111, 0b0010_0111, 0b1101_1010, 0b0100_0011, 0b1011_1100, 0b0011_1111
                }) // a83c:bb7:6ec6:a9e9:ac15:3f27:da43:bc3f
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1011, 0b0110_0010, 0b0011_0100, 0b0010_1110, 0b0010_1001, 0b1000_0001, 0b1110_0000, 0b0001_0000,
                    0b0100_1101, 0b0011_0101, 0b1111_1110, 0b0110_0001, 0b0110_0111, 0b0101_0110, 0b0110_1100, 0b0100_1000
                }), // fb62:342e:2981:e010:4d35:fe61:6756:6c48
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1011, 0b0110_0010, 0b0011_0100, 0b0010_1110, 0b0010_1001, 0b1000_0001, 0b1110_0000, 0b0001_0000,
                    0b0100_1101, 0b0011_0101, 0b1111_1110, 0b0110_0001, 0b0110_0111, 0b0101_0110, 0b0110_1100, 0b0100_1000
                }), // fb62:342e:2981:e010:4d35:fe61:6756:6c48
                Last: new IPAddress(new byte[]
                {
                    0b1111_1011, 0b0110_0010, 0b0011_0100, 0b0010_1110, 0b0010_1001, 0b1000_0001, 0b1110_0000, 0b0001_0000,
                    0b0100_1101, 0b0011_0101, 0b1111_1110, 0b0110_0001, 0b0110_0111, 0b0101_0110, 0b0110_1100, 0b0100_1011
                }) // fb62:342e:2981:e010:4d35:fe61:6756:6c4b
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1111, 0b0100_1010, 0b0001_1010, 0b0010_1011, 0b0001_1011, 0b1100_0010, 0b0101_1111, 0b1101_1100,
                    0b0001_1011, 0b0100_0101, 0b0011_0110, 0b0010_1001, 0b0001_1001, 0b1110_0011, 0b1001_0111, 0b1010_1011
                }), // 4f4a:1a2b:1bc2:5fdc:1b45:3629:19e3:97ab
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0100_1111, 0b0100_1010, 0b0001_1010, 0b0010_1011, 0b0001_1011, 0b1100_0010, 0b0101_1111, 0b1101_1100,
                    0b0001_1011, 0b0100_0101, 0b0011_0110, 0b0010_1001, 0b0001_1001, 0b1110_0011, 0b1001_0111, 0b1010_1000
                }), // 4f4a:1a2b:1bc2:5fdc:1b45:3629:19e3:97a8
                Last: new IPAddress(new byte[]
                {
                    0b0100_1111, 0b0100_1010, 0b0001_1010, 0b0010_1011, 0b0001_1011, 0b1100_0010, 0b0101_1111, 0b1101_1100,
                    0b0001_1011, 0b0100_0101, 0b0011_0110, 0b0010_1001, 0b0001_1001, 0b1110_0011, 0b1001_0111, 0b1010_1011
                }) // 4f4a:1a2b:1bc2:5fdc:1b45:3629:19e3:97ab
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_1111, 0b0110_1000, 0b0101_0100, 0b1111_0100, 0b1100_0101, 0b1000_1001, 0b0010_0001, 0b0110_0100,
                    0b1000_1000, 0b0000_0000, 0b0100_0111, 0b1001_0111, 0b0110_0011, 0b0110_1100, 0b1111_0111, 0b0111_0001
                }), // 9f68:54f4:c589:2164:8800:4797:636c:f771
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1001_1111, 0b0110_1000, 0b0101_0100, 0b1111_0100, 0b1100_0101, 0b1000_1001, 0b0010_0001, 0b0110_0100,
                    0b1000_1000, 0b0000_0000, 0b0100_0111, 0b1001_0111, 0b0110_0011, 0b0110_1100, 0b1111_0111, 0b0111_0000
                }), // 9f68:54f4:c589:2164:8800:4797:636c:f770
                Last: new IPAddress(new byte[]
                {
                    0b1001_1111, 0b0110_1000, 0b0101_0100, 0b1111_0100, 0b1100_0101, 0b1000_1001, 0b0010_0001, 0b0110_0100,
                    0b1000_1000, 0b0000_0000, 0b0100_0111, 0b1001_0111, 0b0110_0011, 0b0110_1100, 0b1111_0111, 0b0111_0011
                }) // 9f68:54f4:c589:2164:8800:4797:636c:f773
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1001, 0b0111_1111, 0b1011_0111, 0b1100_1111, 0b1111_1011, 0b1111_1101, 0b1111_1101, 0b1111_1111,
                    0b1010_1111, 0b1110_1110, 0b1100_0111, 0b1111_1101, 0b1111_0001, 0b1111_0101, 0b0111_1100, 0b1110_0111
                }), // f97f:b7cf:fbfd:fdff:afee:c7fd:f1f5:7ce7
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1000, 0b0111_0001, 0b0011_0111, 0b0000_1100, 0b1111_1011, 0b1111_1001, 0b0111_1100, 0b1101_1100,
                    0b0010_1110, 0b1110_1110, 0b1100_0111, 0b0101_1000, 0b1101_0001, 0b1100_0100, 0b0111_1000, 0b1010_0000
                }), // f871:370c:fbf9:7cdc:2eee:c758:d1c4:78a0
                Last: new IPAddress(new byte[]
                {
                    0b1111_1000, 0b0111_0001, 0b0011_0111, 0b0000_1100, 0b1111_1011, 0b1111_1001, 0b0111_1100, 0b1101_1100,
                    0b0010_1110, 0b1110_1110, 0b1100_0111, 0b0101_1000, 0b1101_0001, 0b1100_0100, 0b0111_1000, 0b1010_0011
                }) // f871:370c:fbf9:7cdc:2eee:c758:d1c4:78a3
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_0111, 0b0011_1110, 0b1110_1101, 0b1011_0111, 0b0110_1011, 0b1110_1111, 0b1111_1101, 0b0110_1111,
                    0b1101_1110, 0b1110_0011, 0b1111_1111, 0b1111_1111, 0b1010_1111, 0b1101_1111, 0b1011_0110, 0b1010_0101
                }), // a73e:edb7:6bef:fd6f:dee3:ffff:afdf:b6a5
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1010_0011, 0b0010_0110, 0b1110_1101, 0b1001_0010, 0b0010_1011, 0b1110_0101, 0b1111_1001, 0b0100_1011,
                    0b0000_1110, 0b0010_0011, 0b1110_1001, 0b1101_1111, 0b0010_1000, 0b0101_1111, 0b1011_0110, 0b1010_0100
                }), // a326:ed92:2be5:f94b:e23:e9df:285f:b6a4
                Last: new IPAddress(new byte[]
                {
                    0b1010_0011, 0b0010_0110, 0b1110_1101, 0b1001_0010, 0b0010_1011, 0b1110_0101, 0b1111_1001, 0b0100_1011,
                    0b0000_1110, 0b0010_0011, 0b1110_1001, 0b1101_1111, 0b0010_1000, 0b0101_1111, 0b1011_0110, 0b1010_0111
                }) // a326:ed92:2be5:f94b:e23:e9df:285f:b6a7
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1111, 0b0011_1011, 0b1111_1111, 0b1011_1111, 0b0111_1111, 0b1011_1111, 0b0111_1010, 0b1100_1011,
                    0b0111_1111, 0b1111_1110, 0b1111_1011, 0b1101_1111, 0b0101_0111, 0b0100_0110, 0b0111_0100, 0b1110_1111
                }), // 7f3b:ffbf:7fbf:7acb:7ffe:fbdf:5746:74ef
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0101_0011, 0b0000_1001, 0b1111_0101, 0b0010_1011, 0b0111_1101, 0b1011_1111, 0b0101_1010, 0b1100_1011,
                    0b0001_1011, 0b1001_1010, 0b0110_1010, 0b0101_1111, 0b0000_0010, 0b0000_0100, 0b0010_0100, 0b0010_1100
                }), // 5309:f52b:7dbf:5acb:1b9a:6a5f:204:242c
                Last: new IPAddress(new byte[]
                {
                    0b0101_0011, 0b0000_1001, 0b1111_0101, 0b0010_1011, 0b0111_1101, 0b1011_1111, 0b0101_1010, 0b1100_1011,
                    0b0001_1011, 0b1001_1010, 0b0110_1010, 0b0101_1111, 0b0000_0010, 0b0000_0100, 0b0010_0100, 0b0010_1111
                }) // 5309:f52b:7dbf:5acb:1b9a:6a5f:204:242f
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }), // ::3
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }) // ::3
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1100, 0b0001_0111, 0b1111_1111, 0b0010_0110, 0b0101_1000, 0b1100_0100, 0b1111_0000, 0b1101_1001,
                    0b1011_1000, 0b0000_1010, 0b0111_1011, 0b1110_1000, 0b0011_1111, 0b1011_1111, 0b0010_1101, 0b1111_0010
                }), // 5c17:ff26:58c4:f0d9:b80a:7be8:3fbf:2df2
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }) // ::3
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001
                }), // ::1
                (byte)126
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011
                }) // ::3
            ));

            #endregion

            #region prefixLength = 121 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff80
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0111, 0b1101_0011, 0b0000_1111, 0b0011_1000, 0b1010_0101, 0b0111_0101, 0b0110_0101, 0b1101_1011,
                    0b0110_0100, 0b0101_1010, 0b1101_1100, 0b0000_0110, 0b1101_1111, 0b0100_0101, 0b1010_0110, 0b1000_0000
                }), // 17d3:f38:a575:65db:645a:dc06:df45:a680
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0001_0111, 0b1101_0011, 0b0000_1111, 0b0011_1000, 0b1010_0101, 0b0111_0101, 0b0110_0101, 0b1101_1011,
                    0b0110_0100, 0b0101_1010, 0b1101_1100, 0b0000_0110, 0b1101_1111, 0b0100_0101, 0b1010_0110, 0b1000_0000
                }), // 17d3:f38:a575:65db:645a:dc06:df45:a680
                Last: new IPAddress(new byte[]
                {
                    0b0001_0111, 0b1101_0011, 0b0000_1111, 0b0011_1000, 0b1010_0101, 0b0111_0101, 0b0110_0101, 0b1101_1011,
                    0b0110_0100, 0b0101_1010, 0b1101_1100, 0b0000_0110, 0b1101_1111, 0b0100_0101, 0b1010_0110, 0b1111_1111
                }) // 17d3:f38:a575:65db:645a:dc06:df45:a6ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0011, 0b1011_0100, 0b1100_1001, 0b1010_0111, 0b0001_1111, 0b1100_0000, 0b0000_1111, 0b1010_1000,
                    0b1010_1100, 0b1010_1000, 0b1011_0001, 0b1000_1100, 0b1111_1001, 0b1010_1001, 0b0010_1011, 0b1111_1111
                }), // 23b4:c9a7:1fc0:fa8:aca8:b18c:f9a9:2bff
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0010_0011, 0b1011_0100, 0b1100_1001, 0b1010_0111, 0b0001_1111, 0b1100_0000, 0b0000_1111, 0b1010_1000,
                    0b1010_1100, 0b1010_1000, 0b1011_0001, 0b1000_1100, 0b1111_1001, 0b1010_1001, 0b0010_1011, 0b1000_0000
                }), // 23b4:c9a7:1fc0:fa8:aca8:b18c:f9a9:2b80
                Last: new IPAddress(new byte[]
                {
                    0b0010_0011, 0b1011_0100, 0b1100_1001, 0b1010_0111, 0b0001_1111, 0b1100_0000, 0b0000_1111, 0b1010_1000,
                    0b1010_1100, 0b1010_1000, 0b1011_0001, 0b1000_1100, 0b1111_1001, 0b1010_1001, 0b0010_1011, 0b1111_1111
                }) // 23b4:c9a7:1fc0:fa8:aca8:b18c:f9a9:2bff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_1010, 0b1000_1011, 0b0111_1011, 0b0111_1111, 0b1011_0100, 0b1011_1111, 0b0011_0110, 0b1111_0001,
                    0b1011_0100, 0b1011_1100, 0b1101_0100, 0b0110_1110, 0b0110_1010, 0b0111_1001, 0b0110_1010, 0b0000_0000
                }), // ca8b:7b7f:b4bf:36f1:b4bc:d46e:6a79:6a00
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1100_1010, 0b1000_1011, 0b0111_1011, 0b0111_1111, 0b1011_0100, 0b1011_1111, 0b0011_0110, 0b1111_0001,
                    0b1011_0100, 0b1011_1100, 0b1101_0100, 0b0110_1110, 0b0110_1010, 0b0111_1001, 0b0110_1010, 0b0000_0000
                }), // ca8b:7b7f:b4bf:36f1:b4bc:d46e:6a79:6a00
                Last: new IPAddress(new byte[]
                {
                    0b1100_1010, 0b1000_1011, 0b0111_1011, 0b0111_1111, 0b1011_0100, 0b1011_1111, 0b0011_0110, 0b1111_0001,
                    0b1011_0100, 0b1011_1100, 0b1101_0100, 0b0110_1110, 0b0110_1010, 0b0111_1001, 0b0110_1010, 0b0111_1111
                }) // ca8b:7b7f:b4bf:36f1:b4bc:d46e:6a79:6a7f
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0100, 0b1001_0110, 0b1001_0011, 0b1101_1001, 0b1111_1110, 0b0100_1111, 0b0110_1010, 0b0101_1111,
                    0b1011_1111, 0b1100_1110, 0b0110_0110, 0b1111_1110, 0b0101_1110, 0b1110_0000, 0b1011_0011, 0b0111_1111
                }), // e496:93d9:fe4f:6a5f:bfce:66fe:5ee0:b37f
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1110_0100, 0b1001_0110, 0b1001_0011, 0b1101_1001, 0b1111_1110, 0b0100_1111, 0b0110_1010, 0b0101_1111,
                    0b1011_1111, 0b1100_1110, 0b0110_0110, 0b1111_1110, 0b0101_1110, 0b1110_0000, 0b1011_0011, 0b0000_0000
                }), // e496:93d9:fe4f:6a5f:bfce:66fe:5ee0:b300
                Last: new IPAddress(new byte[]
                {
                    0b1110_0100, 0b1001_0110, 0b1001_0011, 0b1101_1001, 0b1111_1110, 0b0100_1111, 0b0110_1010, 0b0101_1111,
                    0b1011_1111, 0b1100_1110, 0b0110_0110, 0b1111_1110, 0b0101_1110, 0b1110_0000, 0b1011_0011, 0b0111_1111
                }) // e496:93d9:fe4f:6a5f:bfce:66fe:5ee0:b37f
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_1000, 0b0100_1100, 0b0101_1100, 0b0011_0001, 0b1010_1111, 0b0011_1010, 0b1100_1100, 0b0110_1000,
                    0b1010_1101, 0b1110_0110, 0b1011_0101, 0b0110_1101, 0b0100_1100, 0b0100_0100, 0b1111_0011, 0b0011_1100
                }), // 484c:5c31:af3a:cc68:ade6:b56d:4c44:f33c
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0100_1000, 0b0100_1100, 0b0101_1100, 0b0011_0001, 0b1010_1111, 0b0011_1010, 0b1100_1100, 0b0110_1000,
                    0b1010_1101, 0b1110_0110, 0b1011_0101, 0b0110_1101, 0b0100_1100, 0b0100_0100, 0b1111_0011, 0b0000_0000
                }), // 484c:5c31:af3a:cc68:ade6:b56d:4c44:f300
                Last: new IPAddress(new byte[]
                {
                    0b0100_1000, 0b0100_1100, 0b0101_1100, 0b0011_0001, 0b1010_1111, 0b0011_1010, 0b1100_1100, 0b0110_1000,
                    0b1010_1101, 0b1110_0110, 0b1011_0101, 0b0110_1101, 0b0100_1100, 0b0100_0100, 0b1111_0011, 0b0111_1111
                }) // 484c:5c31:af3a:cc68:ade6:b56d:4c44:f37f
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1001, 0b0010_1100, 0b0101_1100, 0b1101_1000, 0b0000_1101, 0b0011_0001, 0b0100_0111, 0b0011_0100,
                    0b0001_1101, 0b1101_1101, 0b0010_1011, 0b1001_0000, 0b0101_1011, 0b0101_0001, 0b0010_0001, 0b0111_0100
                }), // 592c:5cd8:d31:4734:1ddd:2b90:5b51:2174
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0101_1001, 0b0010_1100, 0b0101_1100, 0b1101_1000, 0b0000_1101, 0b0011_0001, 0b0100_0111, 0b0011_0100,
                    0b0001_1101, 0b1101_1101, 0b0010_1011, 0b1001_0000, 0b0101_1011, 0b0101_0001, 0b0010_0001, 0b0000_0000
                }), // 592c:5cd8:d31:4734:1ddd:2b90:5b51:2100
                Last: new IPAddress(new byte[]
                {
                    0b0101_1001, 0b0010_1100, 0b0101_1100, 0b1101_1000, 0b0000_1101, 0b0011_0001, 0b0100_0111, 0b0011_0100,
                    0b0001_1101, 0b1101_1101, 0b0010_1011, 0b1001_0000, 0b0101_1011, 0b0101_0001, 0b0010_0001, 0b0111_1111
                }) // 592c:5cd8:d31:4734:1ddd:2b90:5b51:217f
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0111, 0b0111_1101, 0b1111_0010, 0b0010_1100, 0b0001_0101, 0b0000_0001, 0b1111_1001, 0b0010_0010,
                    0b1111_1111, 0b1110_0111, 0b1010_0000, 0b1000_1010, 0b0100_1101, 0b0101_0011, 0b0111_1101, 0b1011_1110
                }), // 277d:f22c:1501:f922:ffe7:a08a:4d53:7dbe
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0010_0111, 0b0111_1101, 0b1111_0010, 0b0010_1100, 0b0001_0101, 0b0000_0001, 0b1111_1001, 0b0010_0010,
                    0b1111_1111, 0b1110_0111, 0b1010_0000, 0b1000_1010, 0b0100_1101, 0b0101_0011, 0b0111_1101, 0b1000_0000
                }), // 277d:f22c:1501:f922:ffe7:a08a:4d53:7d80
                Last: new IPAddress(new byte[]
                {
                    0b0010_0111, 0b0111_1101, 0b1111_0010, 0b0010_1100, 0b0001_0101, 0b0000_0001, 0b1111_1001, 0b0010_0010,
                    0b1111_1111, 0b1110_0111, 0b1010_0000, 0b1000_1010, 0b0100_1101, 0b0101_0011, 0b0111_1101, 0b1111_1111
                }) // 277d:f22c:1501:f922:ffe7:a08a:4d53:7dff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0001, 0b0101_0111, 0b0001_0010, 0b1101_0111, 0b1000_0110, 0b0100_1001, 0b0101_1110, 0b1111_0110,
                    0b1010_0001, 0b0011_0111, 0b0001_1000, 0b0010_0100, 0b1111_1101, 0b0101_0011, 0b0111_0101, 0b1111_0010
                }), // b157:12d7:8649:5ef6:a137:1824:fd53:75f2
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1011_0001, 0b0101_0111, 0b0001_0010, 0b1101_0111, 0b1000_0110, 0b0100_1001, 0b0101_1110, 0b1111_0110,
                    0b1010_0001, 0b0011_0111, 0b0001_1000, 0b0010_0100, 0b1111_1101, 0b0101_0011, 0b0111_0101, 0b1000_0000
                }), // b157:12d7:8649:5ef6:a137:1824:fd53:7580
                Last: new IPAddress(new byte[]
                {
                    0b1011_0001, 0b0101_0111, 0b0001_0010, 0b1101_0111, 0b1000_0110, 0b0100_1001, 0b0101_1110, 0b1111_0110,
                    0b1010_0001, 0b0011_0111, 0b0001_1000, 0b0010_0100, 0b1111_1101, 0b0101_0011, 0b0111_0101, 0b1111_1111
                }) // b157:12d7:8649:5ef6:a137:1824:fd53:75ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }), // ::7f
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }) // ::7f
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_0011
                }), // ::73
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }) // ::7f
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0010_0100
                }), // ::24
                (byte)121
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111
                }) // ::7f
            ));

            #endregion

            #region prefixLength = 120 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ff00
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0111, 0b0001_0011, 0b0010_0001, 0b1010_0011, 0b0101_1000, 0b0010_0001, 0b1100_0001, 0b0001_1110,
                    0b0111_0100, 0b1011_0001, 0b0101_1010, 0b1011_1110, 0b1001_0100, 0b0100_0111, 0b0111_0001, 0b0000_0000
                }), // c713:21a3:5821:c11e:74b1:5abe:9447:7100
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1100_0111, 0b0001_0011, 0b0010_0001, 0b1010_0011, 0b0101_1000, 0b0010_0001, 0b1100_0001, 0b0001_1110,
                    0b0111_0100, 0b1011_0001, 0b0101_1010, 0b1011_1110, 0b1001_0100, 0b0100_0111, 0b0111_0001, 0b0000_0000
                }), // c713:21a3:5821:c11e:74b1:5abe:9447:7100
                Last: new IPAddress(new byte[]
                {
                    0b1100_0111, 0b0001_0011, 0b0010_0001, 0b1010_0011, 0b0101_1000, 0b0010_0001, 0b1100_0001, 0b0001_1110,
                    0b0111_0100, 0b1011_0001, 0b0101_1010, 0b1011_1110, 0b1001_0100, 0b0100_0111, 0b0111_0001, 0b1111_1111
                }) // c713:21a3:5821:c11e:74b1:5abe:9447:71ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1000, 0b1001_0101, 0b1101_0101, 0b0010_1001, 0b1000_0100, 0b0001_1110, 0b1000_1111, 0b1001_1101,
                    0b1101_0100, 0b0101_1110, 0b0100_0010, 0b0001_1010, 0b1110_1010, 0b1000_0000, 0b0111_1101, 0b1111_1111
                }), // 2895:d529:841e:8f9d:d45e:421a:ea80:7dff
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0010_1000, 0b1001_0101, 0b1101_0101, 0b0010_1001, 0b1000_0100, 0b0001_1110, 0b1000_1111, 0b1001_1101,
                    0b1101_0100, 0b0101_1110, 0b0100_0010, 0b0001_1010, 0b1110_1010, 0b1000_0000, 0b0111_1101, 0b0000_0000
                }), // 2895:d529:841e:8f9d:d45e:421a:ea80:7d00
                Last: new IPAddress(new byte[]
                {
                    0b0010_1000, 0b1001_0101, 0b1101_0101, 0b0010_1001, 0b1000_0100, 0b0001_1110, 0b1000_1111, 0b1001_1101,
                    0b1101_0100, 0b0101_1110, 0b0100_0010, 0b0001_1010, 0b1110_1010, 0b1000_0000, 0b0111_1101, 0b1111_1111
                }) // 2895:d529:841e:8f9d:d45e:421a:ea80:7dff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0110, 0b1100_1101, 0b0010_0011, 0b1111_0011, 0b1000_0001, 0b1001_0001, 0b0000_1001, 0b1100_1000,
                    0b0000_1100, 0b1001_0000, 0b1110_0100, 0b1011_1110, 0b1001_0010, 0b1101_1011, 0b1100_0110, 0b0000_0000
                }), // c6cd:23f3:8191:9c8:c90:e4be:92db:c600
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1100_0110, 0b1100_1101, 0b0010_0011, 0b1111_0011, 0b1000_0001, 0b1001_0001, 0b0000_1001, 0b1100_1000,
                    0b0000_1100, 0b1001_0000, 0b1110_0100, 0b1011_1110, 0b1001_0010, 0b1101_1011, 0b1100_0110, 0b0000_0000
                }), // c6cd:23f3:8191:9c8:c90:e4be:92db:c600
                Last: new IPAddress(new byte[]
                {
                    0b1100_0110, 0b1100_1101, 0b0010_0011, 0b1111_0011, 0b1000_0001, 0b1001_0001, 0b0000_1001, 0b1100_1000,
                    0b0000_1100, 0b1001_0000, 0b1110_0100, 0b1011_1110, 0b1001_0010, 0b1101_1011, 0b1100_0110, 0b1111_1111
                }) // c6cd:23f3:8191:9c8:c90:e4be:92db:c6ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_0111, 0b0101_1010, 0b0001_1000, 0b1101_1011, 0b0100_1101, 0b1001_0111, 0b0000_1100, 0b1110_0000,
                    0b1111_1111, 0b0100_1110, 0b0110_1110, 0b1000_1011, 0b1000_1000, 0b1011_1101, 0b1111_1100, 0b1111_1111
                }), // f75a:18db:4d97:ce0:ff4e:6e8b:88bd:fcff
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_0111, 0b0101_1010, 0b0001_1000, 0b1101_1011, 0b0100_1101, 0b1001_0111, 0b0000_1100, 0b1110_0000,
                    0b1111_1111, 0b0100_1110, 0b0110_1110, 0b1000_1011, 0b1000_1000, 0b1011_1101, 0b1111_1100, 0b0000_0000
                }), // f75a:18db:4d97:ce0:ff4e:6e8b:88bd:fc00
                Last: new IPAddress(new byte[]
                {
                    0b1111_0111, 0b0101_1010, 0b0001_1000, 0b1101_1011, 0b0100_1101, 0b1001_0111, 0b0000_1100, 0b1110_0000,
                    0b1111_1111, 0b0100_1110, 0b0110_1110, 0b1000_1011, 0b1000_1000, 0b1011_1101, 0b1111_1100, 0b1111_1111
                }) // f75a:18db:4d97:ce0:ff4e:6e8b:88bd:fcff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1001, 0b0010_1101, 0b1011_0101, 0b1101_1100, 0b0010_0100, 0b0001_1010, 0b1001_0100, 0b0110_0001,
                    0b1001_0111, 0b0101_0100, 0b1101_0010, 0b1001_1110, 0b0100_0001, 0b1000_1110, 0b1000_0000, 0b0101_1110
                }), // 792d:b5dc:241a:9461:9754:d29e:418e:805e
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0111_1001, 0b0010_1101, 0b1011_0101, 0b1101_1100, 0b0010_0100, 0b0001_1010, 0b1001_0100, 0b0110_0001,
                    0b1001_0111, 0b0101_0100, 0b1101_0010, 0b1001_1110, 0b0100_0001, 0b1000_1110, 0b1000_0000, 0b0000_0000
                }), // 792d:b5dc:241a:9461:9754:d29e:418e:8000
                Last: new IPAddress(new byte[]
                {
                    0b0111_1001, 0b0010_1101, 0b1011_0101, 0b1101_1100, 0b0010_0100, 0b0001_1010, 0b1001_0100, 0b0110_0001,
                    0b1001_0111, 0b0101_0100, 0b1101_0010, 0b1001_1110, 0b0100_0001, 0b1000_1110, 0b1000_0000, 0b1111_1111
                }) // 792d:b5dc:241a:9461:9754:d29e:418e:80ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0101, 0b0010_0011, 0b1001_1110, 0b0100_1110, 0b0111_0110, 0b0101_0000, 0b1110_1000, 0b1010_0011,
                    0b1001_1110, 0b1100_1110, 0b1001_0111, 0b1000_1111, 0b1111_1100, 0b0010_1100, 0b0100_1100, 0b1110_1101
                }), // 3523:9e4e:7650:e8a3:9ece:978f:fc2c:4ced
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0011_0101, 0b0010_0011, 0b1001_1110, 0b0100_1110, 0b0111_0110, 0b0101_0000, 0b1110_1000, 0b1010_0011,
                    0b1001_1110, 0b1100_1110, 0b1001_0111, 0b1000_1111, 0b1111_1100, 0b0010_1100, 0b0100_1100, 0b0000_0000
                }), // 3523:9e4e:7650:e8a3:9ece:978f:fc2c:4c00
                Last: new IPAddress(new byte[]
                {
                    0b0011_0101, 0b0010_0011, 0b1001_1110, 0b0100_1110, 0b0111_0110, 0b0101_0000, 0b1110_1000, 0b1010_0011,
                    0b1001_1110, 0b1100_1110, 0b1001_0111, 0b1000_1111, 0b1111_1100, 0b0010_1100, 0b0100_1100, 0b1111_1111
                }) // 3523:9e4e:7650:e8a3:9ece:978f:fc2c:4cff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0101, 0b0000_0111, 0b1110_0111, 0b0110_1111, 0b0110_0101, 0b1111_1101, 0b1011_0101, 0b0100_1100,
                    0b0000_0011, 0b1000_1010, 0b1110_0111, 0b0001_0111, 0b0100_0011, 0b1111_1100, 0b1011_0011, 0b0111_0011
                }), // 3507:e76f:65fd:b54c:38a:e717:43fc:b373
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0011_0101, 0b0000_0111, 0b1110_0111, 0b0110_1111, 0b0110_0101, 0b1111_1101, 0b1011_0101, 0b0100_1100,
                    0b0000_0011, 0b1000_1010, 0b1110_0111, 0b0001_0111, 0b0100_0011, 0b1111_1100, 0b1011_0011, 0b0000_0000
                }), // 3507:e76f:65fd:b54c:38a:e717:43fc:b300
                Last: new IPAddress(new byte[]
                {
                    0b0011_0101, 0b0000_0111, 0b1110_0111, 0b0110_1111, 0b0110_0101, 0b1111_1101, 0b1011_0101, 0b0100_1100,
                    0b0000_0011, 0b1000_1010, 0b1110_0111, 0b0001_0111, 0b0100_0011, 0b1111_1100, 0b1011_0011, 0b1111_1111
                }) // 3507:e76f:65fd:b54c:38a:e717:43fc:b3ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1110, 0b0101_1111, 0b1010_0101, 0b0010_1111, 0b0001_1111, 0b0000_0001, 0b1100_1011, 0b0011_1000,
                    0b1111_0011, 0b1110_1111, 0b0100_1001, 0b0010_1010, 0b1010_1011, 0b0010_1110, 0b1001_0011, 0b1011_1111
                }), // 5e5f:a52f:1f01:cb38:f3ef:492a:ab2e:93bf
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0101_1110, 0b0101_1111, 0b1010_0101, 0b0010_1111, 0b0001_1111, 0b0000_0001, 0b1100_1011, 0b0011_1000,
                    0b1111_0011, 0b1110_1111, 0b0100_1001, 0b0010_1010, 0b1010_1011, 0b0010_1110, 0b1001_0011, 0b0000_0000
                }), // 5e5f:a52f:1f01:cb38:f3ef:492a:ab2e:9300
                Last: new IPAddress(new byte[]
                {
                    0b0101_1110, 0b0101_1111, 0b1010_0101, 0b0010_1111, 0b0001_1111, 0b0000_0001, 0b1100_1011, 0b0011_1000,
                    0b1111_0011, 0b1110_1111, 0b0100_1001, 0b0010_1010, 0b1010_1011, 0b0010_1110, 0b1001_0011, 0b1111_1111
                }) // 5e5f:a52f:1f01:cb38:f3ef:492a:ab2e:93ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }), // ::ff
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }) // ::ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1110_0010
                }), // ::e2
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }) // ::ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0010_0100
                }), // ::24
                (byte)120
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111
                }) // ::ff
            ));

            #endregion

            #region prefixLength = 119 (Net mask: ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:fe00
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_0011, 0b1101_0110, 0b1111_1000, 0b0001_1111, 0b0111_0111, 0b1001_1110, 0b1101_0100, 0b1100_0100,
                    0b1001_1010, 0b0011_0000, 0b0011_1101, 0b1000_0110, 0b1111_0010, 0b0000_0001, 0b0100_0010, 0b0000_0000
                }), // d3d6:f81f:779e:d4c4:9a30:3d86:f201:4200
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1101_0011, 0b1101_0110, 0b1111_1000, 0b0001_1111, 0b0111_0111, 0b1001_1110, 0b1101_0100, 0b1100_0100,
                    0b1001_1010, 0b0011_0000, 0b0011_1101, 0b1000_0110, 0b1111_0010, 0b0000_0001, 0b0100_0010, 0b0000_0000
                }), // d3d6:f81f:779e:d4c4:9a30:3d86:f201:4200
                Last: new IPAddress(new byte[]
                {
                    0b1101_0011, 0b1101_0110, 0b1111_1000, 0b0001_1111, 0b0111_0111, 0b1001_1110, 0b1101_0100, 0b1100_0100,
                    0b1001_1010, 0b0011_0000, 0b0011_1101, 0b1000_0110, 0b1111_0010, 0b0000_0001, 0b0100_0011, 0b1111_1111
                }) // d3d6:f81f:779e:d4c4:9a30:3d86:f201:43ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b1110_1100, 0b0000_1000, 0b1011_1111, 0b1111_1010, 0b0000_0011, 0b1110_0100, 0b1010_1110,
                    0b1101_1000, 0b1111_1010, 0b1101_1001, 0b0111_1000, 0b1010_1001, 0b1110_0101, 0b0001_1011, 0b1111_1111
                }), // 80ec:8bf:fa03:e4ae:d8fa:d978:a9e5:1bff
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_0000, 0b1110_1100, 0b0000_1000, 0b1011_1111, 0b1111_1010, 0b0000_0011, 0b1110_0100, 0b1010_1110,
                    0b1101_1000, 0b1111_1010, 0b1101_1001, 0b0111_1000, 0b1010_1001, 0b1110_0101, 0b0001_1010, 0b0000_0000
                }), // 80ec:8bf:fa03:e4ae:d8fa:d978:a9e5:1a00
                Last: new IPAddress(new byte[]
                {
                    0b1000_0000, 0b1110_1100, 0b0000_1000, 0b1011_1111, 0b1111_1010, 0b0000_0011, 0b1110_0100, 0b1010_1110,
                    0b1101_1000, 0b1111_1010, 0b1101_1001, 0b0111_1000, 0b1010_1001, 0b1110_0101, 0b0001_1011, 0b1111_1111
                }) // 80ec:8bf:fa03:e4ae:d8fa:d978:a9e5:1bff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_1011, 0b0001_1000, 0b1101_0010, 0b1001_1111, 0b0101_0111, 0b1110_0001, 0b0011_0010, 0b1101_1100,
                    0b0011_1010, 0b0110_1011, 0b0100_0011, 0b0100_1001, 0b1101_1100, 0b0110_0101, 0b0100_1100, 0b0000_0000
                }), // b18:d29f:57e1:32dc:3a6b:4349:dc65:4c00
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_1011, 0b0001_1000, 0b1101_0010, 0b1001_1111, 0b0101_0111, 0b1110_0001, 0b0011_0010, 0b1101_1100,
                    0b0011_1010, 0b0110_1011, 0b0100_0011, 0b0100_1001, 0b1101_1100, 0b0110_0101, 0b0100_1100, 0b0000_0000
                }), // b18:d29f:57e1:32dc:3a6b:4349:dc65:4c00
                Last: new IPAddress(new byte[]
                {
                    0b0000_1011, 0b0001_1000, 0b1101_0010, 0b1001_1111, 0b0101_0111, 0b1110_0001, 0b0011_0010, 0b1101_1100,
                    0b0011_1010, 0b0110_1011, 0b0100_0011, 0b0100_1001, 0b1101_1100, 0b0110_0101, 0b0100_1101, 0b1111_1111
                }) // b18:d29f:57e1:32dc:3a6b:4349:dc65:4dff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_0100, 0b1111_0111, 0b1011_1001, 0b0011_1011, 0b0000_0101, 0b0101_1010, 0b0001_1101, 0b1011_1000,
                    0b1010_0111, 0b1110_1010, 0b0110_0101, 0b1111_1101, 0b1001_1001, 0b0100_0101, 0b1100_1001, 0b1111_1111
                }), // 74f7:b93b:55a:1db8:a7ea:65fd:9945:c9ff
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0111_0100, 0b1111_0111, 0b1011_1001, 0b0011_1011, 0b0000_0101, 0b0101_1010, 0b0001_1101, 0b1011_1000,
                    0b1010_0111, 0b1110_1010, 0b0110_0101, 0b1111_1101, 0b1001_1001, 0b0100_0101, 0b1100_1000, 0b0000_0000
                }), // 74f7:b93b:55a:1db8:a7ea:65fd:9945:c800
                Last: new IPAddress(new byte[]
                {
                    0b0111_0100, 0b1111_0111, 0b1011_1001, 0b0011_1011, 0b0000_0101, 0b0101_1010, 0b0001_1101, 0b1011_1000,
                    0b1010_0111, 0b1110_1010, 0b0110_0101, 0b1111_1101, 0b1001_1001, 0b0100_0101, 0b1100_1001, 0b1111_1111
                }) // 74f7:b93b:55a:1db8:a7ea:65fd:9945:c9ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_0111, 0b0011_1011, 0b1001_0110, 0b1000_0111, 0b1000_1101, 0b0100_0001, 0b1010_1100, 0b1110_0001,
                    0b0100_0111, 0b0111_0010, 0b0101_1101, 0b1100_1101, 0b1001_1001, 0b0011_1000, 0b1010_0100, 0b1010_1000
                }), // f73b:9687:8d41:ace1:4772:5dcd:9938:a4a8
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_0111, 0b0011_1011, 0b1001_0110, 0b1000_0111, 0b1000_1101, 0b0100_0001, 0b1010_1100, 0b1110_0001,
                    0b0100_0111, 0b0111_0010, 0b0101_1101, 0b1100_1101, 0b1001_1001, 0b0011_1000, 0b1010_0100, 0b0000_0000
                }), // f73b:9687:8d41:ace1:4772:5dcd:9938:a400
                Last: new IPAddress(new byte[]
                {
                    0b1111_0111, 0b0011_1011, 0b1001_0110, 0b1000_0111, 0b1000_1101, 0b0100_0001, 0b1010_1100, 0b1110_0001,
                    0b0100_0111, 0b0111_0010, 0b0101_1101, 0b1100_1101, 0b1001_1001, 0b0011_1000, 0b1010_0101, 0b1111_1111
                }) // f73b:9687:8d41:ace1:4772:5dcd:9938:a5ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1000, 0b1100_1110, 0b1111_1011, 0b0111_1000, 0b0111_1000, 0b0010_0111, 0b0001_0100, 0b0001_0111,
                    0b1000_1111, 0b0001_1010, 0b1011_1001, 0b1010_0100, 0b1000_0001, 0b1000_0000, 0b0011_0001, 0b0000_1000
                }), // 38ce:fb78:7827:1417:8f1a:b9a4:8180:3108
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0011_1000, 0b1100_1110, 0b1111_1011, 0b0111_1000, 0b0111_1000, 0b0010_0111, 0b0001_0100, 0b0001_0111,
                    0b1000_1111, 0b0001_1010, 0b1011_1001, 0b1010_0100, 0b1000_0001, 0b1000_0000, 0b0011_0000, 0b0000_0000
                }), // 38ce:fb78:7827:1417:8f1a:b9a4:8180:3000
                Last: new IPAddress(new byte[]
                {
                    0b0011_1000, 0b1100_1110, 0b1111_1011, 0b0111_1000, 0b0111_1000, 0b0010_0111, 0b0001_0100, 0b0001_0111,
                    0b1000_1111, 0b0001_1010, 0b1011_1001, 0b1010_0100, 0b1000_0001, 0b1000_0000, 0b0011_0001, 0b1111_1111
                }) // 38ce:fb78:7827:1417:8f1a:b9a4:8180:31ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_1100, 0b0100_1101, 0b1011_0000, 0b1101_1100, 0b0011_1011, 0b0000_1101, 0b0101_0110, 0b1001_0100,
                    0b1011_1111, 0b1111_0111, 0b1000_1100, 0b1001_1111, 0b0111_0000, 0b0011_0001, 0b1111_1010, 0b0110_1110
                }), // 1c4d:b0dc:3b0d:5694:bff7:8c9f:7031:fa6e
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0001_1100, 0b0100_1101, 0b1011_0000, 0b1101_1100, 0b0011_1011, 0b0000_1101, 0b0101_0110, 0b1001_0100,
                    0b1011_1111, 0b1111_0111, 0b1000_1100, 0b1001_1111, 0b0111_0000, 0b0011_0001, 0b1111_1010, 0b0000_0000
                }), // 1c4d:b0dc:3b0d:5694:bff7:8c9f:7031:fa00
                Last: new IPAddress(new byte[]
                {
                    0b0001_1100, 0b0100_1101, 0b1011_0000, 0b1101_1100, 0b0011_1011, 0b0000_1101, 0b0101_0110, 0b1001_0100,
                    0b1011_1111, 0b1111_0111, 0b1000_1100, 0b1001_1111, 0b0111_0000, 0b0011_0001, 0b1111_1011, 0b1111_1111
                }) // 1c4d:b0dc:3b0d:5694:bff7:8c9f:7031:fbff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_1101, 0b1110_1001, 0b1011_0000, 0b0100_1110, 0b1000_0001, 0b1111_0100, 0b1100_1011, 0b1111_1111,
                    0b0111_0010, 0b1000_0101, 0b1011_1010, 0b0100_1111, 0b0011_0110, 0b0001_0011, 0b0001_0111, 0b1001_0010
                }), // 8de9:b04e:81f4:cbff:7285:ba4f:3613:1792
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_1101, 0b1110_1001, 0b1011_0000, 0b0100_1110, 0b1000_0001, 0b1111_0100, 0b1100_1011, 0b1111_1111,
                    0b0111_0010, 0b1000_0101, 0b1011_1010, 0b0100_1111, 0b0011_0110, 0b0001_0011, 0b0001_0110, 0b0000_0000
                }), // 8de9:b04e:81f4:cbff:7285:ba4f:3613:1600
                Last: new IPAddress(new byte[]
                {
                    0b1000_1101, 0b1110_1001, 0b1011_0000, 0b0100_1110, 0b1000_0001, 0b1111_0100, 0b1100_1011, 0b1111_1111,
                    0b0111_0010, 0b1000_0101, 0b1011_1010, 0b0100_1111, 0b0011_0110, 0b0001_0011, 0b0001_0111, 0b1111_1111
                }) // 8de9:b04e:81f4:cbff:7285:ba4f:3613:17ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }), // ::1ff
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }) // ::1ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1101_0110
                }), // ::1d6
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }) // ::1ff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0011_0000
                }), // ::30
                (byte)119
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111
                }) // ::1ff
            ));

            #endregion

            #region prefixLength = 33 (Net mask: ffff:ffff:8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff:8000::
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff:8000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff:8000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1000, 0b0101_0111, 0b0101_0001, 0b0101_0010, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 7857:5152:8000::
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0111_1000, 0b0101_0111, 0b0101_0001, 0b0101_0010, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 7857:5152:8000::
                Last: new IPAddress(new byte[]
                {
                    0b0111_1000, 0b0101_0111, 0b0101_0001, 0b0101_0010, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7857:5152:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_0001, 0b0111_0011, 0b1111_1101, 0b1001_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 9173:fd94:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1001_0001, 0b0111_0011, 0b1111_1101, 0b1001_0100, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 9173:fd94:8000::
                Last: new IPAddress(new byte[]
                {
                    0b1001_0001, 0b0111_0011, 0b1111_1101, 0b1001_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 9173:fd94:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_1011, 0b1000_1100, 0b1010_1101, 0b0100_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // db8c:ad4a::
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1101_1011, 0b1000_1100, 0b1010_1101, 0b0100_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // db8c:ad4a::
                Last: new IPAddress(new byte[]
                {
                    0b1101_1011, 0b1000_1100, 0b1010_1101, 0b0100_1010, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // db8c:ad4a:7fff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0100, 0b1110_0011, 0b1001_0010, 0b0011_1011, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 24e3:923b:7fff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0010_0100, 0b1110_0011, 0b1001_0010, 0b0011_1011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 24e3:923b::
                Last: new IPAddress(new byte[]
                {
                    0b0010_0100, 0b1110_0011, 0b1001_0010, 0b0011_1011, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 24e3:923b:7fff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0010, 0b0100_0010, 0b0111_1101, 0b0101_1011, 0b0011_1110, 0b0101_0100, 0b1001_0000, 0b0111_1011,
                    0b0011_0100, 0b1100_0001, 0b1011_0011, 0b0000_0000, 0b1010_0110, 0b1001_0110, 0b1100_0011, 0b1110_1101
                }), // e242:7d5b:3e54:907b:34c1:b300:a696:c3ed
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1110_0010, 0b0100_0010, 0b0111_1101, 0b0101_1011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // e242:7d5b::
                Last: new IPAddress(new byte[]
                {
                    0b1110_0010, 0b0100_0010, 0b0111_1101, 0b0101_1011, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // e242:7d5b:7fff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_1111, 0b1110_1011, 0b0010_0101, 0b1000_1101, 0b0110_1011, 0b1010_0011, 0b1101_0101, 0b1001_1011,
                    0b0010_0110, 0b1001_0010, 0b1100_0100, 0b0010_0110, 0b0111_1001, 0b1101_1001, 0b0001_1010, 0b1011_1101
                }), // 5feb:258d:6ba3:d59b:2692:c426:79d9:1abd
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0101_1111, 0b1110_1011, 0b0010_0101, 0b1000_1101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 5feb:258d::
                Last: new IPAddress(new byte[]
                {
                    0b0101_1111, 0b1110_1011, 0b0010_0101, 0b1000_1101, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 5feb:258d:7fff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1111, 0b0000_0111, 0b0110_0100, 0b0010_1001, 0b1001_1110, 0b1100_0000, 0b0011_1100, 0b1101_0111,
                    0b1000_1111, 0b0001_1100, 0b0111_0001, 0b0001_0100, 0b1000_0000, 0b0110_0101, 0b0011_0111, 0b1011_0001
                }), // ef07:6429:9ec0:3cd7:8f1c:7114:8065:37b1
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1110_1111, 0b0000_0111, 0b0110_0100, 0b0010_1001, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ef07:6429:8000::
                Last: new IPAddress(new byte[]
                {
                    0b1110_1111, 0b0000_0111, 0b0110_0100, 0b0010_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ef07:6429:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_0011, 0b0111_0110, 0b1100_0011, 0b0110_0100, 0b1110_1100, 0b0010_0111, 0b1110_0001, 0b0101_1001,
                    0b0100_0110, 0b0100_1000, 0b0111_1011, 0b1001_0000, 0b1111_0111, 0b0100_0010, 0b1010_0101, 0b1011_0110
                }), // 9376:c364:ec27:e159:4648:7b90:f742:a5b6
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1001_0011, 0b0111_0110, 0b1100_0011, 0b0110_0100, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 9376:c364:8000::
                Last: new IPAddress(new byte[]
                {
                    0b1001_0011, 0b0111_0110, 0b1100_0011, 0b0110_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 9376:c364:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ::7fff:ffff:ffff:ffff:ffff:ffff
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::7fff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0110_1100, 0b1010_1000, 0b1111_0111, 0b0101_1100,
                    0b0110_0111, 0b1101_0010, 0b0110_0101, 0b0100_0100, 0b0111_1100, 0b1110_1010, 0b1101_1100, 0b0001_0101
                }), // ::6ca8:f75c:67d2:6544:7cea:dc15
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::7fff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_1100, 0b1010_0000, 0b0011_1000, 0b1111_1011,
                    0b1101_1110, 0b1011_0010, 0b0101_0010, 0b1111_1101, 0b0001_0111, 0b0001_1111, 0b0001_1101, 0b1111_1000
                }), // ::ca0:38fb:deb2:52fd:171f:1df8
                (byte)33
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::7fff:ffff:ffff:ffff:ffff:ffff
            ));

            #endregion

            #region prefixLength = 32 (Net mask: 255.255.255.255; ffff:ffff::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0001, 0b0001_0001, 0b1100_1100, 0b0011_0000 }), // 129.17.204.48
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0001, 0b0001_0001, 0b1100_1100, 0b0011_0000 }), // 129.17.204.48
                 Last: new IPAddress(new byte[] { 0b1000_0001, 0b0001_0001, 0b1100_1100, 0b0011_0000 }) // 129.17.204.48
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }) // 0.0.0.0
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff::
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:ffff::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1001_0000, 0b1101_0000, 0b1000_1011, 0b0000_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 90d0:8b0f::
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1001_0000, 0b1101_0000, 0b1000_1011, 0b0000_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 90d0:8b0f::
                Last: new IPAddress(new byte[]
                {
                    0b1001_0000, 0b1101_0000, 0b1000_1011, 0b0000_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 90d0:8b0f:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_0101, 0b1111_0000, 0b0101_0110, 0b1111_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // d5f0:56f1:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1101_0101, 0b1111_0000, 0b0101_0110, 0b1111_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // d5f0:56f1::
                Last: new IPAddress(new byte[]
                {
                    0b1101_0101, 0b1111_0000, 0b0101_0110, 0b1111_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // d5f0:56f1:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1001, 0b1100_1001, 0b0010_1011, 0b1101_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 39c9:2bdc::
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0011_1001, 0b1100_1001, 0b0010_1011, 0b1101_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 39c9:2bdc::
                Last: new IPAddress(new byte[]
                {
                    0b0011_1001, 0b1100_1001, 0b0010_1011, 0b1101_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 39c9:2bdc:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1101_0000, 0b1110_1100, 0b1011_1001, 0b1101_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // d0ec:b9dc:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1101_0000, 0b1110_1100, 0b1011_1001, 0b1101_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // d0ec:b9dc::
                Last: new IPAddress(new byte[]
                {
                    0b1101_0000, 0b1110_1100, 0b1011_1001, 0b1101_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // d0ec:b9dc:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_0001, 0b1000_1101, 0b0100_0101, 0b0100_0110, 0b0001_1010, 0b1101_0011, 0b0101_0111, 0b0100_1100,
                    0b1000_0000, 0b0000_1011, 0b1100_0010, 0b1010_1100, 0b0101_1101, 0b0100_1100, 0b0011_0101, 0b1011_1000
                }), // a18d:4546:1ad3:574c:800b:c2ac:5d4c:35b8
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1010_0001, 0b1000_1101, 0b0100_0101, 0b0100_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // a18d:4546::
                Last: new IPAddress(new byte[]
                {
                    0b1010_0001, 0b1000_1101, 0b0100_0101, 0b0100_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // a18d:4546:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0011, 0b0001_1010, 0b0101_0101, 0b0111_1000, 0b1001_0000, 0b0001_0010, 0b1011_1110, 0b0010_1100,
                    0b1110_1010, 0b1000_0000, 0b1110_1010, 0b1010_0110, 0b0011_1110, 0b1111_1111, 0b1110_1101, 0b1010_1011
                }), // e31a:5578:9012:be2c:ea80:eaa6:3eff:edab
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1110_0011, 0b0001_1010, 0b0101_0101, 0b0111_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // e31a:5578::
                Last: new IPAddress(new byte[]
                {
                    0b1110_0011, 0b0001_1010, 0b0101_0101, 0b0111_1000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // e31a:5578:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0101, 0b0101_1000, 0b1111_0111, 0b1001_0001, 0b0010_1000, 0b1001_0011, 0b0110_0101, 0b0111_1011,
                    0b1011_0010, 0b0101_1000, 0b1100_1111, 0b1101_0101, 0b0011_0101, 0b0100_0011, 0b1001_1110, 0b0110_0111
                }), // 1558:f791:2893:657b:b258:cfd5:3543:9e67
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0001_0101, 0b0101_1000, 0b1111_0111, 0b1001_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 1558:f791::
                Last: new IPAddress(new byte[]
                {
                    0b0001_0101, 0b0101_1000, 0b1111_0111, 0b1001_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1558:f791:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_0001, 0b0111_0101, 0b0001_0110, 0b1100_0101, 0b1001_1001, 0b1001_1100, 0b0110_0010, 0b0100_1110,
                    0b1111_0010, 0b0011_0111, 0b0000_1111, 0b0110_0001, 0b0101_0000, 0b0001_1100, 0b0100_0001, 0b0011_0000
                }), // 5175:16c5:999c:624e:f237:f61:501c:4130
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0101_0001, 0b0111_0101, 0b0001_0110, 0b1100_0101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 5175:16c5::
                Last: new IPAddress(new byte[]
                {
                    0b0101_0001, 0b0111_0101, 0b0001_0110, 0b1100_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 5175:16c5:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ::ffff:ffff:ffff:ffff:ffff:ffff
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1011_0110, 0b1110_1000, 0b1000_1000, 0b0110_0110,
                    0b1101_0111, 0b1000_1010, 0b0011_1000, 0b0100_0001, 0b1111_0110, 0b0100_0111, 0b1101_1010, 0b1001_0000
                }), // ::b6e8:8866:d78a:3841:f647:da90
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0011_0100, 0b0001_1101, 0b0100_0010, 0b1101_1101,
                    0b1011_1000, 0b0010_1110, 0b0010_0100, 0b1101_0101, 0b1001_0001, 0b1100_0001, 0b1010_1110, 0b1110_0000
                }), // ::341d:42dd:b82e:24d5:91c1:aee0
                (byte)32
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ::ffff:ffff:ffff:ffff:ffff:ffff
            ));

            #endregion

            #region prefixLength = 31 (Net mask: 255.255.255.254; ffff:fffe::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }), // 255.255.255.254
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }), // 255.255.255.254
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }), // 255.255.255.254
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0110, 0b1000_1100, 0b0101_1110, 0b0100_0110 }), // 6.140.94.70
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0110, 0b1000_1100, 0b0101_1110, 0b0100_0110 }), // 6.140.94.70
                 Last: new IPAddress(new byte[] { 0b0000_0110, 0b1000_1100, 0b0101_1110, 0b0100_0111 }) // 6.140.94.71
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_1000, 0b1101_0100, 0b0111_0010, 0b1100_0111 }), // 168.212.114.199
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1010_1000, 0b1101_0100, 0b0111_0010, 0b1100_0110 }), // 168.212.114.198
                 Last: new IPAddress(new byte[] { 0b1010_1000, 0b1101_0100, 0b0111_0010, 0b1100_0111 }) // 168.212.114.199
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_0101, 0b1000_0011, 0b1000_1100, 0b0000_0100 }), // 53.131.140.4
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0011_0101, 0b1000_0011, 0b1000_1100, 0b0000_0100 }), // 53.131.140.4
                 Last: new IPAddress(new byte[] { 0b0011_0101, 0b1000_0011, 0b1000_1100, 0b0000_0101 }) // 53.131.140.5
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_0000, 0b1000_0010, 0b0010_1011, 0b1100_1101 }), // 16.130.43.205
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0001_0000, 0b1000_0010, 0b0010_1011, 0b1100_1100 }), // 16.130.43.204
                 Last: new IPAddress(new byte[] { 0b0001_0000, 0b1000_0010, 0b0010_1011, 0b1100_1101 }) // 16.130.43.205
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }), // 0.0.0.1
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }) // 0.0.0.1
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }) // 0.0.0.1
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:fffe::
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:fffe::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ffff:fffe::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0110, 0b1111_0011, 0b1111_1010, 0b0111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // b6f3:fa7e::
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1011_0110, 0b1111_0011, 0b1111_1010, 0b0111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // b6f3:fa7e::
                Last: new IPAddress(new byte[]
                {
                    0b1011_0110, 0b1111_0011, 0b1111_1010, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // b6f3:fa7f:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0100, 0b0001_0100, 0b1010_0000, 0b0001_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 414:a013:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0100, 0b0001_0100, 0b1010_0000, 0b0001_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 414:a012::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0100, 0b0001_0100, 0b1010_0000, 0b0001_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 414:a013:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_1110, 0b0011_1010, 0b0100_1010, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ae3a:4a80::
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1010_1110, 0b0011_1010, 0b0100_1010, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ae3a:4a80::
                Last: new IPAddress(new byte[]
                {
                    0b1010_1110, 0b0011_1010, 0b0100_1010, 0b1000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ae3a:4a81:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1111, 0b1001_0110, 0b0000_0100, 0b0110_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ef96:465:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1110_1111, 0b1001_0110, 0b0000_0100, 0b0110_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ef96:464::
                Last: new IPAddress(new byte[]
                {
                    0b1110_1111, 0b1001_0110, 0b0000_0100, 0b0110_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ef96:465:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_1000, 0b0010_1000, 0b0001_1110, 0b1100_0100, 0b1111_0000, 0b0110_0010, 0b0001_0011, 0b0101_0111,
                    0b0110_1001, 0b0010_1000, 0b0111_1111, 0b0011_0000, 0b1111_0010, 0b1010_0100, 0b1110_0111, 0b0100_0110
                }), // a828:1ec4:f062:1357:6928:7f30:f2a4:e746
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1010_1000, 0b0010_1000, 0b0001_1110, 0b1100_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // a828:1ec4::
                Last: new IPAddress(new byte[]
                {
                    0b1010_1000, 0b0010_1000, 0b0001_1110, 0b1100_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // a828:1ec5:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1100, 0b1000_1011, 0b1000_0000, 0b0100_1001, 0b0100_0000, 0b1110_0111, 0b0001_1010, 0b0000_1000,
                    0b1010_1010, 0b0101_1001, 0b0101_0000, 0b1110_0110, 0b1010_0101, 0b0100_1101, 0b1010_0110, 0b1110_1111
                }), // 3c8b:8049:40e7:1a08:aa59:50e6:a54d:a6ef
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0011_1100, 0b1000_1011, 0b1000_0000, 0b0100_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 3c8b:8048::
                Last: new IPAddress(new byte[]
                {
                    0b0011_1100, 0b1000_1011, 0b1000_0000, 0b0100_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3c8b:8049:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_1111, 0b1001_1111, 0b0101_0011, 0b1110_1110, 0b0100_0110, 0b1111_1001, 0b0111_0011, 0b0001_0001,
                    0b1010_1110, 0b0101_1000, 0b0101_0110, 0b0110_1001, 0b0001_0010, 0b0001_1110, 0b1010_0110, 0b0010_0001
                }), // 6f9f:53ee:46f9:7311:ae58:5669:121e:a621
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0110_1111, 0b1001_1111, 0b0101_0011, 0b1110_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 6f9f:53ee::
                Last: new IPAddress(new byte[]
                {
                    0b0110_1111, 0b1001_1111, 0b0101_0011, 0b1110_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 6f9f:53ef:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_0001, 0b0101_0101, 0b1110_1010, 0b1000_0111, 0b1101_0010, 0b1001_0101, 0b1000_1101, 0b0011_1011,
                    0b0100_0100, 0b1011_1000, 0b0110_0000, 0b0111_1010, 0b1000_1000, 0b0010_0101, 0b0001_1111, 0b0100_0110
                }), // a155:ea87:d295:8d3b:44b8:607a:8825:1f46
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1010_0001, 0b0101_0101, 0b1110_1010, 0b1000_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // a155:ea86::
                Last: new IPAddress(new byte[]
                {
                    0b1010_0001, 0b0101_0101, 0b1110_1010, 0b1000_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // a155:ea87:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b0001_1100, 0b0101_1111, 0b0000_1010, 0b1101_0010,
                    0b1101_0001, 0b1111_0010, 0b0101_1111, 0b1001_1110, 0b1100_0000, 0b0101_1100, 0b1011_1001, 0b1001_1101
                }), // 0:1:1c5f:ad2:d1f2:5f9e:c05c:b99d
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0110_0011, 0b0000_1110, 0b1111_0001, 0b1001_1101,
                    0b0100_1101, 0b0110_0001, 0b1001_1000, 0b1001_0111, 0b1110_1110, 0b0101_1101, 0b0100_0010, 0b0011_0000
                }), // ::630e:f19d:4d61:9897:ee5d:4230
                (byte)31
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 0:1:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            #endregion

            #region prefixLength = 30 (Net mask: 255.255.255.252)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100 }), // 255.255.255.252
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100 }), // 255.255.255.252
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100 }), // 255.255.255.252
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1111, 0b0001_1110, 0b0010_0000, 0b1111_1100 }), // 127.30.32.252
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_1111, 0b0001_1110, 0b0010_0000, 0b1111_1100 }), // 127.30.32.252
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b0001_1110, 0b0010_0000, 0b1111_1111 }) // 127.30.32.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_1010, 0b0010_1101, 0b1011_1011, 0b0000_0111 }), // 106.45.187.7
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0110_1010, 0b0010_1101, 0b1011_1011, 0b0000_0100 }), // 106.45.187.4
                 Last: new IPAddress(new byte[] { 0b0110_1010, 0b0010_1101, 0b1011_1011, 0b0000_0111 }) // 106.45.187.7
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_0101, 0b1001_1101, 0b1101_1000, 0b1001_0000 }), // 101.157.216.144
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0110_0101, 0b1001_1101, 0b1101_1000, 0b1001_0000 }), // 101.157.216.144
                 Last: new IPAddress(new byte[] { 0b0110_0101, 0b1001_1101, 0b1101_1000, 0b1001_0011 }) // 101.157.216.147
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1101, 0b0010_1000, 0b1111_0001, 0b1001_0011 }), // 205.40.241.147
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_1101, 0b0010_1000, 0b1111_0001, 0b1001_0000 }), // 205.40.241.144
                 Last: new IPAddress(new byte[] { 0b1100_1101, 0b0010_1000, 0b1111_0001, 0b1001_0011 }) // 205.40.241.147
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_1000, 0b0110_0011, 0b0010_0010, 0b0010_1110 }), // 24.99.34.46
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0001_1000, 0b0110_0011, 0b0010_0010, 0b0010_1100 }), // 24.99.34.44
                 Last: new IPAddress(new byte[] { 0b0001_1000, 0b0110_0011, 0b0010_0010, 0b0010_1111 }) // 24.99.34.47
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0110, 0b0011_0010, 0b1110_0110, 0b0011_1101 }), // 166.50.230.61
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1010_0110, 0b0011_0010, 0b1110_0110, 0b0011_1100 }), // 166.50.230.60
                 Last: new IPAddress(new byte[] { 0b1010_0110, 0b0011_0010, 0b1110_0110, 0b0011_1111 }) // 166.50.230.63
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1010, 0b1001_1100, 0b1101_0001, 0b0111_0001 }), // 186.156.209.113
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1011_1010, 0b1001_1100, 0b1101_0001, 0b0111_0000 }), // 186.156.209.112
                 Last: new IPAddress(new byte[] { 0b1011_1010, 0b1001_1100, 0b1101_0001, 0b0111_0011 }) // 186.156.209.115
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011 }), // 0.0.0.3
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011 }) // 0.0.0.3
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 }), // 0.0.0.1
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011 }) // 0.0.0.3
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)30
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0011 }) // 0.0.0.3
            ));

            #endregion

            #region prefixLength = 25 (Net mask: 255.255.255.128)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000 }), // 255.255.255.128
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000 }), // 255.255.255.128
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000 }), // 255.255.255.128
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0100, 0b1000_1001, 0b1010_1100, 0b1000_0000 }), // 164.137.172.128
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1010_0100, 0b1000_1001, 0b1010_1100, 0b1000_0000 }), // 164.137.172.128
                 Last: new IPAddress(new byte[] { 0b1010_0100, 0b1000_1001, 0b1010_1100, 0b1111_1111 }) // 164.137.172.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1101, 0b0000_0011, 0b1001_0110, 0b1111_1111 }), // 237.3.150.255
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1110_1101, 0b0000_0011, 0b1001_0110, 0b1000_0000 }), // 237.3.150.128
                 Last: new IPAddress(new byte[] { 0b1110_1101, 0b0000_0011, 0b1001_0110, 0b1111_1111 }) // 237.3.150.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0001, 0b0100_0101, 0b0110_1011, 0b0000_0000 }), // 177.69.107.0
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1011_0001, 0b0100_0101, 0b0110_1011, 0b0000_0000 }), // 177.69.107.0
                 Last: new IPAddress(new byte[] { 0b1011_0001, 0b0100_0101, 0b0110_1011, 0b0111_1111 }) // 177.69.107.127
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_0100, 0b0100_1110, 0b0011_0000, 0b0111_1111 }), // 36.78.48.127
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0010_0100, 0b0100_1110, 0b0011_0000, 0b0000_0000 }), // 36.78.48.0
                 Last: new IPAddress(new byte[] { 0b0010_0100, 0b0100_1110, 0b0011_0000, 0b0111_1111 }) // 36.78.48.127
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1100, 0b1110_1010, 0b0000_0001, 0b0000_1111 }), // 124.234.1.15
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_1100, 0b1110_1010, 0b0000_0001, 0b0000_0000 }), // 124.234.1.0
                 Last: new IPAddress(new byte[] { 0b0111_1100, 0b1110_1010, 0b0000_0001, 0b0111_1111 }) // 124.234.1.127
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1001, 0b0010_0111, 0b1001_1100, 0b0111_1010 }), // 201.39.156.122
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_1001, 0b0010_0111, 0b1001_1100, 0b0000_0000 }), // 201.39.156.0
                 Last: new IPAddress(new byte[] { 0b1100_1001, 0b0010_0111, 0b1001_1100, 0b0111_1111 }) // 201.39.156.127
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1111, 0b1011_0010, 0b0110_1011, 0b1000_0100 }), // 127.178.107.132
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_1111, 0b1011_0010, 0b0110_1011, 0b1000_0000 }), // 127.178.107.128
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1011_0010, 0b0110_1011, 0b1111_1111 }) // 127.178.107.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_1010, 0b0101_1011, 0b0101_1110, 0b1100_1011 }), // 10.91.94.203
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_1010, 0b0101_1011, 0b0101_1110, 0b1000_0000 }), // 10.91.94.128
                 Last: new IPAddress(new byte[] { 0b0000_1010, 0b0101_1011, 0b0101_1110, 0b1111_1111 }) // 10.91.94.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }), // 0.0.0.127
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }) // 0.0.0.127
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0101_1100 }), // 0.0.0.92
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }) // 0.0.0.127
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_1111 }), // 0.0.0.15
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }) // 0.0.0.127
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)25
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0111_1111 }) // 0.0.0.127
            ));

            #endregion

            #region prefixLength = 24 (Net mask: 255.255.255.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000 }), // 255.255.255.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000 }), // 255.255.255.0
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000 }), // 255.255.255.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0010, 0b1000_1010, 0b0001_1111, 0b0000_0000 }), // 2.138.31.0
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0010, 0b1000_1010, 0b0001_1111, 0b0000_0000 }), // 2.138.31.0
                 Last: new IPAddress(new byte[] { 0b0000_0010, 0b1000_1010, 0b0001_1111, 0b1111_1111 }) // 2.138.31.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_0010, 0b0111_1110, 0b1111_0101, 0b1111_1111 }), // 114.126.245.255
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_0010, 0b0111_1110, 0b1111_0101, 0b0000_0000 }), // 114.126.245.0
                 Last: new IPAddress(new byte[] { 0b0111_0010, 0b0111_1110, 0b1111_0101, 0b1111_1111 }) // 114.126.245.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1101, 0b1011_1011, 0b1000_0110, 0b0000_0000 }), // 157.187.134.0
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1001_1101, 0b1011_1011, 0b1000_0110, 0b0000_0000 }), // 157.187.134.0
                 Last: new IPAddress(new byte[] { 0b1001_1101, 0b1011_1011, 0b1000_0110, 0b1111_1111 }) // 157.187.134.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0010, 0b1111_1011, 0b1001_1110, 0b1111_1111 }), // 2.251.158.255
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0010, 0b1111_1011, 0b1001_1110, 0b0000_0000 }), // 2.251.158.0
                 Last: new IPAddress(new byte[] { 0b0000_0010, 0b1111_1011, 0b1001_1110, 0b1111_1111 }) // 2.251.158.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_0010, 0b0111_1110, 0b1111_1010, 0b0000_0100 }), // 114.126.250.4
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_0010, 0b0111_1110, 0b1111_1010, 0b0000_0000 }), // 114.126.250.0
                 Last: new IPAddress(new byte[] { 0b0111_0010, 0b0111_1110, 0b1111_1010, 0b1111_1111 }) // 114.126.250.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1101, 0b0011_1100, 0b1110_1110, 0b1101_1011 }), // 61.60.238.219
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0011_1101, 0b0011_1100, 0b1110_1110, 0b0000_0000 }), // 61.60.238.0
                 Last: new IPAddress(new byte[] { 0b0011_1101, 0b0011_1100, 0b1110_1110, 0b1111_1111 }) // 61.60.238.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_0111, 0b1111_0001, 0b0100_1111, 0b0111_0001 }), // 23.241.79.113
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0001_0111, 0b1111_0001, 0b0100_1111, 0b0000_0000 }), // 23.241.79.0
                 Last: new IPAddress(new byte[] { 0b0001_0111, 0b1111_0001, 0b0100_1111, 0b1111_1111 }) // 23.241.79.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b0011_0110, 0b0111_0101, 0b1110_1111 }), // 191.54.117.239
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1011_1111, 0b0011_0110, 0b0111_0101, 0b0000_0000 }), // 191.54.117.0
                 Last: new IPAddress(new byte[] { 0b1011_1111, 0b0011_0110, 0b0111_0101, 0b1111_1111 }) // 191.54.117.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }), // 0.0.0.255
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }) // 0.0.0.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1001_0001 }), // 0.0.0.145
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }) // 0.0.0.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0101_0101 }), // 0.0.0.85
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }) // 0.0.0.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)24
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_1111 }) // 0.0.0.255
            ));

            #endregion

            #region prefixLength = 23 (Net mask: 255.255.254.0)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000 }), // 255.255.254.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000 }), // 255.255.254.0
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000 }), // 255.255.254.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_0100, 0b0111_0110, 0b0111_1010, 0b0000_0000 }), // 52.118.122.0
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0011_0100, 0b0111_0110, 0b0111_1010, 0b0000_0000 }), // 52.118.122.0
                 Last: new IPAddress(new byte[] { 0b0011_0100, 0b0111_0110, 0b0111_1011, 0b1111_1111 }) // 52.118.123.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1100, 0b0000_1111, 0b1100_1111, 0b1111_1111 }), // 124.15.207.255
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_1100, 0b0000_1111, 0b1100_1110, 0b0000_0000 }), // 124.15.206.0
                 Last: new IPAddress(new byte[] { 0b0111_1100, 0b0000_1111, 0b1100_1111, 0b1111_1111 }) // 124.15.207.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0110_0001, 0b1100_0000, 0b1010_1000, 0b0000_0000 }), // 97.192.168.0
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0110_0001, 0b1100_0000, 0b1010_1000, 0b0000_0000 }), // 97.192.168.0
                 Last: new IPAddress(new byte[] { 0b0110_0001, 0b1100_0000, 0b1010_1001, 0b1111_1111 }) // 97.192.169.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_1100, 0b1011_1101, 0b1111_0101, 0b1111_1111 }), // 140.189.245.255
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_1100, 0b1011_1101, 0b1111_0100, 0b0000_0000 }), // 140.189.244.0
                 Last: new IPAddress(new byte[] { 0b1000_1100, 0b1011_1101, 0b1111_0101, 0b1111_1111 }) // 140.189.245.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1100, 0b1001_0101, 0b1010_0100, 0b1101_1100 }), // 204.149.164.220
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_1100, 0b1001_0101, 0b1010_0100, 0b0000_0000 }), // 204.149.164.0
                 Last: new IPAddress(new byte[] { 0b1100_1100, 0b1001_0101, 0b1010_0101, 0b1111_1111 }) // 204.149.165.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0100, 0b0011_0001, 0b0001_0001, 0b1011_1010 }), // 68.49.17.186
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0100_0100, 0b0011_0001, 0b0001_0000, 0b0000_0000 }), // 68.49.16.0
                 Last: new IPAddress(new byte[] { 0b0100_0100, 0b0011_0001, 0b0001_0001, 0b1111_1111 }) // 68.49.17.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0100, 0b0010_0000, 0b1101_0110, 0b1101_0111 }), // 244.32.214.215
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_0100, 0b0010_0000, 0b1101_0110, 0b0000_0000 }), // 244.32.214.0
                 Last: new IPAddress(new byte[] { 0b1111_0100, 0b0010_0000, 0b1101_0111, 0b1111_1111 }) // 244.32.215.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0110, 0b0100_1010, 0b0010_1111, 0b1010_1010 }), // 246.74.47.170
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_0110, 0b0100_1010, 0b0010_1110, 0b0000_0000 }), // 246.74.46.0
                 Last: new IPAddress(new byte[] { 0b1111_0110, 0b0100_1010, 0b0010_1111, 0b1111_1111 }) // 246.74.47.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }), // 0.0.1.255
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }) // 0.0.1.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1101_0101 }), // 0.0.1.213
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }) // 0.0.1.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1111_0110 }), // 0.0.0.246
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }) // 0.0.1.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)23
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0001, 0b1111_1111 }) // 0.0.1.255
            ));

            #endregion

            #region prefixLength = 9 (Net mask: 255.128.0.0; ff80::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 255.128.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 255.128.0.0
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 255.128.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 144.128.0.0
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1001_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 144.128.0.0
                 Last: new IPAddress(new byte[] { 0b1001_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 144.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 233.255.255.255
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1110_1001, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 233.128.0.0
                 Last: new IPAddress(new byte[] { 0b1110_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 233.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 62.0.0.0
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0011_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 62.0.0.0
                 Last: new IPAddress(new byte[] { 0b0011_1110, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 62.127.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_0110, 0b0111_1111, 0b1111_1111, 0b1111_1111 }), // 150.127.255.255
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1001_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 150.0.0.0
                 Last: new IPAddress(new byte[] { 0b1001_0110, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 150.127.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_0010, 0b0010_1000, 0b1010_0111, 0b1101_0111 }), // 50.40.167.215
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0011_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 50.0.0.0
                 Last: new IPAddress(new byte[] { 0b0011_0010, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 50.127.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b0100_0110, 0b0011_1010, 0b0000_0111 }), // 191.70.58.7
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1011_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 191.0.0.0
                 Last: new IPAddress(new byte[] { 0b1011_1111, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 191.127.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1110, 0b1011_1011, 0b0101_0100, 0b1100_0011 }), // 158.187.84.195
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1001_1110, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 158.128.0.0
                 Last: new IPAddress(new byte[] { 0b1001_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 158.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0110, 0b1111_1011, 0b0000_1111, 0b1110_0100 }), // 246.251.15.228
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_0110, 0b1000_0000, 0b0000_0000, 0b0000_0000 }), // 246.128.0.0
                 Last: new IPAddress(new byte[] { 0b1111_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 246.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }), // 0.127.255.255
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 0.127.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0101_0010, 0b0110_0110, 0b1011_1001 }), // 0.82.102.185
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 0.127.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0010_1000, 0b1110_1001, 0b1100_1101 }), // 0.40.233.205
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 0.127.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }) // 0.127.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff80::
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff80::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff80::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0100, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // b480::
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1011_0100, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // b480::
                Last: new IPAddress(new byte[]
                {
                    0b1011_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // b4ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 25ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0010_0101, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 2580::
                Last: new IPAddress(new byte[]
                {
                    0b0010_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 25ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_1011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // eb00::
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1110_1011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // eb00::
                Last: new IPAddress(new byte[]
                {
                    0b1110_1011, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // eb7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_0101, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 557f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0101_0101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 5500::
                Last: new IPAddress(new byte[]
                {
                    0b0101_0101, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 557f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0011, 0b0001_1110, 0b0011_1010, 0b0101_0011, 0b0101_0001, 0b0010_1110, 0b1101_0000, 0b0011_0100,
                    0b0000_1011, 0b1010_0110, 0b0011_0101, 0b0011_1110, 0b0000_0001, 0b0110_0111, 0b0000_1111, 0b0000_0010
                }), // 431e:3a53:512e:d034:ba6:353e:167:f02
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0100_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 4300::
                Last: new IPAddress(new byte[]
                {
                    0b0100_0011, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 437f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0010, 0b0101_0101, 0b1111_1101, 0b0111_0011, 0b1111_1101, 0b1110_1001, 0b1110_0101, 0b1101_0011,
                    0b0111_1001, 0b0111_0000, 0b1000_1101, 0b0100_0101, 0b1010_0111, 0b1101_1110, 0b0111_1000, 0b1001_1010
                }), // 1255:fd73:fde9:e5d3:7970:8d45:a7de:789a
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0001_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 1200::
                Last: new IPAddress(new byte[]
                {
                    0b0001_0010, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 127f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_0110, 0b1010_1110, 0b0000_0110, 0b0111_0101, 0b1000_1000, 0b0101_1100, 0b1110_1101, 0b1111_1000,
                    0b0100_0101, 0b0110_1010, 0b0011_0101, 0b1001_0001, 0b1111_1110, 0b1101_0001, 0b0011_0011, 0b0000_1000
                }), // f6ae:675:885c:edf8:456a:3591:fed1:3308
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_0110, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // f680::
                Last: new IPAddress(new byte[]
                {
                    0b1111_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // f6ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0110, 0b1110_1010, 0b0101_1011, 0b1100_0110, 0b1111_1010, 0b0010_0100, 0b0000_0000, 0b1110_0001,
                    0b0111_0011, 0b1111_0001, 0b1111_1000, 0b0001_1110, 0b1011_1101, 0b1001_1101, 0b1101_0001, 0b1111_0100
                }), // c6ea:5bc6:fa24:e1:73f1:f81e:bd9d:d1f4
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1100_0110, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // c680::
                Last: new IPAddress(new byte[]
                {
                    0b1100_0110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // c6ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1010, 0b1001_1110, 0b0101_1110, 0b1000_1110, 0b0111_0101, 0b0110_0111, 0b0011_0111,
                    0b0110_0001, 0b0101_0011, 0b0011_1010, 0b1011_1010, 0b1001_1000, 0b0010_0101, 0b1010_1011, 0b1111_0100
                }), // 7a:9e5e:8e75:6737:6153:3aba:9825:abf4
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0011_0110, 0b0100_1111, 0b0111_1100, 0b1110_0101, 0b1111_1011, 0b1010_0100, 0b0101_1000,
                    0b1001_0011, 0b0001_1010, 0b0010_1100, 0b1000_1110, 0b0000_0010, 0b0111_1110, 0b0010_0111, 0b0011_1001
                }), // 36:4f7c:e5fb:a458:931a:2c8e:27e:2739
                (byte)9
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7f:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            #endregion

            #region prefixLength = 8 (Net mask: 255.0.0.0; ff00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 255.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 255.0.0.0
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 255.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 129.0.0.0
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 129.0.0.0
                 Last: new IPAddress(new byte[] { 0b1000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 129.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 195.255.255.255
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 195.0.0.0
                 Last: new IPAddress(new byte[] { 0b1100_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 195.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 88.0.0.0
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0101_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 88.0.0.0
                 Last: new IPAddress(new byte[] { 0b0101_1000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 88.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0010, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 242.255.255.255
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 242.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_0010, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 242.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_1010, 0b0110_0010, 0b1101_0011, 0b1011_1000 }), // 42.98.211.184
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0010_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 42.0.0.0
                 Last: new IPAddress(new byte[] { 0b0010_1010, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 42.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1110, 0b1101_0001, 0b0101_1001, 0b0011_1100 }), // 238.209.89.60
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1110_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 238.0.0.0
                 Last: new IPAddress(new byte[] { 0b1110_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 238.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_0001, 0b0010_1111, 0b1010_0000, 0b1100_1001 }), // 113.47.160.201
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 113.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 113.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1111, 0b1000_1101, 0b1001_0001, 0b1111_1110 }), // 207.141.145.254
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 207.0.0.0
                 Last: new IPAddress(new byte[] { 0b1100_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 207.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 0.255.255.255
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 0.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b1000_1111, 0b1011_1111, 0b1100_0000 }), // 0.143.191.192
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 0.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_1110, 0b1011_1011, 0b0010_1011 }), // 0.14.187.43
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 0.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 0.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff00::
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff00::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ff00::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // b300::
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1011_0011, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // b300::
                Last: new IPAddress(new byte[]
                {
                    0b1011_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // b3ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // c5ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1100_0101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // c500::
                Last: new IPAddress(new byte[]
                {
                    0b1100_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // c5ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8c00::
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8c00::
                Last: new IPAddress(new byte[]
                {
                    0b1000_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 8cff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // feff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // fe00::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // feff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_1110, 0b0000_0001, 0b1110_0001, 0b1000_1001, 0b1001_1011, 0b0010_1000, 0b1001_0011, 0b0010_1100,
                    0b0010_0000, 0b1011_0110, 0b0001_1000, 0b0000_0111, 0b0011_0000, 0b1001_1011, 0b0111_0001, 0b0001_1111
                }), // e01:e189:9b28:932c:20b6:1807:309b:711f
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // e00::
                Last: new IPAddress(new byte[]
                {
                    0b0000_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // eff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0010, 0b1011_1001, 0b1011_1110, 0b0001_0110, 0b1010_1111, 0b1010_1101, 0b0100_0010, 0b1101_1110,
                    0b0111_0000, 0b1010_0000, 0b1000_1101, 0b1000_1101, 0b0000_0010, 0b0010_0011, 0b0110_0010, 0b0010_0001
                }), // 62b9:be16:afad:42de:70a0:8d8d:223:6221
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0110_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 6200::
                Last: new IPAddress(new byte[]
                {
                    0b0110_0010, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 62ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_1101, 0b0111_0011, 0b0010_1000, 0b1000_1010, 0b1010_1000, 0b0110_1110, 0b0001_1001, 0b1000_1101,
                    0b1111_1011, 0b1100_1101, 0b1011_0011, 0b1101_1100, 0b1010_1011, 0b1001_1111, 0b1111_0111, 0b1110_0100
                }), // 8d73:288a:a86e:198d:fbcd:b3dc:ab9f:f7e4
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_1101, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8d00::
                Last: new IPAddress(new byte[]
                {
                    0b1000_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 8dff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0001, 0b1000_0111, 0b1000_1100, 0b0101_0101, 0b1101_1110, 0b1100_1010, 0b1100_1011, 0b0100_0110,
                    0b0010_1010, 0b0001_1011, 0b1101_0011, 0b1100_1100, 0b0000_1111, 0b0011_1101, 0b1100_0000, 0b1001_0011
                }), // 3187:8c55:deca:cb46:2a1b:d3cc:f3d:c093
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0011_0001, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 3100::
                Last: new IPAddress(new byte[]
                {
                    0b0011_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 31ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1010_1000, 0b1101_0011, 0b1000_1011, 0b0110_1001, 0b1010_1000, 0b0011_0000, 0b0111_0111,
                    0b0011_1101, 0b1100_1100, 0b1010_1011, 0b0100_0101, 0b1000_1110, 0b0000_0010, 0b0111_0010, 0b0100_1000
                }), // a8:d38b:69a8:3077:3dcc:ab45:8e02:7248
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0111_1110, 0b0010_0110, 0b0110_1000, 0b1001_0011, 0b1100_0001, 0b1101_1110, 0b0101_0100,
                    0b1001_0000, 0b0011_0010, 0b1011_1110, 0b1001_0000, 0b1101_1100, 0b1000_1100, 0b1101_1001, 0b1010_0100
                }), // 7e:2668:93c1:de54:9032:be90:dc8c:d9a4
                (byte)8
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            #endregion

            #region prefixLength = 7 (Net mask: 254.0.0.0; fe00::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 254.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 254.0.0.0
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 254.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 126.0.0.0
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 126.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 67.255.255.255
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0100_0010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 66.0.0.0
                 Last: new IPAddress(new byte[] { 0b0100_0011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 67.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 204.0.0.0
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 204.0.0.0
                 Last: new IPAddress(new byte[] { 0b1100_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 205.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 185.255.255.255
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1011_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 184.0.0.0
                 Last: new IPAddress(new byte[] { 0b1011_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 185.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_0000, 0b1010_0100, 0b1101_1110, 0b1101_0110 }), // 192.164.222.214
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 192.0.0.0
                 Last: new IPAddress(new byte[] { 0b1100_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 193.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1001, 0b1011_0011, 0b1010_0100, 0b1111_1000 }), // 121.179.164.248
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0111_1000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 120.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 121.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_1010, 0b1001_0011, 0b0111_1011, 0b1001_0011 }), // 138.147.123.147
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_1010, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 138.0.0.0
                 Last: new IPAddress(new byte[] { 0b1000_1011, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 139.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b0100_0111, 0b1110_0100, 0b1010_1001 }), // 191.71.228.169
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1011_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 190.0.0.0
                 Last: new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 191.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 1.255.255.255
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 1.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0001, 0b0101_1001, 0b0100_0100, 0b0011_0011 }), // 1.89.68.51
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 1.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_1101, 0b0010_0111, 0b0001_0101 }), // 0.13.39.21
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 1.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 1.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // fe00::
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // fe00::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // fe00::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 2e00::
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0010_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 2e00::
                Last: new IPAddress(new byte[]
                {
                    0b0010_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 2fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 37ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0011_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 3600::
                Last: new IPAddress(new byte[]
                {
                    0b0011_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 37ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0110_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 6000::
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0110_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 6000::
                Last: new IPAddress(new byte[]
                {
                    0b0110_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 61ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 25ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0010_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 2400::
                Last: new IPAddress(new byte[]
                {
                    0b0010_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 25ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0100, 0b1010_0000, 0b0111_1100, 0b0011_1010, 0b1100_0100, 0b1101_1000, 0b1011_0100, 0b1111_1000,
                    0b1111_0011, 0b1101_1000, 0b0010_1001, 0b1011_1101, 0b1110_0000, 0b1110_0010, 0b1010_0111, 0b0100_0101
                }), // 44a0:7c3a:c4d8:b4f8:f3d8:29bd:e0e2:a745
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0100_0100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 4400::
                Last: new IPAddress(new byte[]
                {
                    0b0100_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 45ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1101, 0b0111_1000, 0b0101_0111, 0b0000_1111, 0b1001_1001, 0b0111_0101, 0b0001_1010, 0b0111_0110,
                    0b0110_1001, 0b0100_1010, 0b0011_1110, 0b1001_0101, 0b0010_1111, 0b0000_0011, 0b0010_0111, 0b1001_0001
                }), // 7d78:570f:9975:1a76:694a:3e95:2f03:2791
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0111_1100, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 7c00::
                Last: new IPAddress(new byte[]
                {
                    0b0111_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7dff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0101_0110, 0b0000_0101, 0b0011_0000, 0b0001_1101, 0b0001_1000, 0b0101_1101, 0b0001_0010, 0b0011_1110,
                    0b0001_0011, 0b0001_1001, 0b0001_0011, 0b1101_1111, 0b1001_1011, 0b1010_1100, 0b1110_1011, 0b0001_0001
                }), // 5605:301d:185d:123e:1319:13df:9bac:eb11
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0101_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 5600::
                Last: new IPAddress(new byte[]
                {
                    0b0101_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 57ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1010_0111, 0b0010_0011, 0b0101_1101, 0b0001_1000, 0b1110_0101, 0b1111_0101, 0b0100_1000, 0b1110_0111,
                    0b1101_0111, 0b0100_0000, 0b1010_0110, 0b1110_1101, 0b0111_0101, 0b0000_1100, 0b1000_1111, 0b0010_0001
                }), // a723:5d18:e5f5:48e7:d740:a6ed:750c:8f21
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1010_0110, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // a600::
                Last: new IPAddress(new byte[]
                {
                    0b1010_0111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // a7ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1001_1011, 0b1000_0011, 0b0001_0111, 0b1000_0111, 0b0100_1101, 0b1011_0000, 0b0101_0101,
                    0b1000_1110, 0b1101_1000, 0b1111_1110, 0b0100_1111, 0b1100_1110, 0b0101_0011, 0b0010_0001, 0b0110_0000
                }), // 19b:8317:874d:b055:8ed8:fe4f:ce53:2160
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1010_0000, 0b1001_1110, 0b1000_1010, 0b0000_1000, 0b1101_1001, 0b0010_1111, 0b1100_0111,
                    0b0011_0000, 0b0011_1011, 0b1100_0000, 0b0011_1011, 0b0011_0100, 0b0000_0010, 0b0000_1110, 0b0101_0101
                }), // a0:9e8a:8d9:2fc7:303b:c03b:3402:e55
                (byte)7
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 1ff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            #endregion

            #region prefixLength = 2 (Net mask: 192.0.0.0; c000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 192.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 192.0.0.0
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 192.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 64.0.0.0
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 64.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0000, 0b0000_1101, 0b0010_0111, 0b0001_0101 }), // 64.13.39.21
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 64.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1110, 0b1001_1100, 0b0011_0100, 0b0100_1011 }), // 126.156.52.75
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 64.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                 Last: new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 191.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_1100, 0b0011_0001, 0b1000_0000, 0b0010_0110 }), // 140.49.128.38
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                 Last: new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 191.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_1111, 0b1010_1001, 0b1101_0001, 0b1101_1010 }), // 175.169.209.218
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                 Last: new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 191.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 63.255.255.255
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 63.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_0000, 0b1110_1110, 0b0011_0111, 0b1010_0001 }), // 32.238.55.161
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 63.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_1110, 0b1010_1010, 0b1000_0001, 0b1001_0000 }), // 30.170.129.144
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 63.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 63.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // c000::
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // c000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // c000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::64.0.0.0
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::64.0.0.0
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b1010_0000, 0b1001_1110, 0b1000_1010, 0b0000_1000, 0b1101_1001, 0b0010_1111, 0b1100_0111,
                    0b0011_0000, 0b0011_1011, 0b1100_0000, 0b0011_1011, 0b0111_0100, 0b0000_0010, 0b0000_1110, 0b0101_0101
                }), // a0:9e8a:8d9:2fc7:303b:c03b:7402:e55
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::64.0.0.0
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_0100, 0b1010_1010, 0b1000_1000, 0b0010_0001, 0b1100_1001, 0b0000_1011, 0b1010_0001, 0b0011_0011,
                    0b0010_1001, 0b0011_0101, 0b1001_1101, 0b0111_0001, 0b0110_0000, 0b1101_1101, 0b0110_0101, 0b0110_0001
                }), // 24aa:8821:c90b:a133:2935:9d71:60dd:6561
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::64.0.0.0
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::128.0.0.0
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::128.0.0.0
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0110, 0b1010_0111, 0b1111_1100, 0b1000_0100, 0b1000_0001, 0b0110_0011, 0b1100_0010, 0b0111_1110,
                    0b1000_1001, 0b1000_0010, 0b1000_1111, 0b0111_0111, 0b1011_1011, 0b0010_1010, 0b1100_1000, 0b1100_1010
                }), // 6a7:fc84:8163:c27e:8982:8f77:bb2a:c8ca
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::128.0.0.0
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0010_1011, 0b0100_1101, 0b0010_0001, 0b0101_1001, 0b0100_1100, 0b0000_0101, 0b1101_0011, 0b1111_0011,
                    0b1110_0011, 0b1110_0010, 0b1110_0010, 0b0101_1100, 0b1100_0110, 0b0001_1011, 0b0101_0101, 0b1001_0101
                }), // 2b4d:2159:4c05:d3f3:e3e2:e25c:c61b:5595
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::128.0.0.0
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0011_0100, 0b0100_1111, 0b1010_0101, 0b1000_1100, 0b0000_1101, 0b0110_0011, 0b0001_1011, 0b1110_1010,
                    0b1101_0000, 0b0000_0100, 0b0110_1010, 0b1101_1000, 0b1100_0011, 0b1011_1000, 0b1001_0010, 0b1000_1010
                }), // 344f:a58c:d63:1bea:d004:6ad8:c3b8:928a
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0001_0001, 0b0011_1010, 0b0010_0011, 0b0110_1111, 0b0110_0110, 0b1101_0111, 0b0100_0101, 0b1110_1110,
                    0b1101_1111, 0b0100_0100, 0b1000_0010, 0b0111_1001, 0b1000_1100, 0b0011_0110, 0b1100_1010, 0b0000_1111
                }), // 113a:236f:66d7:45ee:df44:8279:8c36:ca0f
                (byte)2
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            #endregion

            #region prefixLength = 1 (Net mask: 128.0.0.0; 8000::)

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 255.255.255.255
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0110, 0b0101_0001, 0b1110_0101, 0b0111_0011 }), // 182.81.229.115
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1100, 0b0010_1000, 0b1001_1011, 0b0101_1110 }), // 252.40.155.94
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 128.0.0.0
                 Last: new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 255.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }), // 127.255.255.255
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_1110, 0b1111_1110, 0b0100_0010, 0b1101_1110 }), // 126.254.66.222
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b1100_0011, 0b1110_0111, 0b1100_0110 }), // 0.195.231.198
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), // 0.0.0.0
                 Last: new IPAddress(new byte[] { 0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }) // 127.255.255.255
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8000::
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1011_0110, 0b0011_0110, 0b1010_0100, 0b1110_1001, 0b1111_0011, 0b0100_1101, 0b0101_0000, 0b1110_0110,
                    0b1011_1110, 0b1010_0011, 0b1000_1100, 0b0011_0110, 0b1110_0011, 0b0010_0000, 0b0010_1000, 0b0111_1110
                }), // b636:a4e9:f34d:50e6:bea3:8c36:e320:287e
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b1110_0101, 0b1111_0001, 0b0011_0110, 0b0100_0010, 0b1110_1001, 0b0110_1011, 0b1000_0100, 0b1100_1001,
                    0b0011_0000, 0b1100_1101, 0b1010_1010, 0b0000_0110, 0b0101_0101, 0b1101_0011, 0b0011_1001, 0b0100_0101
                }), // e5f1:3642:e96b:84c9:30cd:aa06:55d3:3945
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // 8000::
                Last: new IPAddress(new byte[]
                {
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }), // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0100_0011, 0b1010_0001, 0b1100_1101, 0b0100_0110, 0b0111_1111, 0b0101_1111, 0b1110_0000, 0b0000_1110,
                    0b0000_1001, 0b1111_1010, 0b0101_1001, 0b1111_0111, 0b1101_0001, 0b0010_0100, 0b1110_0000, 0b0011_1010
                }), // 43a1:cd46:7f5f:e00e:9fa:59f7:d124:e03a
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            yield return new TestCaseData(
                new IPAddress(new byte[]
                {
                    0b0000_0111, 0b0001_1000, 0b0011_1101, 0b1000_0101, 0b1011_0100, 0b1110_1010, 0b1101_0111, 0b0110_1100,
                    0b1001_0110, 0b1000_1001, 0b0000_1010, 0b0110_0010, 0b0111_0101, 0b0111_1001, 0b0010_1001, 0b0000_0000
                }), // 718:3d85:b4ea:d76c:9689:a62:7579:2900
                (byte)1
            )
            .Returns((
                First: new IPAddress(new byte[]
                {
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000,
                    0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000
                }), // ::
                Last: new IPAddress(new byte[]
                {
                    0b0111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111,
                    0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111
                }) // 7fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
            ));

            #endregion
        }

        public static System.Collections.IEnumerable GetSortTestData()
        {
            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 0, 0, 0, 0 })
                },
                true
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 0, 0, 0, 0 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 0, 0, 0, 0 })
                },
                false
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 0, 0, 0, 0 })
                },
                null
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                },
                true
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 0, 0, 0, 0 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                },
                false
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                },
                null
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                },
                true
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                },
                false
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 1 }),
                    new(new byte[] { 192, 168, 1, 2 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                },
                null
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 1 }),
                    new(new byte[] { 192, 168, 1, 2 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 1 }),
                    new(new byte[] { 192, 168, 1, 2 })
                },
                true
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                },
                false
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                },
                null
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 192, 168, 1, 1 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                },
                true
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                },
                false
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 193, 168, 1, 1 }),
                    new(new byte[] { 192, 168, 1, 2 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                },
                null
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 193, 168, 1, 1 }),
                    new(new byte[] { 192, 168, 1, 2 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                },
                true
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 193, 168, 1, 1 }),
                    new(new byte[] { 192, 168, 1, 2 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                },
                false
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                }
            );

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                },
                null
            )
            .Returns(
                new IPAddress[]
                {
                    new(new byte[] { 192, 168, 1, 2 }),
                    new(new byte[] { 193, 168, 1, 1 })
                }
            );
        }

        public static System.Collections.IEnumerable GetUniqueTestData()
        {
            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                },
                true
            )
            .Returns(new IPAddress[]
            {
                new(new byte[] { 255, 255, 255, 255 }),
                new(new byte[] { 0, 0, 0, 0 })
            });

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 0, 0, 0, 0 })
                },
                true
            )
            .Returns(new IPAddress[]
            {
                new(new byte[] { 255, 255, 255, 255 }),
                new(new byte[] { 0, 0, 0, 0 })
            });

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 0, 0, 0, 0 })
                },
                true
            )
            .Returns(new IPAddress[]
            {
                new(new byte[] { 255, 255, 255, 255 }),
                new(new byte[] { 0, 0, 0, 0 })
            });

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 }),
                    new(new byte[] { 255, 255, 255, 255 })
                },
                true
            )
            .Returns(new IPAddress[]
            {
                new(new byte[] { 0, 0, 0, 0 }),
                new(new byte[] { 255, 255, 255, 255 })
            });

            yield return new TestCaseData(
                new IPAddress[]
                {
                    new(new byte[] { 0, 0, 0, 0 }),
                    new(new byte[] { 255, 255, 255, 255 })
                },
                true
            )
            .Returns(new IPAddress[]
            {
                new(new byte[] { 0, 0, 0, 0 }),
                new(new byte[] { 255, 255, 255, 255 })
            });
        }

        public static System.Collections.IEnumerable GetIncrementBlockIPTestData()
        {
            #region  prefixLength = 0

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)0, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }),
                (byte)0, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)0, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)0, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)0, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 1

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)1, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)1, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)1, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            );

            #endregion

            #region  prefixLength = 2

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)2, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1100_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)2, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)2, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1010_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }),
                (byte)2, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)2, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)2, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)2, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 3

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)3, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_0000, 0b0000_0000, 0b0000_0000, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)3, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)3, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }),
                (byte)3, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1001_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)3, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)3, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)3, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 7

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)7, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1110, 0b0000_0000, 0b0000_0000, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1110, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)7, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)7, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_0101, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0101, 0b1111_1111, 0b1111_1111, 0b1111_1110 }),
                (byte)7, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0101, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)7, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1000_1001, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0001, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)7, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_1101, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)7, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 8

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)8, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b0000_0000, 0b0000_0000, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b0111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)8, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1000, 0b0111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)8, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_1000, 0b1000_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1100_0100, 0b1111_1111, 0b1111_1111, 0b1111_1110 }),
                (byte)8, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1100_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_1010, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)8, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_1010, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_0100, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)8, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_1100, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)8, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 9

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)9, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1000_0000, 0b0000_0000, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1011_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)9, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1100_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0011, 0b0011_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)9, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_0011, 0b0100_0000, 0b0000_0000, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1000, 0b0111_1111, 0b1111_1111, 0b1111_1110 }),
                (byte)9, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1000, 0b0111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_0011, 0b0111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)9, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_0011, 0b0111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0110, 0b0111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)9, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1000_0101, 0b0111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)9, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 23

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0000 }),
                (byte)23, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1110, 0b1111_1111 }),
                (byte)23, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0100, 0b0111_0101, 0b1101_1100, 0b1111_1111 }),
                (byte)23, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0100, 0b0111_0101, 0b1101_1101, 0b0000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_0000, 0b1010_0101, 0b0011_0001, 0b1111_1110 }),
                (byte)23, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1101_0000, 0b1010_0101, 0b0011_0001, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1100, 0b0001_1011, 0b1001_1001, 0b1111_1111 }),
                (byte)23, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0011_1100, 0b0001_1011, 0b1001_1001, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0011_1001, 0b1101_0100, 0b0001_1001, 0b1111_1111 }),
                (byte)23, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1111, 0b0101_0010, 0b1010_0001, 0b1111_1111 }),
                (byte)23, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 24

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0000 }),
                (byte)24, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b0111_1111 }),
                (byte)24, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1110_0011, 0b1000_0010, 0b0100_1000, 0b0111_1111 }),
                (byte)24, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1110_0011, 0b1000_0010, 0b0100_1000, 0b1000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0110, 0b1111_0110, 0b0110_0110, 0b0111_1111 }),
                (byte)24, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0110, 0b1111_0110, 0b0110_0110, 0b1000_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_1100, 0b1000_0111, 0b0111_0110, 0b1111_1110 }),
                (byte)24, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0001_1100, 0b1000_0111, 0b0111_0110, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1110, 0b0111_0010, 0b1110_1110, 0b1111_1111 }),
                (byte)24, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1110, 0b0111_0010, 0b1110_1110, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0010_0100, 0b0110_1010, 0b0110_0010, 0b1111_1111 }),
                (byte)24, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1101_0110, 0b1010_0011, 0b1110_0010, 0b1111_1111 }),
                (byte)24, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 25

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0000 }),
                (byte)25, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1000_0001 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1011_1111 }),
                (byte)25, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1100_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0100_0111, 0b0111_0101, 0b0110_1100, 0b0011_1111 }),
                (byte)25, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0100_0111, 0b0111_0101, 0b0110_1100, 0b0100_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_0110, 0b0101_0000, 0b0011_0010, 0b0011_1111 }),
                (byte)25, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_0110, 0b0101_0000, 0b0011_0010, 0b0100_0000 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0000, 0b1111_1001, 0b0101_1101, 0b0111_1110 }),
                (byte)25, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1010_0000, 0b1111_1001, 0b0101_1101, 0b0111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_0101, 0b1011_1010, 0b0111_1011, 0b0111_1111 }),
                (byte)25, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1001_0101, 0b1011_1010, 0b0111_1011, 0b0111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1001_1010, 0b1110_0101, 0b0110_0110, 0b0111_1111 }),
                (byte)25, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1100, 0b1001_0111, 0b1110_1100, 0b0111_1111 }),
                (byte)25, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 30

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100 }),
                (byte)30, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1101 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1101 }),
                (byte)30, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1011_1001, 0b1011_1010, 0b1001_0101, 0b0111_1001 }),
                (byte)30, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1011_1001, 0b1011_1010, 0b1001_0101, 0b0111_1010 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_0101, 0b0010_0001, 0b1000_0100, 0b0001_1010 }),
                (byte)30, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0001_0101, 0b0010_0001, 0b1000_0100, 0b0001_1011 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0101_1011, 0b1100_0011, 0b1000_1110, 0b1010_1011 }),
                (byte)30, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0101_1011, 0b1100_0011, 0b1000_1110, 0b1010_1011 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0111_0110, 0b0110_0110, 0b0100_1101, 0b0110_1011 }),
                (byte)30, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0001_0011, 0b0000_0011, 0b1111_0010, 0b0011_1011 }),
                (byte)30, null
            )
            .Returns(
                null
            );

            #endregion

            #region  prefixLength = 31

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 }),
                (byte)31, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1100 }),
                (byte)31, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1101 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_1001, 0b1000_1111, 0b1011_0001, 0b1111_1101 }),
                (byte)31, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b0000_1001, 0b1000_1111, 0b1011_0001, 0b1111_1101 })
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1000, 0b1101_0111, 0b1010_0110, 0b1110_0101 }),
                (byte)31, false
            )
            .Returns(
                null
            );

            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1010_0001, 0b0111_0100, 0b0101_1000, 0b0110_1101 }),
                (byte)31, null
            )
            .Returns(
                null
            );

            #endregion
        }

        public static System.Collections.IEnumerable GetDecrementBlockIPTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 }),
                (byte)0, true
            )
            .Returns(
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1110 })
            );
        }

        public static System.Collections.IEnumerable GetIncrementTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0, 0, 0, 0 }),
                true
            )
            .Returns(
                new IPAddress(new byte[] { 0, 0, 0, 1 })
            );
        }

        public static System.Collections.IEnumerable GetDecrementTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 255, 255, 255, 255 }),
                true
            )
            .Returns(
                new IPAddress(new byte[] { 255, 255, 255, 254 })
            );
        }

        public static System.Collections.IEnumerable GetGetIPAddressesTestData()
        {
            yield return new TestCaseData(
                new IPNetwork(
                    new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                    32
                ),
                true
            )
            .Returns(new IPAddress[]
            {
                new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            });
        }

        public static System.Collections.IEnumerable GetGetNetworksTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 })
            )
            .Returns(new IPNetwork[]
            {
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 1),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 2),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 3),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 4),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 5),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 6),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 7),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 8),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 9),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 10),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 11),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 12),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 13),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 14),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 15),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 16),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 17),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 18),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 19),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 20),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 21),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 22),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 23),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 24),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 25),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 26),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 27),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 28),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 29),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 30),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 31),
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 32)
            });
        }

        public static System.Collections.IEnumerable GetGetNetworksInTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            )
            .Returns(new IPNetwork[]
            {
                new(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 0)
            });
        }

        public static System.Collections.IEnumerable GetGetNetworkToIPAddressTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                new IPAddress(new byte[] { 0b1111_1111, 0b1111_1111, 0b1111_1111, 0b1111_1111 })
            )
            .Returns(
                new IPNetwork(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 0)
            );
        }

        public static System.Collections.IEnumerable GetGetNetworkToInt32TestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }),
                (byte)0
            )
            .Returns(
                new IPNetwork(new(new byte[] { 0b0000_0000, 0b0000_0000, 0b0000_0000, 0b0000_0000 }), 0)
            );
        }
    }
}