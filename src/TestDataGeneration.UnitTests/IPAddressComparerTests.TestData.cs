using System.Net;
using TestDataGeneration.Net;

namespace TestDataGeneration.UnitTests;

public partial class IPAddressComparerTests
{
    static class TestData
    {
        public static System.Collections.IEnumerable GetInvertedCompareTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00 }),
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00 }))
                .Returns(0);
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }))
                .Returns(0);
        }

        public static System.Collections.IEnumerable GetCompareTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00 }),
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00 }))
                .Returns(0);
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }))
                .Returns(0);
        }

        public static System.Collections.IEnumerable GetEqualsTestData()
        {
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00 }),
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00 }))
                .Returns(true);
            yield return new TestCaseData(
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }),
                new IPAddress(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }))
                .Returns(true);
        }
    }
}